//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxCompletableSubscriber.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsBufferUntilSubscriber.h"
#include "RxInternalSchedulersSchedulerWhen.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversSerializedObserver.h"
#include "RxScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@class RxInternalSchedulersSchedulerWhen_ScheduledAction;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface RxInternalSchedulersSchedulerWhen () {
 @public
  RxScheduler *actualScheduler_;
  id<RxObserver> workerObserver_;
  id<RxSubscription> subscription_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalSchedulersSchedulerWhen, actualScheduler_, RxScheduler *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersSchedulerWhen, workerObserver_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxInternalSchedulersSchedulerWhen, subscription_, id<RxSubscription>)

@interface RxInternalSchedulersSchedulerWhen_1 : NSObject < RxFunctionsFunc1 > {
 @public
  RxScheduler_Worker *val$actualWorker_;
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0;

- (RxCompletable *)callWithId:(RxInternalSchedulersSchedulerWhen_ScheduledAction *)action;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersSchedulerWhen_1)

__attribute__((unused)) static void RxInternalSchedulersSchedulerWhen_1_initWithRxScheduler_Worker_(RxInternalSchedulersSchedulerWhen_1 *self, RxScheduler_Worker *capture$0);

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_1 *new_RxInternalSchedulersSchedulerWhen_1_initWithRxScheduler_Worker_(RxScheduler_Worker *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_1 *create_RxInternalSchedulersSchedulerWhen_1_initWithRxScheduler_Worker_(RxScheduler_Worker *capture$0);

@interface RxInternalSchedulersSchedulerWhen_1_1 : NSObject < RxCompletable_OnSubscribe > {
 @public
  RxInternalSchedulersSchedulerWhen_1 *this$0_;
  RxInternalSchedulersSchedulerWhen_ScheduledAction *val$action_;
}

- (instancetype)initWithRxInternalSchedulersSchedulerWhen_1:(RxInternalSchedulersSchedulerWhen_1 *)outer$
      withRxInternalSchedulersSchedulerWhen_ScheduledAction:(RxInternalSchedulersSchedulerWhen_ScheduledAction *)capture$0;

- (void)callWithId:(id<RxCompletableSubscriber>)actionCompletable;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersSchedulerWhen_1_1)

__attribute__((unused)) static void RxInternalSchedulersSchedulerWhen_1_1_initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_(RxInternalSchedulersSchedulerWhen_1_1 *self, RxInternalSchedulersSchedulerWhen_1 *outer$, RxInternalSchedulersSchedulerWhen_ScheduledAction *capture$0);

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_1_1 *new_RxInternalSchedulersSchedulerWhen_1_1_initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_(RxInternalSchedulersSchedulerWhen_1 *outer$, RxInternalSchedulersSchedulerWhen_ScheduledAction *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_1_1 *create_RxInternalSchedulersSchedulerWhen_1_1_initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_(RxInternalSchedulersSchedulerWhen_1 *outer$, RxInternalSchedulersSchedulerWhen_ScheduledAction *capture$0);

@interface RxInternalSchedulersSchedulerWhen_2 : RxScheduler_Worker {
 @public
  RxScheduler_Worker *val$actualWorker_;
  id<RxObserver> val$actionObserver_;
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed_;
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
                            withRxObserver:(id<RxObserver>)capture$1;

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersSchedulerWhen_2)

J2OBJC_FIELD_SETTER(RxInternalSchedulersSchedulerWhen_2, unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalSchedulersSchedulerWhen_2_initWithRxScheduler_Worker_withRxObserver_(RxInternalSchedulersSchedulerWhen_2 *self, RxScheduler_Worker *capture$0, id<RxObserver> capture$1);

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_2 *new_RxInternalSchedulersSchedulerWhen_2_initWithRxScheduler_Worker_withRxObserver_(RxScheduler_Worker *capture$0, id<RxObserver> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_2 *create_RxInternalSchedulersSchedulerWhen_2_initWithRxScheduler_Worker_withRxObserver_(RxScheduler_Worker *capture$0, id<RxObserver> capture$1);

@interface RxInternalSchedulersSchedulerWhen_3 : NSObject < RxSubscription >

- (instancetype)init;

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersSchedulerWhen_3)

__attribute__((unused)) static void RxInternalSchedulersSchedulerWhen_3_init(RxInternalSchedulersSchedulerWhen_3 *self);

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_3 *new_RxInternalSchedulersSchedulerWhen_3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_3 *create_RxInternalSchedulersSchedulerWhen_3_init();

@interface RxInternalSchedulersSchedulerWhen_ScheduledAction : JavaUtilConcurrentAtomicAtomicReference < RxSubscription >

- (instancetype)init;

- (void)callWithRxScheduler_Worker:(RxScheduler_Worker *)actualWorker;

- (id<RxSubscription>)callActualWithRxScheduler_Worker:(RxScheduler_Worker *)actualWorker;

- (jboolean)isUnsubscribed;

- (void)unsubscribe;

- (id<RxSubscription>)get;

- (id<RxSubscription>)getAndSetWithId:(id<RxSubscription>)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersSchedulerWhen_ScheduledAction)

__attribute__((unused)) static void RxInternalSchedulersSchedulerWhen_ScheduledAction_init(RxInternalSchedulersSchedulerWhen_ScheduledAction *self);

__attribute__((unused)) static void RxInternalSchedulersSchedulerWhen_ScheduledAction_callWithRxScheduler_Worker_(RxInternalSchedulersSchedulerWhen_ScheduledAction *self, RxScheduler_Worker *actualWorker);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersSchedulerWhen_ScheduledAction)

@interface RxInternalSchedulersSchedulerWhen_ImmediateAction : RxInternalSchedulersSchedulerWhen_ScheduledAction {
 @public
  id<RxFunctionsAction0> action_;
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)callActualWithRxScheduler_Worker:(RxScheduler_Worker *)actualWorker;

- (id<RxSubscription>)get;

- (id<RxSubscription>)getAndSetWithId:(id<RxSubscription>)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersSchedulerWhen_ImmediateAction)

J2OBJC_FIELD_SETTER(RxInternalSchedulersSchedulerWhen_ImmediateAction, action_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxInternalSchedulersSchedulerWhen_ImmediateAction_initWithRxFunctionsAction0_(RxInternalSchedulersSchedulerWhen_ImmediateAction *self, id<RxFunctionsAction0> action);

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_ImmediateAction *new_RxInternalSchedulersSchedulerWhen_ImmediateAction_initWithRxFunctionsAction0_(id<RxFunctionsAction0> action) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_ImmediateAction *create_RxInternalSchedulersSchedulerWhen_ImmediateAction_initWithRxFunctionsAction0_(id<RxFunctionsAction0> action);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersSchedulerWhen_ImmediateAction)

@interface RxInternalSchedulersSchedulerWhen_DelayedAction : RxInternalSchedulersSchedulerWhen_ScheduledAction {
 @public
  id<RxFunctionsAction0> action_;
  jlong delayTime_;
  JavaUtilConcurrentTimeUnit *unit_;
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                  withLong:(jlong)delayTime
            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<RxSubscription>)callActualWithRxScheduler_Worker:(RxScheduler_Worker *)actualWorker;

- (id<RxSubscription>)get;

- (id<RxSubscription>)getAndSetWithId:(id<RxSubscription>)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersSchedulerWhen_DelayedAction)

J2OBJC_FIELD_SETTER(RxInternalSchedulersSchedulerWhen_DelayedAction, action_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxInternalSchedulersSchedulerWhen_DelayedAction, unit_, JavaUtilConcurrentTimeUnit *)

__attribute__((unused)) static void RxInternalSchedulersSchedulerWhen_DelayedAction_initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_(RxInternalSchedulersSchedulerWhen_DelayedAction *self, id<RxFunctionsAction0> action, jlong delayTime, JavaUtilConcurrentTimeUnit *unit);

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_DelayedAction *new_RxInternalSchedulersSchedulerWhen_DelayedAction_initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_(id<RxFunctionsAction0> action, jlong delayTime, JavaUtilConcurrentTimeUnit *unit) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen_DelayedAction *create_RxInternalSchedulersSchedulerWhen_DelayedAction_initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_(id<RxFunctionsAction0> action, jlong delayTime, JavaUtilConcurrentTimeUnit *unit);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersSchedulerWhen_DelayedAction)

J2OBJC_INITIALIZED_DEFN(RxInternalSchedulersSchedulerWhen)

id<RxSubscription> RxInternalSchedulersSchedulerWhen_SUBSCRIBED;
id<RxSubscription> RxInternalSchedulersSchedulerWhen_UNSUBSCRIBED;

@implementation RxInternalSchedulersSchedulerWhen

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)combine
                         withRxScheduler:(RxScheduler *)actualScheduler {
  RxInternalSchedulersSchedulerWhen_initWithRxFunctionsFunc1_withRxScheduler_(self, combine, actualScheduler);
  return self;
}

- (void)unsubscribe {
  [((id<RxSubscription>) nil_chk(subscription_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((id<RxSubscription>) nil_chk(subscription_)) isUnsubscribed];
}

- (RxScheduler_Worker *)createWorker {
  RxScheduler_Worker *actualWorker = [((RxScheduler *) nil_chk(actualScheduler_)) createWorker];
  RxInternalOperatorsBufferUntilSubscriber *actionSubject = RxInternalOperatorsBufferUntilSubscriber_create();
  id<RxObserver> actionObserver = create_RxObserversSerializedObserver_initWithRxObserver_(actionSubject);
  RxObservable *actions = [((RxInternalOperatorsBufferUntilSubscriber *) nil_chk(actionSubject)) mapWithRxFunctionsFunc1:create_RxInternalSchedulersSchedulerWhen_1_initWithRxScheduler_Worker_(actualWorker)];
  RxScheduler_Worker *worker = create_RxInternalSchedulersSchedulerWhen_2_initWithRxScheduler_Worker_withRxObserver_(actualWorker, actionObserver);
  [((id<RxObserver>) nil_chk(workerObserver_)) onNextWithId:actions];
  return worker;
}

- (void)dealloc {
  RELEASE_(actualScheduler_);
  RELEASE_(workerObserver_);
  RELEASE_(subscription_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxFunctionsFunc1:withRxScheduler:);
  methods[1].selector = @selector(unsubscribe);
  methods[2].selector = @selector(isUnsubscribed);
  methods[3].selector = @selector(createWorker);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actualScheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "workerObserver_", "LRxObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "subscription_", "LRxSubscription;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SUBSCRIBED", "LRxSubscription;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "UNSUBSCRIBED", "LRxSubscription;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsFunc1;LRxScheduler;", "(Lrx/functions/Func1<Lrx/Observable<Lrx/Observable<Lrx/Completable;>;>;Lrx/Completable;>;Lrx/Scheduler;)V", "Lrx/Observer<Lrx/Observable<Lrx/Completable;>;>;", &RxInternalSchedulersSchedulerWhen_SUBSCRIBED, &RxInternalSchedulersSchedulerWhen_UNSUBSCRIBED, "LRxInternalSchedulersSchedulerWhen_ScheduledAction;LRxInternalSchedulersSchedulerWhen_ImmediateAction;LRxInternalSchedulersSchedulerWhen_DelayedAction;" };
  static const J2ObjcClassInfo _RxInternalSchedulersSchedulerWhen = { "SchedulerWhen", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, 5, -1, -1, -1 };
  return &_RxInternalSchedulersSchedulerWhen;
}

+ (void)initialize {
  if (self == [RxInternalSchedulersSchedulerWhen class]) {
    JreStrongAssignAndConsume(&RxInternalSchedulersSchedulerWhen_SUBSCRIBED, new_RxInternalSchedulersSchedulerWhen_3_init());
    JreStrongAssign(&RxInternalSchedulersSchedulerWhen_UNSUBSCRIBED, RxSubscriptionsSubscriptions_unsubscribed());
    J2OBJC_SET_INITIALIZED(RxInternalSchedulersSchedulerWhen)
  }
}

@end

void RxInternalSchedulersSchedulerWhen_initWithRxFunctionsFunc1_withRxScheduler_(RxInternalSchedulersSchedulerWhen *self, id<RxFunctionsFunc1> combine, RxScheduler *actualScheduler) {
  RxScheduler_init(self);
  JreStrongAssign(&self->actualScheduler_, actualScheduler);
  RxSubjectsPublishSubject *workerSubject = RxSubjectsPublishSubject_create();
  JreStrongAssignAndConsume(&self->workerObserver_, new_RxObserversSerializedObserver_initWithRxObserver_(workerSubject));
  JreStrongAssign(&self->subscription_, [((RxCompletable *) nil_chk([((id<RxFunctionsFunc1>) nil_chk(combine)) callWithId:[((RxSubjectsPublishSubject *) nil_chk(workerSubject)) onBackpressureBuffer]])) subscribe]);
}

RxInternalSchedulersSchedulerWhen *new_RxInternalSchedulersSchedulerWhen_initWithRxFunctionsFunc1_withRxScheduler_(id<RxFunctionsFunc1> combine, RxScheduler *actualScheduler) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersSchedulerWhen, initWithRxFunctionsFunc1_withRxScheduler_, combine, actualScheduler)
}

RxInternalSchedulersSchedulerWhen *create_RxInternalSchedulersSchedulerWhen_initWithRxFunctionsFunc1_withRxScheduler_(id<RxFunctionsFunc1> combine, RxScheduler *actualScheduler) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersSchedulerWhen, initWithRxFunctionsFunc1_withRxScheduler_, combine, actualScheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersSchedulerWhen)

@implementation RxInternalSchedulersSchedulerWhen_1

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0 {
  RxInternalSchedulersSchedulerWhen_1_initWithRxScheduler_Worker_(self, capture$0);
  return self;
}

- (RxCompletable *)callWithId:(RxInternalSchedulersSchedulerWhen_ScheduledAction *)action {
  return RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxInternalSchedulersSchedulerWhen_1_1_initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_(self, action));
}

- (void)dealloc {
  RELEASE_(val$actualWorker_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxScheduler_Worker:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$actualWorker_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxInternalSchedulersSchedulerWhen_ScheduledAction;", "LRxInternalSchedulersSchedulerWhen;", "createWorker", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxInternalSchedulersSchedulerWhen_1 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalSchedulersSchedulerWhen_1;
}

@end

void RxInternalSchedulersSchedulerWhen_1_initWithRxScheduler_Worker_(RxInternalSchedulersSchedulerWhen_1 *self, RxScheduler_Worker *capture$0) {
  JreStrongAssign(&self->val$actualWorker_, capture$0);
  NSObject_init(self);
}

RxInternalSchedulersSchedulerWhen_1 *new_RxInternalSchedulersSchedulerWhen_1_initWithRxScheduler_Worker_(RxScheduler_Worker *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersSchedulerWhen_1, initWithRxScheduler_Worker_, capture$0)
}

RxInternalSchedulersSchedulerWhen_1 *create_RxInternalSchedulersSchedulerWhen_1_initWithRxScheduler_Worker_(RxScheduler_Worker *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersSchedulerWhen_1, initWithRxScheduler_Worker_, capture$0)
}

@implementation RxInternalSchedulersSchedulerWhen_1_1

- (instancetype)initWithRxInternalSchedulersSchedulerWhen_1:(RxInternalSchedulersSchedulerWhen_1 *)outer$
      withRxInternalSchedulersSchedulerWhen_ScheduledAction:(RxInternalSchedulersSchedulerWhen_ScheduledAction *)capture$0 {
  RxInternalSchedulersSchedulerWhen_1_1_initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_(self, outer$, capture$0);
  return self;
}

- (void)callWithId:(id<RxCompletableSubscriber>)actionCompletable {
  [((id<RxCompletableSubscriber>) nil_chk(actionCompletable)) onSubscribeWithRxSubscription:val$action_];
  RxInternalSchedulersSchedulerWhen_ScheduledAction_callWithRxScheduler_Worker_(nil_chk(val$action_), this$0_->val$actualWorker_);
  [actionCompletable onCompleted];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$action_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalSchedulersSchedulerWhen_1:withRxInternalSchedulersSchedulerWhen_ScheduledAction:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalSchedulersSchedulerWhen_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$action_", "LRxInternalSchedulersSchedulerWhen_ScheduledAction;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxInternalSchedulersSchedulerWhen_1;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalSchedulersSchedulerWhen_1_1 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_RxInternalSchedulersSchedulerWhen_1_1;
}

@end

void RxInternalSchedulersSchedulerWhen_1_1_initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_(RxInternalSchedulersSchedulerWhen_1_1 *self, RxInternalSchedulersSchedulerWhen_1 *outer$, RxInternalSchedulersSchedulerWhen_ScheduledAction *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$action_, capture$0);
  NSObject_init(self);
}

RxInternalSchedulersSchedulerWhen_1_1 *new_RxInternalSchedulersSchedulerWhen_1_1_initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_(RxInternalSchedulersSchedulerWhen_1 *outer$, RxInternalSchedulersSchedulerWhen_ScheduledAction *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersSchedulerWhen_1_1, initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_, outer$, capture$0)
}

RxInternalSchedulersSchedulerWhen_1_1 *create_RxInternalSchedulersSchedulerWhen_1_1_initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_(RxInternalSchedulersSchedulerWhen_1 *outer$, RxInternalSchedulersSchedulerWhen_ScheduledAction *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersSchedulerWhen_1_1, initWithRxInternalSchedulersSchedulerWhen_1_withRxInternalSchedulersSchedulerWhen_ScheduledAction_, outer$, capture$0)
}

@implementation RxInternalSchedulersSchedulerWhen_2

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
                            withRxObserver:(id<RxObserver>)capture$1 {
  RxInternalSchedulersSchedulerWhen_2_initWithRxScheduler_Worker_withRxObserver_(self, capture$0, capture$1);
  return self;
}

- (void)unsubscribe {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(unsubscribed_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxScheduler_Worker *) nil_chk(val$actualWorker_)) unsubscribe];
    [((id<RxObserver>) nil_chk(val$actionObserver_)) onCompleted];
  }
}

- (jboolean)isUnsubscribed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(unsubscribed_)) get];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  RxInternalSchedulersSchedulerWhen_DelayedAction *delayedAction = create_RxInternalSchedulersSchedulerWhen_DelayedAction_initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_(action, delayTime, unit);
  [((id<RxObserver>) nil_chk(val$actionObserver_)) onNextWithId:delayedAction];
  return delayedAction;
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  RxInternalSchedulersSchedulerWhen_ImmediateAction *immediateAction = create_RxInternalSchedulersSchedulerWhen_ImmediateAction_initWithRxFunctionsAction0_(action);
  [((id<RxObserver>) nil_chk(val$actionObserver_)) onNextWithId:immediateAction];
  return immediateAction;
}

- (void)dealloc {
  RELEASE_(val$actualWorker_);
  RELEASE_(val$actionObserver_);
  RELEASE_(unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxScheduler_Worker:withRxObserver:);
  methods[1].selector = @selector(unsubscribe);
  methods[2].selector = @selector(isUnsubscribed);
  methods[3].selector = @selector(scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(scheduleWithRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$actualWorker_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$actionObserver_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "LRxFunctionsAction0;", "Lrx/Observer<Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;>;", "LRxInternalSchedulersSchedulerWhen;", "createWorker" };
  static const J2ObjcClassInfo _RxInternalSchedulersSchedulerWhen_2 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8018, 5, 3, 4, -1, 5, -1, -1 };
  return &_RxInternalSchedulersSchedulerWhen_2;
}

@end

void RxInternalSchedulersSchedulerWhen_2_initWithRxScheduler_Worker_withRxObserver_(RxInternalSchedulersSchedulerWhen_2 *self, RxScheduler_Worker *capture$0, id<RxObserver> capture$1) {
  JreStrongAssign(&self->val$actualWorker_, capture$0);
  JreStrongAssign(&self->val$actionObserver_, capture$1);
  RxScheduler_Worker_init(self);
  JreStrongAssignAndConsume(&self->unsubscribed_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

RxInternalSchedulersSchedulerWhen_2 *new_RxInternalSchedulersSchedulerWhen_2_initWithRxScheduler_Worker_withRxObserver_(RxScheduler_Worker *capture$0, id<RxObserver> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersSchedulerWhen_2, initWithRxScheduler_Worker_withRxObserver_, capture$0, capture$1)
}

RxInternalSchedulersSchedulerWhen_2 *create_RxInternalSchedulersSchedulerWhen_2_initWithRxScheduler_Worker_withRxObserver_(RxScheduler_Worker *capture$0, id<RxObserver> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersSchedulerWhen_2, initWithRxScheduler_Worker_withRxObserver_, capture$0, capture$1)
}

@implementation RxInternalSchedulersSchedulerWhen_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersSchedulerWhen_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)unsubscribe {
}

- (jboolean)isUnsubscribed {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(unsubscribe);
  methods[2].selector = @selector(isUnsubscribed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalSchedulersSchedulerWhen;" };
  static const J2ObjcClassInfo _RxInternalSchedulersSchedulerWhen_3 = { "", "rx.internal.schedulers", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 0, -1, -1, -1, -1 };
  return &_RxInternalSchedulersSchedulerWhen_3;
}

@end

void RxInternalSchedulersSchedulerWhen_3_init(RxInternalSchedulersSchedulerWhen_3 *self) {
  NSObject_init(self);
}

RxInternalSchedulersSchedulerWhen_3 *new_RxInternalSchedulersSchedulerWhen_3_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersSchedulerWhen_3, init)
}

RxInternalSchedulersSchedulerWhen_3 *create_RxInternalSchedulersSchedulerWhen_3_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersSchedulerWhen_3, init)
}

@implementation RxInternalSchedulersSchedulerWhen_ScheduledAction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersSchedulerWhen_ScheduledAction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)callWithRxScheduler_Worker:(RxScheduler_Worker *)actualWorker {
  RxInternalSchedulersSchedulerWhen_ScheduledAction_callWithRxScheduler_Worker_(self, actualWorker);
}

- (id<RxSubscription>)callActualWithRxScheduler_Worker:(RxScheduler_Worker *)actualWorker {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isUnsubscribed {
  return [((id<RxSubscription>) nil_chk([self get])) isUnsubscribed];
}

- (void)unsubscribe {
  id<RxSubscription> oldState;
  id<RxSubscription> newState = JreLoadStatic(RxInternalSchedulersSchedulerWhen, UNSUBSCRIBED);
  do {
    oldState = [self get];
    if (oldState == JreLoadStatic(RxInternalSchedulersSchedulerWhen, UNSUBSCRIBED)) {
      return;
    }
  }
  while (![self compareAndSetWithId:oldState withId:newState]);
  if (oldState != JreLoadStatic(RxInternalSchedulersSchedulerWhen, SUBSCRIBED)) {
    [((id<RxSubscription>) nil_chk(oldState)) unsubscribe];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x404, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(callWithRxScheduler_Worker:);
  methods[2].selector = @selector(callActualWithRxScheduler_Worker:);
  methods[3].selector = @selector(isUnsubscribed);
  methods[4].selector = @selector(unsubscribe);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxScheduler_Worker;", "callActual", "LRxInternalSchedulersSchedulerWhen;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxInternalSchedulersSchedulerWhen_ScheduledAction = { "ScheduledAction", "rx.internal.schedulers", ptrTable, methods, NULL, 7, 0x40a, 5, 0, 3, -1, -1, 4, -1 };
  return &_RxInternalSchedulersSchedulerWhen_ScheduledAction;
}

@end

void RxInternalSchedulersSchedulerWhen_ScheduledAction_init(RxInternalSchedulersSchedulerWhen_ScheduledAction *self) {
  JavaUtilConcurrentAtomicAtomicReference_initWithId_(self, JreLoadStatic(RxInternalSchedulersSchedulerWhen, SUBSCRIBED));
}

void RxInternalSchedulersSchedulerWhen_ScheduledAction_callWithRxScheduler_Worker_(RxInternalSchedulersSchedulerWhen_ScheduledAction *self, RxScheduler_Worker *actualWorker) {
  id<RxSubscription> oldState = [self get];
  if (oldState == JreLoadStatic(RxInternalSchedulersSchedulerWhen, UNSUBSCRIBED)) {
    return;
  }
  if (oldState != JreLoadStatic(RxInternalSchedulersSchedulerWhen, SUBSCRIBED)) {
    return;
  }
  id<RxSubscription> newState = [self callActualWithRxScheduler_Worker:actualWorker];
  if (![self compareAndSetWithId:JreLoadStatic(RxInternalSchedulersSchedulerWhen, SUBSCRIBED) withId:newState]) {
    [((id<RxSubscription>) nil_chk(newState)) unsubscribe];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersSchedulerWhen_ScheduledAction)

@implementation RxInternalSchedulersSchedulerWhen_ImmediateAction

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  RxInternalSchedulersSchedulerWhen_ImmediateAction_initWithRxFunctionsAction0_(self, action);
  return self;
}

- (id<RxSubscription>)callActualWithRxScheduler_Worker:(RxScheduler_Worker *)actualWorker {
  return [((RxScheduler_Worker *) nil_chk(actualWorker)) scheduleWithRxFunctionsAction0:action_];
}

- (void)dealloc {
  RELEASE_(action_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxFunctionsAction0:);
  methods[1].selector = @selector(callActualWithRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "action_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;", "callActual", "LRxScheduler_Worker;", "LRxInternalSchedulersSchedulerWhen;" };
  static const J2ObjcClassInfo _RxInternalSchedulersSchedulerWhen_ImmediateAction = { "ImmediateAction", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0xa, 2, 1, 3, -1, -1, -1, -1 };
  return &_RxInternalSchedulersSchedulerWhen_ImmediateAction;
}

@end

void RxInternalSchedulersSchedulerWhen_ImmediateAction_initWithRxFunctionsAction0_(RxInternalSchedulersSchedulerWhen_ImmediateAction *self, id<RxFunctionsAction0> action) {
  RxInternalSchedulersSchedulerWhen_ScheduledAction_init(self);
  JreStrongAssign(&self->action_, action);
}

RxInternalSchedulersSchedulerWhen_ImmediateAction *new_RxInternalSchedulersSchedulerWhen_ImmediateAction_initWithRxFunctionsAction0_(id<RxFunctionsAction0> action) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersSchedulerWhen_ImmediateAction, initWithRxFunctionsAction0_, action)
}

RxInternalSchedulersSchedulerWhen_ImmediateAction *create_RxInternalSchedulersSchedulerWhen_ImmediateAction_initWithRxFunctionsAction0_(id<RxFunctionsAction0> action) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersSchedulerWhen_ImmediateAction, initWithRxFunctionsAction0_, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersSchedulerWhen_ImmediateAction)

@implementation RxInternalSchedulersSchedulerWhen_DelayedAction

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                  withLong:(jlong)delayTime
            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  RxInternalSchedulersSchedulerWhen_DelayedAction_initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_(self, action, delayTime, unit);
  return self;
}

- (id<RxSubscription>)callActualWithRxScheduler_Worker:(RxScheduler_Worker *)actualWorker {
  return [((RxScheduler_Worker *) nil_chk(actualWorker)) scheduleWithRxFunctionsAction0:action_ withLong:delayTime_ withJavaUtilConcurrentTimeUnit:unit_];
}

- (void)dealloc {
  RELEASE_(action_);
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(callActualWithRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "action_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "delayTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "callActual", "LRxScheduler_Worker;", "LRxInternalSchedulersSchedulerWhen;" };
  static const J2ObjcClassInfo _RxInternalSchedulersSchedulerWhen_DelayedAction = { "DelayedAction", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0xa, 2, 3, 3, -1, -1, -1, -1 };
  return &_RxInternalSchedulersSchedulerWhen_DelayedAction;
}

@end

void RxInternalSchedulersSchedulerWhen_DelayedAction_initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_(RxInternalSchedulersSchedulerWhen_DelayedAction *self, id<RxFunctionsAction0> action, jlong delayTime, JavaUtilConcurrentTimeUnit *unit) {
  RxInternalSchedulersSchedulerWhen_ScheduledAction_init(self);
  JreStrongAssign(&self->action_, action);
  self->delayTime_ = delayTime;
  JreStrongAssign(&self->unit_, unit);
}

RxInternalSchedulersSchedulerWhen_DelayedAction *new_RxInternalSchedulersSchedulerWhen_DelayedAction_initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_(id<RxFunctionsAction0> action, jlong delayTime, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersSchedulerWhen_DelayedAction, initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_, action, delayTime, unit)
}

RxInternalSchedulersSchedulerWhen_DelayedAction *create_RxInternalSchedulersSchedulerWhen_DelayedAction_initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_(id<RxFunctionsAction0> action, jlong delayTime, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersSchedulerWhen_DelayedAction, initWithRxFunctionsAction0_withLong_withJavaUtilConcurrentTimeUnit_, action, delayTime, unit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersSchedulerWhen_DelayedAction)
