//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/query/src/main/java/co/touchlab/squeaky/stmt/query/IsNull.java
//

#include "CoTouchlabSqueakyDaoSqueakyContext.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyStmtJoinAlias.h"
#include "CoTouchlabSqueakyStmtQueryBaseComparison.h"
#include "CoTouchlabSqueakyStmtQueryIsNull.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/List.h"

@implementation CoTouchlabSqueakyStmtQueryIsNull

- (instancetype)initWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                     withCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias {
  CoTouchlabSqueakyStmtQueryIsNull_initWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, joinAlias);
  return self;
}

- (NSString *)getOperation {
  return @"IS NULL";
}

- (void)appendValueWithCoTouchlabSqueakyDaoSqueakyContext:(CoTouchlabSqueakyDaoSqueakyContext *)squeakyContext
                                         withJavaUtilList:(id<JavaUtilList>)params {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCoTouchlabSqueakyFieldFieldType:withCoTouchlabSqueakyStmtJoinAlias:);
  methods[1].selector = @selector(getOperation);
  methods[2].selector = @selector(appendValueWithCoTouchlabSqueakyDaoSqueakyContext:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldFieldType;LCoTouchlabSqueakyStmtJoinAlias;", "LJavaSqlSQLException;", "appendValue", "LCoTouchlabSqueakyDaoSqueakyContext;LJavaUtilList;", "(Lco/touchlab/squeaky/dao/SqueakyContext;Ljava/util/List<Ljava/lang/String;>;)V" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyStmtQueryIsNull = { "IsNull", "co.touchlab.squeaky.stmt.query", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyStmtQueryIsNull;
}

@end

void CoTouchlabSqueakyStmtQueryIsNull_initWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyStmtQueryIsNull *self, CoTouchlabSqueakyFieldFieldType *fieldType, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  CoTouchlabSqueakyStmtQueryBaseComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, nil, false, joinAlias);
}

CoTouchlabSqueakyStmtQueryIsNull *new_CoTouchlabSqueakyStmtQueryIsNull_initWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyStmtQueryIsNull, initWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, joinAlias)
}

CoTouchlabSqueakyStmtQueryIsNull *create_CoTouchlabSqueakyStmtQueryIsNull_initWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyStmtQueryIsNull, initWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, joinAlias)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyStmtQueryIsNull)
