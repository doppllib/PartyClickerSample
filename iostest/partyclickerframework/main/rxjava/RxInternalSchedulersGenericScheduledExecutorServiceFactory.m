//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc0.h"
#include "RxInternalSchedulersGenericScheduledExecutorServiceFactory.h"
#include "RxInternalUtilRxThreadFactory.h"
#include "RxPluginsRxJavaHooks.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ThreadFactory.h"

__attribute__((unused)) static void RxInternalSchedulersGenericScheduledExecutorServiceFactory_initWithNSString_withInt_(RxInternalSchedulersGenericScheduledExecutorServiceFactory *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(RxInternalSchedulersGenericScheduledExecutorServiceFactory)

NSString *RxInternalSchedulersGenericScheduledExecutorServiceFactory_THREAD_NAME_PREFIX = @"RxScheduledExecutorPool-";
RxInternalUtilRxThreadFactory *RxInternalSchedulersGenericScheduledExecutorServiceFactory_THREAD_FACTORY;

RxInternalSchedulersGenericScheduledExecutorServiceFactory *RxInternalSchedulersGenericScheduledExecutorServiceFactory_values_[0];

@implementation RxInternalSchedulersGenericScheduledExecutorServiceFactory

+ (id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return RxInternalSchedulersGenericScheduledExecutorServiceFactory_threadFactory();
}

+ (id<JavaUtilConcurrentScheduledExecutorService>)create {
  return RxInternalSchedulersGenericScheduledExecutorServiceFactory_create();
}

+ (id<JavaUtilConcurrentScheduledExecutorService>)createDefault {
  return RxInternalSchedulersGenericScheduledExecutorServiceFactory_createDefault();
}

+ (IOSObjectArray *)values {
  return RxInternalSchedulersGenericScheduledExecutorServiceFactory_values();
}

+ (RxInternalSchedulersGenericScheduledExecutorServiceFactory *)valueOfWithNSString:(NSString *)name {
  return RxInternalSchedulersGenericScheduledExecutorServiceFactory_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilConcurrentThreadFactory;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LRxInternalSchedulersGenericScheduledExecutorServiceFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxInternalSchedulersGenericScheduledExecutorServiceFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(threadFactory);
  methods[1].selector = @selector(create);
  methods[2].selector = @selector(createDefault);
  methods[3].selector = @selector(values);
  methods[4].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "THREAD_NAME_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 2, -1, -1 },
    { "THREAD_FACTORY", "LRxInternalUtilRxThreadFactory;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &RxInternalSchedulersGenericScheduledExecutorServiceFactory_THREAD_NAME_PREFIX, &RxInternalSchedulersGenericScheduledExecutorServiceFactory_THREAD_FACTORY, "Ljava/lang/Enum<Lrx/internal/schedulers/GenericScheduledExecutorServiceFactory;>;" };
  static const J2ObjcClassInfo _RxInternalSchedulersGenericScheduledExecutorServiceFactory = { "GenericScheduledExecutorServiceFactory", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x4010, 5, 2, -1, -1, -1, 4, -1 };
  return &_RxInternalSchedulersGenericScheduledExecutorServiceFactory;
}

+ (void)initialize {
  if (self == [RxInternalSchedulersGenericScheduledExecutorServiceFactory class]) {
    JreStrongAssignAndConsume(&RxInternalSchedulersGenericScheduledExecutorServiceFactory_THREAD_FACTORY, new_RxInternalUtilRxThreadFactory_initWithNSString_(RxInternalSchedulersGenericScheduledExecutorServiceFactory_THREAD_NAME_PREFIX));
    J2OBJC_SET_INITIALIZED(RxInternalSchedulersGenericScheduledExecutorServiceFactory)
  }
}

@end

void RxInternalSchedulersGenericScheduledExecutorServiceFactory_initWithNSString_withInt_(RxInternalSchedulersGenericScheduledExecutorServiceFactory *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

id<JavaUtilConcurrentThreadFactory> RxInternalSchedulersGenericScheduledExecutorServiceFactory_threadFactory() {
  RxInternalSchedulersGenericScheduledExecutorServiceFactory_initialize();
  return RxInternalSchedulersGenericScheduledExecutorServiceFactory_THREAD_FACTORY;
}

id<JavaUtilConcurrentScheduledExecutorService> RxInternalSchedulersGenericScheduledExecutorServiceFactory_create() {
  RxInternalSchedulersGenericScheduledExecutorServiceFactory_initialize();
  id<RxFunctionsFunc0> f = RxPluginsRxJavaHooks_getOnGenericScheduledExecutorService();
  if (f == nil) {
    return RxInternalSchedulersGenericScheduledExecutorServiceFactory_createDefault();
  }
  return [f call];
}

id<JavaUtilConcurrentScheduledExecutorService> RxInternalSchedulersGenericScheduledExecutorServiceFactory_createDefault() {
  RxInternalSchedulersGenericScheduledExecutorServiceFactory_initialize();
  return JavaUtilConcurrentExecutors_newScheduledThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(1, RxInternalSchedulersGenericScheduledExecutorServiceFactory_threadFactory());
}

IOSObjectArray *RxInternalSchedulersGenericScheduledExecutorServiceFactory_values() {
  RxInternalSchedulersGenericScheduledExecutorServiceFactory_initialize();
  return [IOSObjectArray arrayWithObjects:RxInternalSchedulersGenericScheduledExecutorServiceFactory_values_ count:0 type:RxInternalSchedulersGenericScheduledExecutorServiceFactory_class_()];
}

RxInternalSchedulersGenericScheduledExecutorServiceFactory *RxInternalSchedulersGenericScheduledExecutorServiceFactory_valueOfWithNSString_(NSString *name) {
  RxInternalSchedulersGenericScheduledExecutorServiceFactory_initialize();
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RxInternalSchedulersGenericScheduledExecutorServiceFactory *RxInternalSchedulersGenericScheduledExecutorServiceFactory_fromOrdinal(NSUInteger ordinal) {
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersGenericScheduledExecutorServiceFactory)
