//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSkyscreamerJsonassertComparatorJSONCompareUtil")
#ifdef RESTRICT_OrgSkyscreamerJsonassertComparatorJSONCompareUtil
#define INCLUDE_ALL_OrgSkyscreamerJsonassertComparatorJSONCompareUtil 0
#else
#define INCLUDE_ALL_OrgSkyscreamerJsonassertComparatorJSONCompareUtil 1
#endif
#undef RESTRICT_OrgSkyscreamerJsonassertComparatorJSONCompareUtil

#if !defined (OrgSkyscreamerJsonassertComparatorJSONCompareUtil_) && (INCLUDE_ALL_OrgSkyscreamerJsonassertComparatorJSONCompareUtil || defined(INCLUDE_OrgSkyscreamerJsonassertComparatorJSONCompareUtil))
#define OrgSkyscreamerJsonassertComparatorJSONCompareUtil_

@class OrgJsonJSONArray;
@class OrgJsonJSONObject;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface OrgSkyscreamerJsonassertComparatorJSONCompareUtil : NSObject

#pragma mark Public

+ (jboolean)allJSONArraysWithOrgJsonJSONArray:(OrgJsonJSONArray *)array;

+ (jboolean)allJSONObjectsWithOrgJsonJSONArray:(OrgJsonJSONArray *)array;

+ (jboolean)allSimpleValuesWithOrgJsonJSONArray:(OrgJsonJSONArray *)array;

+ (id<JavaUtilMap>)arrayOfJsonObjectToMapWithOrgJsonJSONArray:(OrgJsonJSONArray *)array
                                                 withNSString:(NSString *)uniqueKey;

+ (NSString *)findUniqueKeyWithOrgJsonJSONArray:(OrgJsonJSONArray *)expected;

+ (NSString *)formatUniqueKeyWithNSString:(NSString *)key
                             withNSString:(NSString *)uniqueKey
                                   withId:(id)value;

+ (id<JavaUtilMap>)getCardinalityMapWithJavaUtilCollection:(id<JavaUtilCollection>)coll;

+ (id<JavaUtilSet>)getKeysWithOrgJsonJSONObject:(OrgJsonJSONObject *)jsonObject;

+ (jboolean)isSimpleValueWithId:(id)o;

+ (jboolean)isUsableAsUniqueKeyWithNSString:(NSString *)candidate
                       withOrgJsonJSONArray:(OrgJsonJSONArray *)array;

+ (id<JavaUtilList>)jsonArrayToListWithOrgJsonJSONArray:(OrgJsonJSONArray *)expected;

+ (NSString *)qualifyWithNSString:(NSString *)prefix
                     withNSString:(NSString *)key;

@end

J2OBJC_STATIC_INIT(OrgSkyscreamerJsonassertComparatorJSONCompareUtil)

FOUNDATION_EXPORT id<JavaUtilMap> OrgSkyscreamerJsonassertComparatorJSONCompareUtil_arrayOfJsonObjectToMapWithOrgJsonJSONArray_withNSString_(OrgJsonJSONArray *array, NSString *uniqueKey);

FOUNDATION_EXPORT NSString *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_findUniqueKeyWithOrgJsonJSONArray_(OrgJsonJSONArray *expected);

FOUNDATION_EXPORT jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isUsableAsUniqueKeyWithNSString_withOrgJsonJSONArray_(NSString *candidate, OrgJsonJSONArray *array);

FOUNDATION_EXPORT id<JavaUtilList> OrgSkyscreamerJsonassertComparatorJSONCompareUtil_jsonArrayToListWithOrgJsonJSONArray_(OrgJsonJSONArray *expected);

FOUNDATION_EXPORT jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allSimpleValuesWithOrgJsonJSONArray_(OrgJsonJSONArray *array);

FOUNDATION_EXPORT jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isSimpleValueWithId_(id o);

FOUNDATION_EXPORT jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allJSONObjectsWithOrgJsonJSONArray_(OrgJsonJSONArray *array);

FOUNDATION_EXPORT jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allJSONArraysWithOrgJsonJSONArray_(OrgJsonJSONArray *array);

FOUNDATION_EXPORT id<JavaUtilSet> OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getKeysWithOrgJsonJSONObject_(OrgJsonJSONObject *jsonObject);

FOUNDATION_EXPORT NSString *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_qualifyWithNSString_withNSString_(NSString *prefix, NSString *key);

FOUNDATION_EXPORT NSString *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_formatUniqueKeyWithNSString_withNSString_withId_(NSString *key, NSString *uniqueKey, id value);

FOUNDATION_EXPORT id<JavaUtilMap> OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getCardinalityMapWithJavaUtilCollection_(id<JavaUtilCollection> coll);

J2OBJC_TYPE_LITERAL_HEADER(OrgSkyscreamerJsonassertComparatorJSONCompareUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSkyscreamerJsonassertComparatorJSONCompareUtil")
