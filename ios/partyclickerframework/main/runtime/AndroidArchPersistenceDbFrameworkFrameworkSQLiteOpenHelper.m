//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase.h"
#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper.h"
#include "AndroidArchPersistenceDbSupportSQLiteDatabase.h"
#include "AndroidArchPersistenceDbSupportSQLiteOpenHelper.h"
#include "AndroidContentContext.h"
#include "AndroidDatabaseDatabaseErrorHandler.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteOpenHelper.h"
#include "J2ObjC_source.h"

@interface AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper () {
 @public
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *mDelegate_;
}

- (AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *)createDelegateWithAndroidContentContext:(AndroidContentContext *)context
                                                                                                      withNSString:(NSString *)name
                                                             withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                                                                           withInt:(jint)version_
                                                                           withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler
                                                      withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)callback;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper, mDelegate_, AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *)

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_createDelegateWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback);

@interface AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1 : AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper {
 @public
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *val$callback_;
}

- (instancetype)initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)capture$0
                                                       withAndroidContentContext:(AndroidContentContext *)context
                                                                    withNSString:(NSString *)name
                           withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                                         withInt:(jint)version_
                                         withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler;

- (void)onCreateWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)sqLiteDatabase;

- (void)onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)sqLiteDatabase
                                                 withInt:(jint)oldVersion
                                                 withInt:(jint)newVersion;

- (void)onConfigureWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db;

- (void)onDowngradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withInt:(jint)oldVersion
                                                   withInt:(jint)newVersion;

- (void)onOpenWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1)

__attribute__((unused)) static void AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1_initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1 *self, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *capture$0, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1 *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1_initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *capture$0, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1 *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1_initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *capture$0, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSString:(NSString *)name
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                      withInt:(jint)version_
      withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler
withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)callback {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(self, context, name, factory, version_, errorHandler, callback);
  return self;
}

- (AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *)createDelegateWithAndroidContentContext:(AndroidContentContext *)context
                                                                                                      withNSString:(NSString *)name
                                                             withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                                                                           withInt:(jint)version_
                                                                           withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler
                                                      withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)callback {
  return AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_createDelegateWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(self, context, name, factory, version_, errorHandler, callback);
}

- (NSString *)getDatabaseName {
  return [((AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *) nil_chk(mDelegate_)) getDatabaseName];
}

- (void)setWriteAheadLoggingEnabledWithBoolean:(jboolean)enabled {
  [((AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *) nil_chk(mDelegate_)) setWriteAheadLoggingEnabledWithBoolean:enabled];
}

- (id<AndroidArchPersistenceDbSupportSQLiteDatabase>)getWritableDatabase {
  return [((AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *) nil_chk(mDelegate_)) getWritableSupportDatabase];
}

- (id<AndroidArchPersistenceDbSupportSQLiteDatabase>)getReadableDatabase {
  return [((AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *) nil_chk(mDelegate_)) getReadableSupportDatabase];
}

- (void)close {
  [((AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *) nil_chk(mDelegate_)) close];
}

- (void)dealloc {
  RELEASE_(mDelegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper;", 0x2, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteDatabase;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteDatabase;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:withNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:);
  methods[1].selector = @selector(createDelegateWithAndroidContentContext:withNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:);
  methods[2].selector = @selector(getDatabaseName);
  methods[3].selector = @selector(setWriteAheadLoggingEnabledWithBoolean:);
  methods[4].selector = @selector(getWritableDatabase);
  methods[5].selector = @selector(getReadableDatabase);
  methods[6].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDelegate_", "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ILAndroidDatabaseDatabaseErrorHandler;LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", "createDelegate", "setWriteAheadLoggingEnabled", "Z", "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper = { "FrameworkSQLiteOpenHelper", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x0, 7, 1, -1, 4, -1, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper;
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  NSObject_init(self);
  JreStrongAssign(&self->mDelegate_, AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_createDelegateWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(self, context, name, factory, version_, errorHandler, callback));
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper, initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_, context, name, factory, version_, errorHandler, callback)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper, initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_, context, name, factory, version_, errorHandler, callback)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_createDelegateWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  return create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1_initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(callback, context, name, factory, version_, errorHandler);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper)

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSString:(NSString *)name
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                      withInt:(jint)version_
      withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(self, context, name, factory, version_, errorHandler);
  return self;
}

- (id<AndroidArchPersistenceDbSupportSQLiteDatabase>)getWritableSupportDatabase {
  AndroidDatabaseSqliteSQLiteDatabase *db = [super getWritableDatabase];
  return [self getWrappedDbWithAndroidDatabaseSqliteSQLiteDatabase:db];
}

- (id<AndroidArchPersistenceDbSupportSQLiteDatabase>)getReadableSupportDatabase {
  AndroidDatabaseSqliteSQLiteDatabase *db = [super getReadableDatabase];
  return [self getWrappedDbWithAndroidDatabaseSqliteSQLiteDatabase:db];
}

- (AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase *)getWrappedDbWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)sqLiteDatabase {
  if (mWrappedDb_ == nil) {
    JreStrongAssignAndConsume(&mWrappedDb_, new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(sqLiteDatabase));
  }
  return mWrappedDb_;
}

- (void)close {
  @synchronized(self) {
    [super close];
    JreStrongAssign(&mWrappedDb_, nil);
  }
}

- (void)dealloc {
  RELEASE_(mWrappedDb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteDatabase;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteDatabase;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:withNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:);
  methods[1].selector = @selector(getWritableSupportDatabase);
  methods[2].selector = @selector(getReadableSupportDatabase);
  methods[3].selector = @selector(getWrappedDbWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mWrappedDb_", "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ILAndroidDatabaseDatabaseErrorHandler;", "getWrappedDb", "LAndroidDatabaseSqliteSQLiteDatabase;", "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper = { "OpenHelper", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x408, 5, 1, 3, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper;
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(self, context, name, factory, version_, errorHandler);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper)

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1

- (instancetype)initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)capture$0
                                                       withAndroidContentContext:(AndroidContentContext *)context
                                                                    withNSString:(NSString *)name
                           withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                                         withInt:(jint)version_
                                         withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1_initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(self, capture$0, context, name, factory, version_, errorHandler);
  return self;
}

- (void)onCreateWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)sqLiteDatabase {
  JreStrongAssignAndConsume(&mWrappedDb_, new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(sqLiteDatabase));
  [((AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *) nil_chk(val$callback_)) onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:mWrappedDb_];
}

- (void)onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)sqLiteDatabase
                                                 withInt:(jint)oldVersion
                                                 withInt:(jint)newVersion {
  [((AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *) nil_chk(val$callback_)) onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:[self getWrappedDbWithAndroidDatabaseSqliteSQLiteDatabase:sqLiteDatabase] withInt:oldVersion withInt:newVersion];
}

- (void)onConfigureWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
  [((AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *) nil_chk(val$callback_)) onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:[self getWrappedDbWithAndroidDatabaseSqliteSQLiteDatabase:db]];
}

- (void)onDowngradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withInt:(jint)oldVersion
                                                   withInt:(jint)newVersion {
  [((AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *) nil_chk(val$callback_)) onDowngradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:[self getWrappedDbWithAndroidDatabaseSqliteSQLiteDatabase:db] withInt:oldVersion withInt:newVersion];
}

- (void)onOpenWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
  [((AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *) nil_chk(val$callback_)) onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:[self getWrappedDbWithAndroidDatabaseSqliteSQLiteDatabase:db]];
}

- (void)dealloc {
  RELEASE_(val$callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:withAndroidContentContext:withNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:);
  methods[1].selector = @selector(onCreateWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[2].selector = @selector(onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:withInt:withInt:);
  methods[3].selector = @selector(onConfigureWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[4].selector = @selector(onDowngradeWithAndroidDatabaseSqliteSQLiteDatabase:withInt:withInt:);
  methods[5].selector = @selector(onOpenWithAndroidDatabaseSqliteSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ILAndroidDatabaseDatabaseErrorHandler;", "onCreate", "LAndroidDatabaseSqliteSQLiteDatabase;", "onUpgrade", "LAndroidDatabaseSqliteSQLiteDatabase;II", "onConfigure", "onDowngrade", "onOpen", "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper;", "createDelegateWithAndroidContentContext:withNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1 = { "", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x8018, 6, 1, 8, -1, 9, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1;
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1_initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1 *self, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *capture$0, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  JreStrongAssign(&self->val$callback_, capture$0);
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_OpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(self, context, name, factory, version_, errorHandler);
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1 *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1_initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *capture$0, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1, initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_, capture$0, context, name, factory, version_, errorHandler)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1 *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1_initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *capture$0, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelper_1, initWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_withAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_, capture$0, context, name, factory, version_, errorHandler)
}
