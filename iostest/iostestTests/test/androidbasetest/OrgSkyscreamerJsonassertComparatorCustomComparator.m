//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertComparatorCustomComparator.h"
#include "OrgSkyscreamerJsonassertComparatorDefaultComparator.h"
#include "OrgSkyscreamerJsonassertCustomization.h"
#include "OrgSkyscreamerJsonassertJSONCompareMode.h"
#include "OrgSkyscreamerJsonassertJSONCompareResult.h"
#include "OrgSkyscreamerJsonassertValueMatcherException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface OrgSkyscreamerJsonassertComparatorCustomComparator () {
 @public
  id<JavaUtilCollection> customizations_;
}

- (OrgSkyscreamerJsonassertCustomization *)getCustomizationWithNSString:(NSString *)path;

@end

J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertComparatorCustomComparator, customizations_, id<JavaUtilCollection>)

__attribute__((unused)) static OrgSkyscreamerJsonassertCustomization *OrgSkyscreamerJsonassertComparatorCustomComparator_getCustomizationWithNSString_(OrgSkyscreamerJsonassertComparatorCustomComparator *self, NSString *path);

@implementation OrgSkyscreamerJsonassertComparatorCustomComparator

- (instancetype)initWithOrgSkyscreamerJsonassertJSONCompareMode:(OrgSkyscreamerJsonassertJSONCompareMode *)mode
                 withOrgSkyscreamerJsonassertCustomizationArray:(IOSObjectArray *)customizations {
  OrgSkyscreamerJsonassertComparatorCustomComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_withOrgSkyscreamerJsonassertCustomizationArray_(self, mode, customizations);
  return self;
}

- (void)compareValuesWithNSString:(NSString *)prefix
                           withId:(id)expectedValue
                           withId:(id)actualValue
withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  OrgSkyscreamerJsonassertCustomization *customization = OrgSkyscreamerJsonassertComparatorCustomComparator_getCustomizationWithNSString_(self, prefix);
  if (customization != nil) {
    @try {
      if (![customization matchesWithNSString:prefix withId:actualValue withId:expectedValue withOrgSkyscreamerJsonassertJSONCompareResult:result]) {
        [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) failWithNSString:prefix withId:expectedValue withId:actualValue];
      }
    }
    @catch (OrgSkyscreamerJsonassertValueMatcherException *e) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) failWithNSString:prefix withOrgSkyscreamerJsonassertValueMatcherException:e];
    }
  }
  else {
    [super compareValuesWithNSString:prefix withId:expectedValue withId:actualValue withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
}

- (OrgSkyscreamerJsonassertCustomization *)getCustomizationWithNSString:(NSString *)path {
  return OrgSkyscreamerJsonassertComparatorCustomComparator_getCustomizationWithNSString_(self, path);
}

- (void)dealloc {
  RELEASE_(customizations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSkyscreamerJsonassertCustomization;", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgSkyscreamerJsonassertJSONCompareMode:withOrgSkyscreamerJsonassertCustomizationArray:);
  methods[1].selector = @selector(compareValuesWithNSString:withId:withId:withOrgSkyscreamerJsonassertJSONCompareResult:);
  methods[2].selector = @selector(getCustomizationWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "customizations_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LOrgSkyscreamerJsonassertJSONCompareMode;[LOrgSkyscreamerJsonassertCustomization;", "compareValues", "LNSString;LNSObject;LNSObject;LOrgSkyscreamerJsonassertJSONCompareResult;", "LOrgJsonJSONException;", "getCustomization", "LNSString;", "Ljava/util/Collection<Lorg/skyscreamer/jsonassert/Customization;>;" };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertComparatorCustomComparator = { "CustomComparator", "org.skyscreamer.jsonassert.comparator", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgSkyscreamerJsonassertComparatorCustomComparator;
}

@end

void OrgSkyscreamerJsonassertComparatorCustomComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_withOrgSkyscreamerJsonassertCustomizationArray_(OrgSkyscreamerJsonassertComparatorCustomComparator *self, OrgSkyscreamerJsonassertJSONCompareMode *mode, IOSObjectArray *customizations) {
  OrgSkyscreamerJsonassertComparatorDefaultComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_(self, mode);
  JreStrongAssign(&self->customizations_, JavaUtilArrays_asListWithNSObjectArray_(customizations));
}

OrgSkyscreamerJsonassertComparatorCustomComparator *new_OrgSkyscreamerJsonassertComparatorCustomComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_withOrgSkyscreamerJsonassertCustomizationArray_(OrgSkyscreamerJsonassertJSONCompareMode *mode, IOSObjectArray *customizations) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertComparatorCustomComparator, initWithOrgSkyscreamerJsonassertJSONCompareMode_withOrgSkyscreamerJsonassertCustomizationArray_, mode, customizations)
}

OrgSkyscreamerJsonassertComparatorCustomComparator *create_OrgSkyscreamerJsonassertComparatorCustomComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_withOrgSkyscreamerJsonassertCustomizationArray_(OrgSkyscreamerJsonassertJSONCompareMode *mode, IOSObjectArray *customizations) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertComparatorCustomComparator, initWithOrgSkyscreamerJsonassertJSONCompareMode_withOrgSkyscreamerJsonassertCustomizationArray_, mode, customizations)
}

OrgSkyscreamerJsonassertCustomization *OrgSkyscreamerJsonassertComparatorCustomComparator_getCustomizationWithNSString_(OrgSkyscreamerJsonassertComparatorCustomComparator *self, NSString *path) {
  for (OrgSkyscreamerJsonassertCustomization * __strong c in nil_chk(self->customizations_)) if ([((OrgSkyscreamerJsonassertCustomization *) nil_chk(c)) appliesToPathWithNSString:path]) return c;
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertComparatorCustomComparator)
