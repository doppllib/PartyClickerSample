//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbase/src/main/java/rename/org/kxml2/kdom/Node.java
//

#include "J2ObjC_source.h"
#include "RenameOrgKxml2KdomElement.h"
#include "RenameOrgKxml2KdomNode.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Vector.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlSerializer.h"

@implementation RenameOrgKxml2KdomNode

- (void)addChildWithInt:(jint)index
                withInt:(jint)type
                 withId:(id)child {
  if (child == nil) @throw create_JavaLangNullPointerException_init();
  if (children_ == nil) {
    JreStrongAssignAndConsume(&children_, new_JavaUtilVector_init());
    JreStrongAssignAndConsume(&types_, new_JavaLangStringBuffer_init());
  }
  if (type == RenameOrgKxml2KdomNode_ELEMENT) {
    if (!([child isKindOfClass:[RenameOrgKxml2KdomElement class]])) @throw create_JavaLangRuntimeException_initWithNSString_(@"Element obj expected)");
    [((RenameOrgKxml2KdomElement *) cast_chk(child, [RenameOrgKxml2KdomElement class])) setParentWithRenameOrgKxml2KdomNode:self];
  }
  else if (!([child isKindOfClass:[NSString class]])) @throw create_JavaLangRuntimeException_initWithNSString_(@"String expected");
  [((JavaUtilVector *) nil_chk(children_)) insertElementAtWithId:child withInt:index];
  [((JavaLangStringBuffer *) nil_chk(types_)) insertWithInt:index withChar:(jchar) type];
}

- (void)addChildWithInt:(jint)type
                 withId:(id)child {
  [self addChildWithInt:[self getChildCount] withInt:type withId:child];
}

- (RenameOrgKxml2KdomElement *)createElementWithNSString:(NSString *)namespace_
                                            withNSString:(NSString *)name {
  RenameOrgKxml2KdomElement *e = create_RenameOrgKxml2KdomElement_init();
  JreStrongAssign(&e->namespace__, namespace_ == nil ? @"" : namespace_);
  JreStrongAssign(&e->name_, name);
  return e;
}

- (id)getChildWithInt:(jint)index {
  return [((JavaUtilVector *) nil_chk(children_)) elementAtWithInt:index];
}

- (jint)getChildCount {
  return children_ == nil ? 0 : [children_ size];
}

- (RenameOrgKxml2KdomElement *)getElementWithInt:(jint)index {
  id child = [self getChildWithInt:index];
  return ([child isKindOfClass:[RenameOrgKxml2KdomElement class]]) ? (RenameOrgKxml2KdomElement *) cast_chk(child, [RenameOrgKxml2KdomElement class]) : nil;
}

- (RenameOrgKxml2KdomElement *)getElementWithNSString:(NSString *)namespace_
                                         withNSString:(NSString *)name {
  jint i = [self indexOfWithNSString:namespace_ withNSString:name withInt:0];
  jint j = [self indexOfWithNSString:namespace_ withNSString:name withInt:i + 1];
  if (i == -1 || j != -1) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$C$$@", @"Element {", namespace_, '}', name, (i == -1 ? @" not found in " : @" more than once in "), self));
  return [self getElementWithInt:i];
}

- (NSString *)getTextWithInt:(jint)index {
  return ([self isTextWithInt:index]) ? (NSString *) cast_chk([self getChildWithInt:index], [NSString class]) : nil;
}

- (jint)getTypeWithInt:(jint)index {
  return [((JavaLangStringBuffer *) nil_chk(types_)) charAtWithInt:index];
}

- (jint)indexOfWithNSString:(NSString *)namespace_
               withNSString:(NSString *)name
                    withInt:(jint)startIndex {
  jint len = [self getChildCount];
  for (jint i = startIndex; i < len; i++) {
    RenameOrgKxml2KdomElement *child = [self getElementWithInt:i];
    if (child != nil && [((NSString *) nil_chk(name)) isEqual:[child getName]] && (namespace_ == nil || [namespace_ isEqual:[child getNamespace]])) return i;
  }
  return -1;
}

- (jboolean)isTextWithInt:(jint)i {
  jint t = [self getTypeWithInt:i];
  return t == RenameOrgKxml2KdomNode_TEXT || t == RenameOrgKxml2KdomNode_IGNORABLE_WHITESPACE || t == RenameOrgKxml2KdomNode_CDSECT;
}

- (void)parseWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser {
  jboolean leave = false;
  do {
    jint type = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getEventType];
    switch (type) {
      case OrgXmlpullV1XmlPullParser_START_TAG:
      {
        RenameOrgKxml2KdomElement *child = [self createElementWithNSString:[parser getNamespace] withNSString:[parser getName]];
        [self addChildWithInt:RenameOrgKxml2KdomNode_ELEMENT withId:child];
        [((RenameOrgKxml2KdomElement *) nil_chk(child)) parseWithOrgXmlpullV1XmlPullParser:parser];
        break;
      }
      case OrgXmlpullV1XmlPullParser_END_DOCUMENT:
      case OrgXmlpullV1XmlPullParser_END_TAG:
      leave = true;
      break;
      default:
      if ([parser getText] != nil) [self addChildWithInt:type == OrgXmlpullV1XmlPullParser_ENTITY_REF ? RenameOrgKxml2KdomNode_TEXT : type withId:[parser getText]];
      else if (type == OrgXmlpullV1XmlPullParser_ENTITY_REF && [parser getName] != nil) {
        [self addChildWithInt:RenameOrgKxml2KdomNode_ENTITY_REF withId:[parser getName]];
      }
      [parser nextToken];
    }
  }
  while (!leave);
}

- (void)removeChildWithInt:(jint)idx {
  [((JavaUtilVector *) nil_chk(children_)) removeElementAtWithInt:idx];
  jint n = [((JavaLangStringBuffer *) nil_chk(types_)) length] - 1;
  for (jint i = idx; i < n; i++) [((JavaLangStringBuffer *) nil_chk(types_)) setCharAtWithInt:i withChar:[types_ charAtWithInt:i + 1]];
  [((JavaLangStringBuffer *) nil_chk(types_)) setLengthWithInt:n];
}

- (void)writeWithOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)writer {
  [self writeChildrenWithOrgXmlpullV1XmlSerializer:writer];
  [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) flush];
}

- (void)writeChildrenWithOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)writer {
  if (children_ == nil) return;
  jint len = [children_ size];
  for (jint i = 0; i < len; i++) {
    jint type = [self getTypeWithInt:i];
    id child = [((JavaUtilVector *) nil_chk(children_)) elementAtWithInt:i];
    switch (type) {
      case RenameOrgKxml2KdomNode_ELEMENT:
      [((RenameOrgKxml2KdomElement *) nil_chk(((RenameOrgKxml2KdomElement *) cast_chk(child, [RenameOrgKxml2KdomElement class])))) writeWithOrgXmlpullV1XmlSerializer:writer];
      break;
      case RenameOrgKxml2KdomNode_TEXT:
      [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) textWithNSString:(NSString *) cast_chk(child, [NSString class])];
      break;
      case RenameOrgKxml2KdomNode_IGNORABLE_WHITESPACE:
      [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) ignorableWhitespaceWithNSString:(NSString *) cast_chk(child, [NSString class])];
      break;
      case RenameOrgKxml2KdomNode_CDSECT:
      [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) cdsectWithNSString:(NSString *) cast_chk(child, [NSString class])];
      break;
      case RenameOrgKxml2KdomNode_COMMENT:
      [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) commentWithNSString:(NSString *) cast_chk(child, [NSString class])];
      break;
      case RenameOrgKxml2KdomNode_ENTITY_REF:
      [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) entityRefWithNSString:(NSString *) cast_chk(child, [NSString class])];
      break;
      case RenameOrgKxml2KdomNode_PROCESSING_INSTRUCTION:
      [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) processingInstructionWithNSString:(NSString *) cast_chk(child, [NSString class])];
      break;
      case RenameOrgKxml2KdomNode_DOCDECL:
      [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) docdeclWithNSString:(NSString *) cast_chk(child, [NSString class])];
      break;
      default:
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Illegal type: ", type));
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RenameOrgKxml2KdomNode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(children_);
  RELEASE_(types_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LRenameOrgKxml2KdomElement;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRenameOrgKxml2KdomElement;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LRenameOrgKxml2KdomElement;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 18, 19, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(addChildWithInt:withInt:withId:);
  methods[1].selector = @selector(addChildWithInt:withId:);
  methods[2].selector = @selector(createElementWithNSString:withNSString:);
  methods[3].selector = @selector(getChildWithInt:);
  methods[4].selector = @selector(getChildCount);
  methods[5].selector = @selector(getElementWithInt:);
  methods[6].selector = @selector(getElementWithNSString:withNSString:);
  methods[7].selector = @selector(getTextWithInt:);
  methods[8].selector = @selector(getTypeWithInt:);
  methods[9].selector = @selector(indexOfWithNSString:withNSString:withInt:);
  methods[10].selector = @selector(isTextWithInt:);
  methods[11].selector = @selector(parseWithOrgXmlpullV1XmlPullParser:);
  methods[12].selector = @selector(removeChildWithInt:);
  methods[13].selector = @selector(writeWithOrgXmlpullV1XmlSerializer:);
  methods[14].selector = @selector(writeChildrenWithOrgXmlpullV1XmlSerializer:);
  methods[15].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DOCUMENT", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_DOCUMENT, 0x19, -1, -1, -1, -1 },
    { "ELEMENT", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_ELEMENT, 0x19, -1, -1, -1, -1 },
    { "TEXT", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_TEXT, 0x19, -1, -1, -1, -1 },
    { "CDSECT", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_CDSECT, 0x19, -1, -1, -1, -1 },
    { "ENTITY_REF", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_ENTITY_REF, 0x19, -1, -1, -1, -1 },
    { "IGNORABLE_WHITESPACE", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_IGNORABLE_WHITESPACE, 0x19, -1, -1, -1, -1 },
    { "PROCESSING_INSTRUCTION", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_PROCESSING_INSTRUCTION, 0x19, -1, -1, -1, -1 },
    { "COMMENT", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_COMMENT, 0x19, -1, -1, -1, -1 },
    { "DOCDECL", "I", .constantValue.asInt = RenameOrgKxml2KdomNode_DOCDECL, 0x19, -1, -1, -1, -1 },
    { "children_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "types_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addChild", "IILNSObject;", "ILNSObject;", "createElement", "LNSString;LNSString;", "getChild", "I", "getElement", "getText", "getType", "indexOf", "LNSString;LNSString;I", "isText", "parse", "LOrgXmlpullV1XmlPullParser;", "LJavaIoIOException;LOrgXmlpullV1XmlPullParserException;", "removeChild", "write", "LOrgXmlpullV1XmlSerializer;", "LJavaIoIOException;", "writeChildren" };
  static const J2ObjcClassInfo _RenameOrgKxml2KdomNode = { "Node", "rename.org.kxml2.kdom", ptrTable, methods, fields, 7, 0x1, 16, 11, -1, -1, -1, -1, -1 };
  return &_RenameOrgKxml2KdomNode;
}

@end

void RenameOrgKxml2KdomNode_init(RenameOrgKxml2KdomNode *self) {
  NSObject_init(self);
}

RenameOrgKxml2KdomNode *new_RenameOrgKxml2KdomNode_init() {
  J2OBJC_NEW_IMPL(RenameOrgKxml2KdomNode, init)
}

RenameOrgKxml2KdomNode *create_RenameOrgKxml2KdomNode_init() {
  J2OBJC_CREATE_IMPL(RenameOrgKxml2KdomNode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RenameOrgKxml2KdomNode)
