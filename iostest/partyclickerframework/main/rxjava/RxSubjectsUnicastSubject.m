//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxExceptionsOnErrorThrowable.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsBackpressureUtils.h"
#include "RxInternalOperatorsNotificationLite.h"
#include "RxInternalUtilAtomicSpscLinkedAtomicQueue.h"
#include "RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue.h"
#include "RxInternalUtilUnsafeSpscLinkedQueue.h"
#include "RxInternalUtilUnsafeSpscUnboundedArrayQueue.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "RxSubjectsSubject.h"
#include "RxSubjectsUnicastSubject.h"
#include "RxSubscriber.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface RxSubjectsUnicastSubject ()

- (instancetype)initWithRxSubjectsUnicastSubject_State:(RxSubjectsUnicastSubject_State *)state;

@end

__attribute__((unused)) static void RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(RxSubjectsUnicastSubject *self, RxSubjectsUnicastSubject_State *state);

__attribute__((unused)) static RxSubjectsUnicastSubject *new_RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(RxSubjectsUnicastSubject_State *state) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsUnicastSubject *create_RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(RxSubjectsUnicastSubject_State *state);

inline jlong RxSubjectsUnicastSubject_State_get_serialVersionUID();
#define RxSubjectsUnicastSubject_State_serialVersionUID -9044104859202255786LL
J2OBJC_STATIC_FIELD_CONSTANT(RxSubjectsUnicastSubject_State, serialVersionUID, jlong)

@implementation RxSubjectsUnicastSubject

+ (RxSubjectsUnicastSubject *)create {
  return RxSubjectsUnicastSubject_create();
}

+ (RxSubjectsUnicastSubject *)createWithInt:(jint)capacityHint {
  return RxSubjectsUnicastSubject_createWithInt_(capacityHint);
}

+ (RxSubjectsUnicastSubject *)createWithInt:(jint)capacityHint
                     withRxFunctionsAction0:(id<RxFunctionsAction0>)onTerminated {
  return RxSubjectsUnicastSubject_createWithInt_withRxFunctionsAction0_(capacityHint, onTerminated);
}

- (instancetype)initWithRxSubjectsUnicastSubject_State:(RxSubjectsUnicastSubject_State *)state {
  RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(self, state);
  return self;
}

- (void)onNextWithId:(id)t {
  [((RxSubjectsUnicastSubject_State *) nil_chk(state_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubjectsUnicastSubject_State *) nil_chk(state_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((RxSubjectsUnicastSubject_State *) nil_chk(state_)) onCompleted];
}

- (jboolean)hasObservers {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(((RxSubjectsUnicastSubject_State *) nil_chk(state_))->subscriber_)) get] != nil;
}

- (void)dealloc {
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubjectsUnicastSubject;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LRxSubjectsUnicastSubject;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, "LRxSubjectsUnicastSubject;", 0x9, 1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x2, -1, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createWithInt:);
  methods[2].selector = @selector(createWithInt:withRxFunctionsAction0:);
  methods[3].selector = @selector(initWithRxSubjectsUnicastSubject_State:);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithNSException:);
  methods[6].selector = @selector(onCompleted);
  methods[7].selector = @selector(hasObservers);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LRxSubjectsUnicastSubject_State;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lrx/subjects/UnicastSubject<TT;>;", "create", "I", "<T:Ljava/lang/Object;>(I)Lrx/subjects/UnicastSubject<TT;>;", "ILRxFunctionsAction0;", "<T:Ljava/lang/Object;>(ILrx/functions/Action0;)Lrx/subjects/UnicastSubject<TT;>;", "LRxSubjectsUnicastSubject_State;", "(Lrx/subjects/UnicastSubject$State<TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/subjects/UnicastSubject$State<TT;>;", "<T:Ljava/lang/Object;>Lrx/subjects/Subject<TT;TT;>;" };
  static const J2ObjcClassInfo _RxSubjectsUnicastSubject = { "UnicastSubject", "rx.subjects", ptrTable, methods, fields, 7, 0x11, 8, 1, -1, 6, -1, 14, -1 };
  return &_RxSubjectsUnicastSubject;
}

@end

RxSubjectsUnicastSubject *RxSubjectsUnicastSubject_create() {
  RxSubjectsUnicastSubject_initialize();
  return RxSubjectsUnicastSubject_createWithInt_(16);
}

RxSubjectsUnicastSubject *RxSubjectsUnicastSubject_createWithInt_(jint capacityHint) {
  RxSubjectsUnicastSubject_initialize();
  RxSubjectsUnicastSubject_State *state = create_RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(capacityHint, nil);
  return create_RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(state);
}

RxSubjectsUnicastSubject *RxSubjectsUnicastSubject_createWithInt_withRxFunctionsAction0_(jint capacityHint, id<RxFunctionsAction0> onTerminated) {
  RxSubjectsUnicastSubject_initialize();
  RxSubjectsUnicastSubject_State *state = create_RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(capacityHint, onTerminated);
  return create_RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(state);
}

void RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(RxSubjectsUnicastSubject *self, RxSubjectsUnicastSubject_State *state) {
  RxSubjectsSubject_initWithRxObservable_OnSubscribe_(self, state);
  JreStrongAssign(&self->state_, state);
}

RxSubjectsUnicastSubject *new_RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(RxSubjectsUnicastSubject_State *state) {
  J2OBJC_NEW_IMPL(RxSubjectsUnicastSubject, initWithRxSubjectsUnicastSubject_State_, state)
}

RxSubjectsUnicastSubject *create_RxSubjectsUnicastSubject_initWithRxSubjectsUnicastSubject_State_(RxSubjectsUnicastSubject_State *state) {
  J2OBJC_CREATE_IMPL(RxSubjectsUnicastSubject, initWithRxSubjectsUnicastSubject_State_, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsUnicastSubject)

@implementation RxSubjectsUnicastSubject_State

- (instancetype)initWithInt:(jint)capacityHint
     withRxFunctionsAction0:(id<RxFunctionsAction0>)onTerminated {
  RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(self, capacityHint, onTerminated);
  return self;
}

- (void)onNextWithId:(id)t {
  if (!JreLoadVolatileBoolean(&done_)) {
    if (!JreLoadVolatileBoolean(&caughtUp_)) {
      jboolean stillReplay = false;
      @synchronized(self) {
        if (!JreLoadVolatileBoolean(&caughtUp_)) {
          [((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:RxInternalOperatorsNotificationLite_nextWithId_(t)];
          stillReplay = true;
        }
      }
      if (stillReplay) {
        [self replay];
        return;
      }
    }
    RxSubscriber *s = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscriber_)) get];
    @try {
      [((RxSubscriber *) nil_chk(s)) onNextWithId:t];
    }
    @catch (NSException *ex) {
      RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_withId_(ex, s, t);
    }
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  if (!JreLoadVolatileBoolean(&done_)) {
    [self doTerminate];
    JreStrongAssign(&error_, e);
    JreAssignVolatileBoolean(&done_, true);
    if (!JreLoadVolatileBoolean(&caughtUp_)) {
      jboolean stillReplay;
      @synchronized(self) {
        stillReplay = !JreLoadVolatileBoolean(&caughtUp_);
      }
      if (stillReplay) {
        [self replay];
        return;
      }
    }
    [((RxSubscriber *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscriber_)) get])) onErrorWithNSException:e];
  }
}

- (void)onCompleted {
  if (!JreLoadVolatileBoolean(&done_)) {
    [self doTerminate];
    JreAssignVolatileBoolean(&done_, true);
    if (!JreLoadVolatileBoolean(&caughtUp_)) {
      jboolean stillReplay;
      @synchronized(self) {
        stillReplay = !JreLoadVolatileBoolean(&caughtUp_);
      }
      if (stillReplay) {
        [self replay];
        return;
      }
    }
    [((RxSubscriber *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscriber_)) get])) onCompleted];
  }
}

- (void)requestWithLong:(jlong)n {
  if (n < 0LL) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"n >= 0 required");
  }
  else if (n > 0LL) {
    RxInternalOperatorsBackpressureUtils_getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
    [self replay];
  }
  else if (JreLoadVolatileBoolean(&done_)) {
    [self replay];
  }
}

- (void)callWithId:(RxSubscriber *)subscriber {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->subscriber_)) compareAndSetWithId:nil withId:subscriber]) {
    [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:self];
    [subscriber setProducerWithRxProducer:self];
  }
  else {
    [((RxSubscriber *) nil_chk(subscriber)) onErrorWithNSException:create_JavaLangIllegalStateException_initWithNSString_(@"Only a single subscriber is allowed")];
  }
}

- (void)replay {
  @synchronized(self) {
    if (emitting_) {
      missed_ = true;
      return;
    }
    emitting_ = true;
  }
  id<JavaUtilQueue> q = queue_;
  for (; ; ) {
    RxSubscriber *s = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscriber_)) get];
    jboolean unlimited = false;
    if (s != nil) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      jboolean empty = [((id<JavaUtilQueue>) nil_chk(q)) isEmpty];
      if ([self checkTerminatedWithBoolean:d withBoolean:empty withRxSubscriber:s]) {
        return;
      }
      jlong r = [self get];
      unlimited = (r == JavaLangLong_MAX_VALUE);
      jlong e = 0LL;
      while (r != 0) {
        d = JreLoadVolatileBoolean(&done_);
        id v = [q poll];
        empty = (v == nil);
        if ([self checkTerminatedWithBoolean:d withBoolean:empty withRxSubscriber:s]) {
          return;
        }
        if (empty) {
          break;
        }
        id value = RxInternalOperatorsNotificationLite_getValueWithId_(v);
        @try {
          [s onNextWithId:value];
        }
        @catch (NSException *ex) {
          [q clear];
          RxExceptionsExceptions_throwIfFatalWithNSException_(ex);
          [s onErrorWithNSException:RxExceptionsOnErrorThrowable_addValueAsLastCauseWithNSException_withId_(ex, value)];
          return;
        }
        r--;
        e++;
      }
      if (!unlimited && e != 0LL) {
        [self addAndGetWithLong:-e];
      }
    }
    @synchronized(self) {
      if (!missed_) {
        if (unlimited && [((id<JavaUtilQueue>) nil_chk(q)) isEmpty]) {
          JreAssignVolatileBoolean(&caughtUp_, true);
        }
        emitting_ = false;
        return;
      }
      missed_ = false;
    }
  }
}

- (void)unsubscribe {
  [self doTerminate];
  JreAssignVolatileBoolean(&done_, true);
  @synchronized(self) {
    if (emitting_) {
      return;
    }
    emitting_ = true;
  }
  [((id<JavaUtilQueue>) nil_chk(queue_)) clear];
}

- (jboolean)isUnsubscribed {
  return JreLoadVolatileBoolean(&done_);
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)done
                           withBoolean:(jboolean)empty
                      withRxSubscriber:(RxSubscriber *)s {
  if ([((RxSubscriber *) nil_chk(s)) isUnsubscribed]) {
    [((id<JavaUtilQueue>) nil_chk(queue_)) clear];
    return true;
  }
  if (done) {
    NSException *e = error_;
    if (e != nil) {
      [((id<JavaUtilQueue>) nil_chk(queue_)) clear];
      [s onErrorWithNSException:e];
      return true;
    }
    else if (empty) {
      [s onCompleted];
      return true;
    }
  }
  return false;
}

- (void)doTerminate {
  JavaUtilConcurrentAtomicAtomicReference *ref = self->terminateOnce_;
  if (ref != nil) {
    id<RxFunctionsAction0> a = [ref get];
    if (a != nil && [ref compareAndSetWithId:a withId:nil]) {
      [a call];
    }
  }
}

- (void)dealloc {
  RELEASE_(subscriber_);
  RELEASE_(queue_);
  RELEASE_(terminateOnce_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withRxFunctionsAction0:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(requestWithLong:);
  methods[5].selector = @selector(callWithId:);
  methods[6].selector = @selector(replay);
  methods[7].selector = @selector(unsubscribe);
  methods[8].selector = @selector(isUnsubscribed);
  methods[9].selector = @selector(checkTerminatedWithBoolean:withBoolean:withRxSubscriber:);
  methods[10].selector = @selector(doTerminate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxSubjectsUnicastSubject_State_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "subscriber_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "terminateOnce_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "missed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "caughtUp_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILRxFunctionsAction0;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "request", "J", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "checkTerminated", "ZZLRxSubscriber;", "(ZZLrx/Subscriber<-TT;>;)Z", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscriber<-TT;>;>;", "Ljava/util/Queue<Ljava/lang/Object;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/functions/Action0;>;", "LRxSubjectsUnicastSubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicLong;Lrx/Producer;Lrx/Observer<TT;>;Lrx/Observable$OnSubscribe<TT;>;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxSubjectsUnicastSubject_State = { "State", "rx.subjects", ptrTable, methods, fields, 7, 0x18, 11, 9, 17, -1, -1, 18, -1 };
  return &_RxSubjectsUnicastSubject_State;
}

@end

void RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(RxSubjectsUnicastSubject_State *self, jint capacityHint, id<RxFunctionsAction0> onTerminated) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssignAndConsume(&self->subscriber_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->terminateOnce_, onTerminated != nil ? create_JavaUtilConcurrentAtomicAtomicReference_initWithId_(onTerminated) : nil);
  id<JavaUtilQueue> q;
  if (capacityHint > 1) {
    q = RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable() ? create_RxInternalUtilUnsafeSpscUnboundedArrayQueue_initWithInt_(capacityHint) : (id) create_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(capacityHint);
  }
  else {
    q = RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable() ? create_RxInternalUtilUnsafeSpscLinkedQueue_init() : (id) create_RxInternalUtilAtomicSpscLinkedAtomicQueue_init();
  }
  JreStrongAssign(&self->queue_, q);
}

RxSubjectsUnicastSubject_State *new_RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(jint capacityHint, id<RxFunctionsAction0> onTerminated) {
  J2OBJC_NEW_IMPL(RxSubjectsUnicastSubject_State, initWithInt_withRxFunctionsAction0_, capacityHint, onTerminated)
}

RxSubjectsUnicastSubject_State *create_RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(jint capacityHint, id<RxFunctionsAction0> onTerminated) {
  J2OBJC_CREATE_IMPL(RxSubjectsUnicastSubject_State, initWithInt_withRxFunctionsAction0_, capacityHint, onTerminated)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsUnicastSubject_State)
