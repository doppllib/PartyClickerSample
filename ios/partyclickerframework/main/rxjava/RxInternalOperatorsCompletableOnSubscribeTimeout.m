//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxCompletableSubscriber.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsCompletableOnSubscribeTimeout.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface RxInternalOperatorsCompletableOnSubscribeTimeout_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsCompletableOnSubscribeTimeout *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  RxSubscriptionsCompositeSubscription *val$set_;
  id<RxCompletableSubscriber> val$s_;
}

- (instancetype)initWithRxInternalOperatorsCompletableOnSubscribeTimeout:(RxInternalOperatorsCompletableOnSubscribeTimeout *)outer$
                               withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1
                                             withRxCompletableSubscriber:(id<RxCompletableSubscriber>)capture$2;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeTimeout_1)

__attribute__((unused)) static void RxInternalOperatorsCompletableOnSubscribeTimeout_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeTimeout_1 *self, RxInternalOperatorsCompletableOnSubscribeTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriptionsCompositeSubscription *capture$1, id<RxCompletableSubscriber> capture$2);

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeTimeout_1 *new_RxInternalOperatorsCompletableOnSubscribeTimeout_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriptionsCompositeSubscription *capture$1, id<RxCompletableSubscriber> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeTimeout_1 *create_RxInternalOperatorsCompletableOnSubscribeTimeout_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriptionsCompositeSubscription *capture$1, id<RxCompletableSubscriber> capture$2);

@interface RxInternalOperatorsCompletableOnSubscribeTimeout_1_1 : NSObject < RxCompletableSubscriber > {
 @public
  RxInternalOperatorsCompletableOnSubscribeTimeout_1 *this$0_;
}

- (instancetype)initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1:(RxInternalOperatorsCompletableOnSubscribeTimeout_1 *)outer$;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeTimeout_1_1)

__attribute__((unused)) static void RxInternalOperatorsCompletableOnSubscribeTimeout_1_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_(RxInternalOperatorsCompletableOnSubscribeTimeout_1_1 *self, RxInternalOperatorsCompletableOnSubscribeTimeout_1 *outer$);

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeTimeout_1_1 *new_RxInternalOperatorsCompletableOnSubscribeTimeout_1_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_(RxInternalOperatorsCompletableOnSubscribeTimeout_1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeTimeout_1_1 *create_RxInternalOperatorsCompletableOnSubscribeTimeout_1_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_(RxInternalOperatorsCompletableOnSubscribeTimeout_1 *outer$);

@interface RxInternalOperatorsCompletableOnSubscribeTimeout_2 : NSObject < RxCompletableSubscriber > {
 @public
  RxSubscriptionsCompositeSubscription *val$set_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  id<RxCompletableSubscriber> val$s_;
}

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                   withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                                 withRxCompletableSubscriber:(id<RxCompletableSubscriber>)capture$2;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeTimeout_2)

__attribute__((unused)) static void RxInternalOperatorsCompletableOnSubscribeTimeout_2_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeTimeout_2 *self, RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2);

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeTimeout_2 *new_RxInternalOperatorsCompletableOnSubscribeTimeout_2_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeTimeout_2 *create_RxInternalOperatorsCompletableOnSubscribeTimeout_2_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2);

@implementation RxInternalOperatorsCompletableOnSubscribeTimeout

- (instancetype)initWithRxCompletable:(RxCompletable *)source
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                      withRxScheduler:(RxScheduler *)scheduler
                    withRxCompletable:(RxCompletable *)other {
  RxInternalOperatorsCompletableOnSubscribeTimeout_initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_(self, source, timeout, unit, scheduler, other);
  return self;
}

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  RxSubscriptionsCompositeSubscription *set = create_RxSubscriptionsCompositeSubscription_init();
  [((id<RxCompletableSubscriber>) nil_chk(s)) onSubscribeWithRxSubscription:set];
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  [set addWithRxSubscription:w];
  [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsCompletableOnSubscribeTimeout_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_(self, once, set, s) withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
  [((RxCompletable *) nil_chk(source_)) unsafeSubscribeWithRxCompletableSubscriber:create_RxInternalOperatorsCompletableOnSubscribeTimeout_2_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_(set, once, s)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxCompletable:withLong:withJavaUtilConcurrentTimeUnit:withRxScheduler:withRxCompletable:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxCompletable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LRxCompletable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletable;JLJavaUtilConcurrentTimeUnit;LRxScheduler;LRxCompletable;", "call", "LRxCompletableSubscriber;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeTimeout = { "CompletableOnSubscribeTimeout", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeTimeout;
}

@end

void RxInternalOperatorsCompletableOnSubscribeTimeout_initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_(RxInternalOperatorsCompletableOnSubscribeTimeout *self, RxCompletable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, RxCompletable *other) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->other_, other);
}

RxInternalOperatorsCompletableOnSubscribeTimeout *new_RxInternalOperatorsCompletableOnSubscribeTimeout_initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_(RxCompletable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, RxCompletable *other) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeTimeout, initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_, source, timeout, unit, scheduler, other)
}

RxInternalOperatorsCompletableOnSubscribeTimeout *create_RxInternalOperatorsCompletableOnSubscribeTimeout_initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_(RxCompletable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, RxCompletable *other) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeTimeout, initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_, source, timeout, unit, scheduler, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableOnSubscribeTimeout)

@implementation RxInternalOperatorsCompletableOnSubscribeTimeout_1

- (instancetype)initWithRxInternalOperatorsCompletableOnSubscribeTimeout:(RxInternalOperatorsCompletableOnSubscribeTimeout *)outer$
                               withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1
                                             withRxCompletableSubscriber:(id<RxCompletableSubscriber>)capture$2 {
  RxInternalOperatorsCompletableOnSubscribeTimeout_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)call {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxSubscriptionsCompositeSubscription *) nil_chk(val$set_)) clear];
    if (this$0_->other_ == nil) {
      [((id<RxCompletableSubscriber>) nil_chk(val$s_)) onErrorWithNSException:create_JavaUtilConcurrentTimeoutException_init()];
    }
    else {
      [this$0_->other_ unsafeSubscribeWithRxCompletableSubscriber:create_RxInternalOperatorsCompletableOnSubscribeTimeout_1_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_(self)];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$once_);
  RELEASE_(val$set_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsCompletableOnSubscribeTimeout:withJavaUtilConcurrentAtomicAtomicBoolean:withRxSubscriptionsCompositeSubscription:withRxCompletableSubscriber:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsCompletableOnSubscribeTimeout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$set_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxCompletableSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsCompletableOnSubscribeTimeout;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeTimeout_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 4, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeTimeout_1;
}

@end

void RxInternalOperatorsCompletableOnSubscribeTimeout_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeTimeout_1 *self, RxInternalOperatorsCompletableOnSubscribeTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriptionsCompositeSubscription *capture$1, id<RxCompletableSubscriber> capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$once_, capture$0);
  JreStrongAssign(&self->val$set_, capture$1);
  JreStrongAssign(&self->val$s_, capture$2);
  NSObject_init(self);
}

RxInternalOperatorsCompletableOnSubscribeTimeout_1 *new_RxInternalOperatorsCompletableOnSubscribeTimeout_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriptionsCompositeSubscription *capture$1, id<RxCompletableSubscriber> capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeTimeout_1, initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_, outer$, capture$0, capture$1, capture$2)
}

RxInternalOperatorsCompletableOnSubscribeTimeout_1 *create_RxInternalOperatorsCompletableOnSubscribeTimeout_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriptionsCompositeSubscription *capture$1, id<RxCompletableSubscriber> capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeTimeout_1, initWithRxInternalOperatorsCompletableOnSubscribeTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriptionsCompositeSubscription_withRxCompletableSubscriber_, outer$, capture$0, capture$1, capture$2)
}

@implementation RxInternalOperatorsCompletableOnSubscribeTimeout_1_1

- (instancetype)initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1:(RxInternalOperatorsCompletableOnSubscribeTimeout_1 *)outer$ {
  RxInternalOperatorsCompletableOnSubscribeTimeout_1_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_(self, outer$);
  return self;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(this$0_->val$set_)) addWithRxSubscription:d];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(this$0_->val$set_)) unsubscribe];
  [((id<RxCompletableSubscriber>) nil_chk(this$0_->val$s_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(this$0_->val$set_)) unsubscribe];
  [((id<RxCompletableSubscriber>) nil_chk(this$0_->val$s_)) onCompleted];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1:);
  methods[1].selector = @selector(onSubscribeWithRxSubscription:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsCompletableOnSubscribeTimeout_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxInternalOperatorsCompletableOnSubscribeTimeout_1;", "call" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeTimeout_1_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 4, 1, 4, -1, 5, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeTimeout_1_1;
}

@end

void RxInternalOperatorsCompletableOnSubscribeTimeout_1_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_(RxInternalOperatorsCompletableOnSubscribeTimeout_1_1 *self, RxInternalOperatorsCompletableOnSubscribeTimeout_1 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsCompletableOnSubscribeTimeout_1_1 *new_RxInternalOperatorsCompletableOnSubscribeTimeout_1_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_(RxInternalOperatorsCompletableOnSubscribeTimeout_1 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeTimeout_1_1, initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_, outer$)
}

RxInternalOperatorsCompletableOnSubscribeTimeout_1_1 *create_RxInternalOperatorsCompletableOnSubscribeTimeout_1_1_initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_(RxInternalOperatorsCompletableOnSubscribeTimeout_1 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeTimeout_1_1, initWithRxInternalOperatorsCompletableOnSubscribeTimeout_1_, outer$)
}

@implementation RxInternalOperatorsCompletableOnSubscribeTimeout_2

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                   withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                                 withRxCompletableSubscriber:(id<RxCompletableSubscriber>)capture$2 {
  RxInternalOperatorsCompletableOnSubscribeTimeout_2_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(val$set_)) addWithRxSubscription:d];
}

- (void)onErrorWithNSException:(NSException *)e {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxSubscriptionsCompositeSubscription *) nil_chk(val$set_)) unsubscribe];
    [((id<RxCompletableSubscriber>) nil_chk(val$s_)) onErrorWithNSException:e];
  }
  else {
    RxPluginsRxJavaHooks_onErrorWithNSException_(e);
  }
}

- (void)onCompleted {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxSubscriptionsCompositeSubscription *) nil_chk(val$set_)) unsubscribe];
    [((id<RxCompletableSubscriber>) nil_chk(val$s_)) onCompleted];
  }
}

- (void)dealloc {
  RELEASE_(val$set_);
  RELEASE_(val$once_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriptionsCompositeSubscription:withJavaUtilConcurrentAtomicAtomicBoolean:withRxCompletableSubscriber:);
  methods[1].selector = @selector(onSubscribeWithRxSubscription:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$set_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxCompletableSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxInternalOperatorsCompletableOnSubscribeTimeout;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeTimeout_2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 4, 3, 4, -1, 5, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeTimeout_2;
}

@end

void RxInternalOperatorsCompletableOnSubscribeTimeout_2_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeTimeout_2 *self, RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2) {
  JreStrongAssign(&self->val$set_, capture$0);
  JreStrongAssign(&self->val$once_, capture$1);
  JreStrongAssign(&self->val$s_, capture$2);
  NSObject_init(self);
}

RxInternalOperatorsCompletableOnSubscribeTimeout_2 *new_RxInternalOperatorsCompletableOnSubscribeTimeout_2_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeTimeout_2, initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_, capture$0, capture$1, capture$2)
}

RxInternalOperatorsCompletableOnSubscribeTimeout_2 *create_RxInternalOperatorsCompletableOnSubscribeTimeout_2_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeTimeout_2, initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_, capture$0, capture$1, capture$2)
}
