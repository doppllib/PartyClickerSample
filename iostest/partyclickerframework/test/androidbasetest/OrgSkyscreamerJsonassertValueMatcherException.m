//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertValueMatcherException.h"
#include "java/lang/RuntimeException.h"

@interface OrgSkyscreamerJsonassertValueMatcherException () {
 @public
  NSString *expected_;
  NSString *actual_;
}

@end

J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertValueMatcherException, expected_, NSString *)
J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertValueMatcherException, actual_, NSString *)

inline jlong OrgSkyscreamerJsonassertValueMatcherException_get_serialVersionUID();
#define OrgSkyscreamerJsonassertValueMatcherException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSkyscreamerJsonassertValueMatcherException, serialVersionUID, jlong)

@implementation OrgSkyscreamerJsonassertValueMatcherException

- (instancetype)initWithNSString:(NSString *)message
                    withNSString:(NSString *)expected
                    withNSString:(NSString *)actual {
  OrgSkyscreamerJsonassertValueMatcherException_initWithNSString_withNSString_withNSString_(self, message, expected, actual);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause
                    withNSString:(NSString *)expected
                    withNSString:(NSString *)actual {
  OrgSkyscreamerJsonassertValueMatcherException_initWithNSString_withNSException_withNSString_withNSString_(self, message, cause, expected, actual);
  return self;
}

- (NSString *)getExpected {
  return expected_;
}

- (NSString *)getActual {
  return actual_;
}

- (void)dealloc {
  RELEASE_(expected_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:);
  methods[1].selector = @selector(initWithNSString:withNSException:withNSString:withNSString:);
  methods[2].selector = @selector(getExpected);
  methods[3].selector = @selector(getActual);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgSkyscreamerJsonassertValueMatcherException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "expected_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "actual_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;", "LNSString;LNSException;LNSString;LNSString;" };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertValueMatcherException = { "ValueMatcherException", "org.skyscreamer.jsonassert", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgSkyscreamerJsonassertValueMatcherException;
}

@end

void OrgSkyscreamerJsonassertValueMatcherException_initWithNSString_withNSString_withNSString_(OrgSkyscreamerJsonassertValueMatcherException *self, NSString *message, NSString *expected, NSString *actual) {
  JavaLangRuntimeException_initWithNSString_(self, message);
  JreStrongAssign(&self->expected_, expected);
  JreStrongAssign(&self->actual_, actual);
}

OrgSkyscreamerJsonassertValueMatcherException *new_OrgSkyscreamerJsonassertValueMatcherException_initWithNSString_withNSString_withNSString_(NSString *message, NSString *expected, NSString *actual) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertValueMatcherException, initWithNSString_withNSString_withNSString_, message, expected, actual)
}

OrgSkyscreamerJsonassertValueMatcherException *create_OrgSkyscreamerJsonassertValueMatcherException_initWithNSString_withNSString_withNSString_(NSString *message, NSString *expected, NSString *actual) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertValueMatcherException, initWithNSString_withNSString_withNSString_, message, expected, actual)
}

void OrgSkyscreamerJsonassertValueMatcherException_initWithNSString_withNSException_withNSString_withNSString_(OrgSkyscreamerJsonassertValueMatcherException *self, NSString *message, NSException *cause, NSString *expected, NSString *actual) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, message, cause);
  JreStrongAssign(&self->expected_, expected);
  JreStrongAssign(&self->actual_, actual);
}

OrgSkyscreamerJsonassertValueMatcherException *new_OrgSkyscreamerJsonassertValueMatcherException_initWithNSString_withNSException_withNSString_withNSString_(NSString *message, NSException *cause, NSString *expected, NSString *actual) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertValueMatcherException, initWithNSString_withNSException_withNSString_withNSString_, message, cause, expected, actual)
}

OrgSkyscreamerJsonassertValueMatcherException *create_OrgSkyscreamerJsonassertValueMatcherException_initWithNSString_withNSException_withNSString_withNSString_(NSString *message, NSException *cause, NSString *expected, NSString *actual) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertValueMatcherException, initWithNSString_withNSException_withNSString_withNSString_, message, cause, expected, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertValueMatcherException)
