//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsHandler.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxAndroidSchedulersHandlerScheduler.h"
#include "RxAndroidSchedulersLooperScheduler.h"
#include "java/lang/Deprecated.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"

@interface RxAndroidSchedulersHandlerScheduler ()

- (instancetype)initWithAndroidOsHandler:(AndroidOsHandler *)handler;

@end

__attribute__((unused)) static void RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(RxAndroidSchedulersHandlerScheduler *self, AndroidOsHandler *handler);

__attribute__((unused)) static RxAndroidSchedulersHandlerScheduler *new_RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(AndroidOsHandler *handler) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersHandlerScheduler *create_RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(AndroidOsHandler *handler);

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersHandlerScheduler__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersHandlerScheduler__Annotations$1();

@implementation RxAndroidSchedulersHandlerScheduler

+ (RxAndroidSchedulersHandlerScheduler *)fromWithAndroidOsHandler:(AndroidOsHandler *)handler {
  return RxAndroidSchedulersHandlerScheduler_fromWithAndroidOsHandler_(handler);
}

- (instancetype)initWithAndroidOsHandler:(AndroidOsHandler *)handler {
  RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(self, handler);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxAndroidSchedulersHandlerScheduler;", 0x9, 0, 1, -1, -1, 2, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromWithAndroidOsHandler:);
  methods[1].selector = @selector(initWithAndroidOsHandler:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "from", "LAndroidOsHandler;", (void *)&RxAndroidSchedulersHandlerScheduler__Annotations$0, (void *)&RxAndroidSchedulersHandlerScheduler__Annotations$1 };
  static const J2ObjcClassInfo _RxAndroidSchedulersHandlerScheduler = { "HandlerScheduler", "rx.android.schedulers", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, -1, -1, -1, 3 };
  return &_RxAndroidSchedulersHandlerScheduler;
}

@end

RxAndroidSchedulersHandlerScheduler *RxAndroidSchedulersHandlerScheduler_fromWithAndroidOsHandler_(AndroidOsHandler *handler) {
  RxAndroidSchedulersHandlerScheduler_initialize();
  if (handler == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"handler == null");
  return create_RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(handler);
}

void RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(RxAndroidSchedulersHandlerScheduler *self, AndroidOsHandler *handler) {
  RxAndroidSchedulersLooperScheduler_initWithAndroidOsHandler_(self, handler);
}

RxAndroidSchedulersHandlerScheduler *new_RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(AndroidOsHandler *handler) {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersHandlerScheduler, initWithAndroidOsHandler_, handler)
}

RxAndroidSchedulersHandlerScheduler *create_RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(AndroidOsHandler *handler) {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersHandlerScheduler, initWithAndroidOsHandler_, handler)
}

IOSObjectArray *RxAndroidSchedulersHandlerScheduler__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersHandlerScheduler__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidSchedulersHandlerScheduler)
