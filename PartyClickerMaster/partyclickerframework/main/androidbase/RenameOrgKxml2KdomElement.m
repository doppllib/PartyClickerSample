//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbase/src/main/java/rename/org/kxml2/kdom/Element.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RenameOrgKxml2KdomElement.h"
#include "RenameOrgKxml2KdomNode.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Vector.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlSerializer.h"

@implementation RenameOrgKxml2KdomElement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RenameOrgKxml2KdomElement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__ {
}

- (void)clear {
  JreStrongAssign(&attributes_, nil);
  JreStrongAssign(&children_, nil);
}

- (RenameOrgKxml2KdomElement *)createElementWithNSString:(NSString *)namespace_
                                            withNSString:(NSString *)name {
  return (self->parent_ == nil) ? [super createElementWithNSString:namespace_ withNSString:name] : [((RenameOrgKxml2KdomNode *) nil_chk(self->parent_)) createElementWithNSString:namespace_ withNSString:name];
}

- (jint)getAttributeCount {
  return attributes_ == nil ? 0 : [attributes_ size];
}

- (NSString *)getAttributeNamespaceWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(((IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(attributes_)) elementAtWithInt:index], IOSClass_arrayType(NSString_class_(), 1)))), 0);
}

- (NSString *)getAttributeNameWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(((IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(attributes_)) elementAtWithInt:index], IOSClass_arrayType(NSString_class_(), 1)))), 1);
}

- (NSString *)getAttributeValueWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(((IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(attributes_)) elementAtWithInt:index], IOSClass_arrayType(NSString_class_(), 1)))), 2);
}

- (NSString *)getAttributeValueWithNSString:(NSString *)namespace_
                               withNSString:(NSString *)name {
  for (jint i = 0; i < [self getAttributeCount]; i++) {
    if ([((NSString *) nil_chk(name)) isEqual:[self getAttributeNameWithInt:i]] && (namespace_ == nil || [namespace_ isEqual:[self getAttributeNamespaceWithInt:i]])) {
      return [self getAttributeValueWithInt:i];
    }
  }
  return nil;
}

- (RenameOrgKxml2KdomNode *)getRoot {
  RenameOrgKxml2KdomElement *current = self;
  while (current->parent_ != nil) {
    if (!([current->parent_ isKindOfClass:[RenameOrgKxml2KdomElement class]])) return current->parent_;
    current = (RenameOrgKxml2KdomElement *) cast_chk(current->parent_, [RenameOrgKxml2KdomElement class]);
  }
  return current;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getNamespace {
  return namespace__;
}

- (NSString *)getNamespaceUriWithNSString:(NSString *)prefix {
  jint cnt = [self getNamespaceCount];
  for (jint i = 0; i < cnt; i++) {
    if (prefix == [self getNamespacePrefixWithInt:i] || (prefix != nil && [prefix isEqual:[self getNamespacePrefixWithInt:i]])) return [self getNamespaceUriWithInt:i];
  }
  return [parent_ isKindOfClass:[RenameOrgKxml2KdomElement class]] ? [((RenameOrgKxml2KdomElement *) nil_chk(((RenameOrgKxml2KdomElement *) cast_chk(parent_, [RenameOrgKxml2KdomElement class])))) getNamespaceUriWithNSString:prefix] : nil;
}

- (jint)getNamespaceCount {
  return (prefixes_ == nil ? 0 : [prefixes_ size]);
}

- (NSString *)getNamespacePrefixWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(((IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(prefixes_)) elementAtWithInt:i], IOSClass_arrayType(NSString_class_(), 1)))), 0);
}

- (NSString *)getNamespaceUriWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(((IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(prefixes_)) elementAtWithInt:i], IOSClass_arrayType(NSString_class_(), 1)))), 1);
}

- (RenameOrgKxml2KdomNode *)getParent {
  return parent_;
}

- (void)parseWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser {
  for (jint i = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getNamespaceCountWithInt:[parser getDepth] - 1]; i < [parser getNamespaceCountWithInt:[parser getDepth]]; i++) {
    [self setPrefixWithNSString:[parser getNamespacePrefixWithInt:i] withNSString:[parser getNamespaceUriWithInt:i]];
  }
  for (jint i = 0; i < [parser getAttributeCount]; i++) [self setAttributeWithNSString:[parser getAttributeNamespaceWithInt:i] withNSString:[parser getAttributeNameWithInt:i] withNSString:[parser getAttributeValueWithInt:i]];
  [self init__];
  if ([parser isEmptyElementTag]) [parser nextToken];
  else {
    [parser nextToken];
    [super parseWithOrgXmlpullV1XmlPullParser:parser];
    if ([self getChildCount] == 0) [self addChildWithInt:RenameOrgKxml2KdomNode_IGNORABLE_WHITESPACE withId:@""];
  }
  [parser requireWithInt:OrgXmlpullV1XmlPullParser_END_TAG withNSString:[self getNamespace] withNSString:[self getName]];
  [parser nextToken];
}

- (void)setAttributeWithNSString:(NSString *)namespace_
                    withNSString:(NSString *)name
                    withNSString:(NSString *)value {
  if (attributes_ == nil) JreStrongAssignAndConsume(&attributes_, new_JavaUtilVector_init());
  if (namespace_ == nil) namespace_ = @"";
  for (jint i = [attributes_ size] - 1; i >= 0; i--) {
    IOSObjectArray *attribut = (IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(attributes_)) elementAtWithInt:i], IOSClass_arrayType(NSString_class_(), 1));
    if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(attribut), 0))) isEqual:namespace_] && [((NSString *) nil_chk(IOSObjectArray_Get(attribut, 1))) isEqual:name]) {
      if (value == nil) {
        [((JavaUtilVector *) nil_chk(attributes_)) removeElementAtWithInt:i];
      }
      else {
        IOSObjectArray_Set(attribut, 2, value);
      }
      return;
    }
  }
  [((JavaUtilVector *) nil_chk(attributes_)) addElementWithId:[IOSObjectArray arrayWithObjects:(id[]){ namespace_, name, value } count:3 type:NSString_class_()]];
}

- (void)setPrefixWithNSString:(NSString *)prefix
                 withNSString:(NSString *)namespace_ {
  if (prefixes_ == nil) JreStrongAssignAndConsume(&prefixes_, new_JavaUtilVector_init());
  [prefixes_ addElementWithId:[IOSObjectArray arrayWithObjects:(id[]){ prefix, namespace_ } count:2 type:NSString_class_()]];
}

- (void)setNameWithNSString:(NSString *)name {
  JreStrongAssign(&self->name_, name);
}

- (void)setNamespaceWithNSString:(NSString *)namespace_ {
  if (namespace_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Use \"\" for empty namespace");
  JreStrongAssign(&self->namespace__, namespace_);
}

- (void)setParentWithRenameOrgKxml2KdomNode:(RenameOrgKxml2KdomNode *)parent {
  JreStrongAssign(&self->parent_, parent);
}

- (void)writeWithOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)writer {
  if (prefixes_ != nil) {
    for (jint i = 0; i < [((JavaUtilVector *) nil_chk(prefixes_)) size]; i++) {
      [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) setPrefixWithNSString:[self getNamespacePrefixWithInt:i] withNSString:[self getNamespaceUriWithInt:i]];
    }
  }
  [((id<OrgXmlpullV1XmlSerializer>) nil_chk(writer)) startTagWithNSString:[self getNamespace] withNSString:[self getName]];
  jint len = [self getAttributeCount];
  for (jint i = 0; i < len; i++) {
    [writer attributeWithNSString:[self getAttributeNamespaceWithInt:i] withNSString:[self getAttributeNameWithInt:i] withNSString:[self getAttributeValueWithInt:i]];
  }
  [self writeChildrenWithOrgXmlpullV1XmlSerializer:writer];
  [writer endTagWithNSString:[self getNamespace] withNSString:[self getName]];
}

- (void)dealloc {
  RELEASE_(namespace__);
  RELEASE_(name_);
  RELEASE_(attributes_);
  RELEASE_(parent_);
  RELEASE_(prefixes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRenameOrgKxml2KdomElement;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LRenameOrgKxml2KdomNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LRenameOrgKxml2KdomNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 22, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(clear);
  methods[3].selector = @selector(createElementWithNSString:withNSString:);
  methods[4].selector = @selector(getAttributeCount);
  methods[5].selector = @selector(getAttributeNamespaceWithInt:);
  methods[6].selector = @selector(getAttributeNameWithInt:);
  methods[7].selector = @selector(getAttributeValueWithInt:);
  methods[8].selector = @selector(getAttributeValueWithNSString:withNSString:);
  methods[9].selector = @selector(getRoot);
  methods[10].selector = @selector(getName);
  methods[11].selector = @selector(getNamespace);
  methods[12].selector = @selector(getNamespaceUriWithNSString:);
  methods[13].selector = @selector(getNamespaceCount);
  methods[14].selector = @selector(getNamespacePrefixWithInt:);
  methods[15].selector = @selector(getNamespaceUriWithInt:);
  methods[16].selector = @selector(getParent);
  methods[17].selector = @selector(parseWithOrgXmlpullV1XmlPullParser:);
  methods[18].selector = @selector(setAttributeWithNSString:withNSString:withNSString:);
  methods[19].selector = @selector(setPrefixWithNSString:withNSString:);
  methods[20].selector = @selector(setNameWithNSString:);
  methods[21].selector = @selector(setNamespaceWithNSString:);
  methods[22].selector = @selector(setParentWithRenameOrgKxml2KdomNode:);
  methods[23].selector = @selector(writeWithOrgXmlpullV1XmlSerializer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "namespace__", "LNSString;", .constantValue.asLong = 0, 0x4, 23, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "attributes_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "parent_", "LRenameOrgKxml2KdomNode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "prefixes_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "createElement", "LNSString;LNSString;", "getAttributeNamespace", "I", "getAttributeName", "getAttributeValue", "getNamespaceUri", "LNSString;", "getNamespacePrefix", "parse", "LOrgXmlpullV1XmlPullParser;", "LJavaIoIOException;LOrgXmlpullV1XmlPullParserException;", "setAttribute", "LNSString;LNSString;LNSString;", "setPrefix", "setName", "setNamespace", "setParent", "LRenameOrgKxml2KdomNode;", "write", "LOrgXmlpullV1XmlSerializer;", "LJavaIoIOException;", "namespace" };
  static const J2ObjcClassInfo _RenameOrgKxml2KdomElement = { "Element", "rename.org.kxml2.kdom", ptrTable, methods, fields, 7, 0x1, 24, 5, -1, -1, -1, -1, -1 };
  return &_RenameOrgKxml2KdomElement;
}

@end

void RenameOrgKxml2KdomElement_init(RenameOrgKxml2KdomElement *self) {
  RenameOrgKxml2KdomNode_init(self);
}

RenameOrgKxml2KdomElement *new_RenameOrgKxml2KdomElement_init() {
  J2OBJC_NEW_IMPL(RenameOrgKxml2KdomElement, init)
}

RenameOrgKxml2KdomElement *create_RenameOrgKxml2KdomElement_init() {
  J2OBJC_CREATE_IMPL(RenameOrgKxml2KdomElement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RenameOrgKxml2KdomElement)
