//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCursor.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBooleanCharType.h"
#include "CoTouchlabSqueakyFieldTypesBooleanType.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/sql/SQLException.h"

inline NSString *CoTouchlabSqueakyFieldTypesBooleanCharType_get_DEFAULT_TRUE_FALSE_FORMAT();
static NSString *CoTouchlabSqueakyFieldTypesBooleanCharType_DEFAULT_TRUE_FALSE_FORMAT = @"10";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBooleanCharType, DEFAULT_TRUE_FALSE_FORMAT, NSString *)

inline CoTouchlabSqueakyFieldTypesBooleanCharType *CoTouchlabSqueakyFieldTypesBooleanCharType_get_singleTon();
static CoTouchlabSqueakyFieldTypesBooleanCharType *CoTouchlabSqueakyFieldTypesBooleanCharType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBooleanCharType, singleTon, CoTouchlabSqueakyFieldTypesBooleanCharType *)

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesBooleanCharType)

@implementation CoTouchlabSqueakyFieldTypesBooleanCharType

+ (CoTouchlabSqueakyFieldTypesBooleanCharType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesBooleanCharType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesBooleanCharType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  return [self javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:fieldType withId:JavaLangBoolean_valueOfWithBoolean_(JavaLangBoolean_parseBooleanWithNSString_(defaultStr))];
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj {
  NSString *format = (NSString *) cast_chk([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getDataTypeConfigObj], [NSString class]);
  return JavaLangCharacter_valueOfWithChar_(([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(obj, [JavaLangBoolean class]))) booleanValue] ? [((NSString *) nil_chk(format)) charAtWithInt:0] : [((NSString *) nil_chk(format)) charAtWithInt:1]));
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  NSString *string = [((id<AndroidDatabaseCursor>) nil_chk(results)) getStringWithInt:columnPos];
  if (string == nil || [string java_length] == 0) {
    return JavaLangInteger_valueOfWithInt_(0);
  }
  else if ([string java_length] == 1) {
    return JavaLangCharacter_valueOfWithChar_([string charAtWithInt:0]);
  }
  else {
    @throw create_JavaSqlSQLException_initWithNSString_(JreStrcat("$I", @"More than 1 character stored in database column: ", columnPos));
  }
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  NSString *format = (NSString *) cast_chk([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getDataTypeConfigObj], [NSString class]);
  return ([((JavaLangCharacter *) nil_chk((JavaLangCharacter *) cast_chk(sqlArg, [JavaLangCharacter class]))) charValue] == [((NSString *) nil_chk(format)) charAtWithInt:0] ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE));
}

- (id)makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  NSString *format = [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getFormat];
  if (format == nil) {
    return CoTouchlabSqueakyFieldTypesBooleanCharType_DEFAULT_TRUE_FALSE_FORMAT;
  }
  else if ([format java_length] == 2 && [format charAtWithInt:0] != [format charAtWithInt:1]) {
    return format;
  }
  else {
    @throw create_JavaSqlSQLException_initWithNSString_(JreStrcat("$$", @"Invalid boolean format must have 2 different characters that represent true/false like \"10\" or \"tf\": ", format));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCoTouchlabSqueakyFieldTypesBooleanCharType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getSingleton);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:);
  methods[3].selector = @selector(javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:);
  methods[4].selector = @selector(resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  methods[5].selector = @selector(sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:);
  methods[6].selector = @selector(makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_TRUE_FALSE_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "singleTon", "LCoTouchlabSqueakyFieldTypesBooleanCharType;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "parseDefaultString", "LCoTouchlabSqueakyFieldFieldType;LNSString;", "javaToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LNSObject;", "resultToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LAndroidDatabaseCursor;I", "LJavaSqlSQLException;", "sqlArgToJava", "LCoTouchlabSqueakyFieldFieldType;LNSObject;I", "makeConfigObject", "LCoTouchlabSqueakyFieldFieldType;", &CoTouchlabSqueakyFieldTypesBooleanCharType_DEFAULT_TRUE_FALSE_FORMAT, &CoTouchlabSqueakyFieldTypesBooleanCharType_singleTon };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBooleanCharType = { "BooleanCharType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesBooleanCharType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesBooleanCharType class]) {
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesBooleanCharType_singleTon, new_CoTouchlabSqueakyFieldTypesBooleanCharType_init());
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesBooleanCharType)
  }
}

@end

CoTouchlabSqueakyFieldTypesBooleanCharType *CoTouchlabSqueakyFieldTypesBooleanCharType_getSingleton() {
  CoTouchlabSqueakyFieldTypesBooleanCharType_initialize();
  return CoTouchlabSqueakyFieldTypesBooleanCharType_singleTon;
}

void CoTouchlabSqueakyFieldTypesBooleanCharType_init(CoTouchlabSqueakyFieldTypesBooleanCharType *self) {
  CoTouchlabSqueakyFieldTypesBooleanType_initWithCoTouchlabSqueakyFieldSqlType_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, STRING));
}

CoTouchlabSqueakyFieldTypesBooleanCharType *new_CoTouchlabSqueakyFieldTypesBooleanCharType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesBooleanCharType, init)
}

CoTouchlabSqueakyFieldTypesBooleanCharType *create_CoTouchlabSqueakyFieldTypesBooleanCharType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesBooleanCharType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBooleanCharType)
