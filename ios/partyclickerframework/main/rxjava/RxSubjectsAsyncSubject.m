//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsNotificationLite.h"
#include "RxInternalProducersSingleProducer.h"
#include "RxObservable.h"
#include "RxSubjectsAsyncSubject.h"
#include "RxSubjectsSubject.h"
#include "RxSubjectsSubjectSubscriptionManager.h"
#include "RxSubscriber.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface RxSubjectsAsyncSubject_1 : NSObject < RxFunctionsAction1 > {
 @public
  RxSubjectsSubjectSubscriptionManager *val$state_;
}

- (instancetype)initWithRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)capture$0;

- (void)callWithId:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsAsyncSubject_1)

__attribute__((unused)) static void RxSubjectsAsyncSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsAsyncSubject_1 *self, RxSubjectsSubjectSubscriptionManager *capture$0);

__attribute__((unused)) static RxSubjectsAsyncSubject_1 *new_RxSubjectsAsyncSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsSubjectSubscriptionManager *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsAsyncSubject_1 *create_RxSubjectsAsyncSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsSubjectSubscriptionManager *capture$0);

@implementation RxSubjectsAsyncSubject

+ (RxSubjectsAsyncSubject *)create {
  return RxSubjectsAsyncSubject_create();
}

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
        withRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)state {
  RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(self, onSubscribe, state);
  return self;
}

- (void)onCompleted {
  if (((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_))->active_) {
    id last = JreLoadVolatileId(&lastValue_);
    if (last == nil) {
      last = RxInternalOperatorsNotificationLite_completed();
    }
    {
      IOSObjectArray *a__ = [state_ terminateWithId:last];
      RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        RxSubjectsSubjectSubscriptionManager_SubjectObserver *bo = *b__++;
        if (last == RxInternalOperatorsNotificationLite_completed()) {
          [((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(bo)) onCompleted];
        }
        else {
          [((RxSubscriber *) nil_chk(((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(bo))->actual_)) setProducerWithRxProducer:create_RxInternalProducersSingleProducer_initWithRxSubscriber_withId_(bo->actual_, RxInternalOperatorsNotificationLite_getValueWithId_(last))];
        }
      }
    }
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  if (((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_))->active_) {
    id n = RxInternalOperatorsNotificationLite_errorWithNSException_(e);
    id<JavaUtilList> errors = nil;
    {
      IOSObjectArray *a__ = [state_ terminateWithId:n];
      RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        RxSubjectsSubjectSubscriptionManager_SubjectObserver *bo = *b__++;
        @try {
          [((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(bo)) onErrorWithNSException:e];
        }
        @catch (NSException *e2) {
          if (errors == nil) {
            errors = create_JavaUtilArrayList_init();
          }
          [errors addWithId:e2];
        }
      }
    }
    RxExceptionsExceptions_throwIfAnyWithJavaUtilList_(errors);
  }
}

- (void)onNextWithId:(id)v {
  JreVolatileStrongAssign(&lastValue_, RxInternalOperatorsNotificationLite_nextWithId_(v));
}

- (jboolean)hasObservers {
  return ((IOSObjectArray *) nil_chk([((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_)) observers]))->size_ > 0;
}

- (jboolean)hasValue {
  id v = JreLoadVolatileId(&lastValue_);
  id o = [((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_)) getLatest];
  return !RxInternalOperatorsNotificationLite_isErrorWithId_(o) && RxInternalOperatorsNotificationLite_isNextWithId_(v);
}

- (jboolean)hasThrowable {
  id o = [((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_)) getLatest];
  return RxInternalOperatorsNotificationLite_isErrorWithId_(o);
}

- (jboolean)hasCompleted {
  id o = [((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_)) getLatest];
  return o != nil && !RxInternalOperatorsNotificationLite_isErrorWithId_(o);
}

- (id)getValue {
  id v = JreLoadVolatileId(&lastValue_);
  id o = [((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_)) getLatest];
  if (!RxInternalOperatorsNotificationLite_isErrorWithId_(o) && RxInternalOperatorsNotificationLite_isNextWithId_(v)) {
    return RxInternalOperatorsNotificationLite_getValueWithId_(v);
  }
  return nil;
}

- (NSException *)getThrowable {
  id o = [((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_)) getLatest];
  if (RxInternalOperatorsNotificationLite_isErrorWithId_(o)) {
    return RxInternalOperatorsNotificationLite_getErrorWithId_(o);
  }
  return nil;
}

- (void)__javaClone:(RxSubjectsAsyncSubject *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&lastValue_, &original->lastValue_);
}

- (void)dealloc {
  RELEASE_(state_);
  JreReleaseVolatile(&lastValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubjectsAsyncSubject;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(initWithRxObservable_OnSubscribe:withRxSubjectsSubjectSubscriptionManager:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(hasObservers);
  methods[6].selector = @selector(hasValue);
  methods[7].selector = @selector(hasThrowable);
  methods[8].selector = @selector(hasCompleted);
  methods[9].selector = @selector(getValue);
  methods[10].selector = @selector(getThrowable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LRxSubjectsSubjectSubscriptionManager;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "lastValue_", "LNSObject;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lrx/subjects/AsyncSubject<TT;>;", "LRxObservable_OnSubscribe;LRxSubjectsSubjectSubscriptionManager;", "(Lrx/Observable$OnSubscribe<TT;>;Lrx/subjects/SubjectSubscriptionManager<TT;>;)V", "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "()TT;", "Lrx/subjects/SubjectSubscriptionManager<TT;>;", "<T:Ljava/lang/Object;>Lrx/subjects/Subject<TT;TT;>;" };
  static const J2ObjcClassInfo _RxSubjectsAsyncSubject = { "AsyncSubject", "rx.subjects", ptrTable, methods, fields, 7, 0x11, 11, 2, -1, -1, -1, 10, -1 };
  return &_RxSubjectsAsyncSubject;
}

@end

RxSubjectsAsyncSubject *RxSubjectsAsyncSubject_create() {
  RxSubjectsAsyncSubject_initialize();
  RxSubjectsSubjectSubscriptionManager *state = create_RxSubjectsSubjectSubscriptionManager_init();
  JreStrongAssignAndConsume(&state->onTerminated_, new_RxSubjectsAsyncSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(state));
  return create_RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(state, state);
}

void RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(RxSubjectsAsyncSubject *self, id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state) {
  RxSubjectsSubject_initWithRxObservable_OnSubscribe_(self, onSubscribe);
  JreStrongAssign(&self->state_, state);
}

RxSubjectsAsyncSubject *new_RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state) {
  J2OBJC_NEW_IMPL(RxSubjectsAsyncSubject, initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_, onSubscribe, state)
}

RxSubjectsAsyncSubject *create_RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state) {
  J2OBJC_CREATE_IMPL(RxSubjectsAsyncSubject, initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_, onSubscribe, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsAsyncSubject)

@implementation RxSubjectsAsyncSubject_1

- (instancetype)initWithRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)capture$0 {
  RxSubjectsAsyncSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(self, capture$0);
  return self;
}

- (void)callWithId:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o {
  id v = [((RxSubjectsSubjectSubscriptionManager *) nil_chk(val$state_)) getLatest];
  if (v == nil || RxInternalOperatorsNotificationLite_isCompletedWithId_(v)) {
    [((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(o)) onCompleted];
  }
  else if (RxInternalOperatorsNotificationLite_isErrorWithId_(v)) {
    [((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(o)) onErrorWithNSException:RxInternalOperatorsNotificationLite_getErrorWithId_(v)];
  }
  else {
    [((RxSubscriber *) nil_chk(((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(o))->actual_)) setProducerWithRxProducer:create_RxInternalProducersSingleProducer_initWithRxSubscriber_withId_(o->actual_, RxInternalOperatorsNotificationLite_getValueWithId_(v))];
  }
}

- (void)dealloc {
  RELEASE_(val$state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubjectsSubjectSubscriptionManager:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$state_", "LRxSubjectsSubjectSubscriptionManager;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubjectsSubjectSubscriptionManager_SubjectObserver;", "(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver<TT;>;)V", "Lrx/subjects/SubjectSubscriptionManager<TT;>;", "LRxSubjectsAsyncSubject;", "create", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/subjects/SubjectSubscriptionManager$SubjectObserver<TT;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsAsyncSubject_1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSubjectsAsyncSubject_1;
}

@end

void RxSubjectsAsyncSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsAsyncSubject_1 *self, RxSubjectsSubjectSubscriptionManager *capture$0) {
  JreStrongAssign(&self->val$state_, capture$0);
  NSObject_init(self);
}

RxSubjectsAsyncSubject_1 *new_RxSubjectsAsyncSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsSubjectSubscriptionManager *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsAsyncSubject_1, initWithRxSubjectsSubjectSubscriptionManager_, capture$0)
}

RxSubjectsAsyncSubject_1 *create_RxSubjectsAsyncSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsSubjectSubscriptionManager *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsAsyncSubject_1, initWithRxSubjectsSubjectSubscriptionManager_, capture$0)
}
