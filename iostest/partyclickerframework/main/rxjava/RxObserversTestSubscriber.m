//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxNotification.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscriber.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"

@interface RxObserversTestSubscriber () {
 @public
  id<RxObserver> delegate_;
  id<JavaUtilList> values_;
  id<JavaUtilList> errors_;
  jint completions_;
  JavaUtilConcurrentCountDownLatch *latch_;
  volatile_jint valueCount_;
  volatile_id lastSeenThread_;
}

- (void)assertItemWithId:(id)expected
                 withInt:(jint)i;

@end

J2OBJC_FIELD_SETTER(RxObserversTestSubscriber, delegate_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxObserversTestSubscriber, values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxObserversTestSubscriber, errors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxObserversTestSubscriber, latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_VOLATILE_FIELD_SETTER(RxObserversTestSubscriber, lastSeenThread_, JavaLangThread *)

inline id<RxObserver> RxObserversTestSubscriber_get_INERT();
static id<RxObserver> RxObserversTestSubscriber_INERT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxObserversTestSubscriber, INERT, id<RxObserver>)

__attribute__((unused)) static void RxObserversTestSubscriber_assertItemWithId_withInt_(RxObserversTestSubscriber *self, id expected, jint i);

__attribute__((unused)) static void RxObserversTestSubscriber_assertionErrorWithNSString_(RxObserversTestSubscriber *self, NSString *message);

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriber__Annotations$0();

@interface RxObserversTestSubscriber_1 : NSObject < RxObserver >

- (instancetype)init;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriber_1)

__attribute__((unused)) static void RxObserversTestSubscriber_1_init(RxObserversTestSubscriber_1 *self);

__attribute__((unused)) static RxObserversTestSubscriber_1 *new_RxObserversTestSubscriber_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriber_1 *create_RxObserversTestSubscriber_1_init();

J2OBJC_INITIALIZED_DEFN(RxObserversTestSubscriber)

@implementation RxObserversTestSubscriber

- (instancetype)initWithLong:(jlong)initialRequest {
  RxObserversTestSubscriber_initWithLong_(self, initialRequest);
  return self;
}

- (instancetype)initWithRxObserver:(id<RxObserver>)delegate
                          withLong:(jlong)initialRequest {
  RxObserversTestSubscriber_initWithRxObserver_withLong_(self, delegate, initialRequest);
  return self;
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)delegate {
  RxObserversTestSubscriber_initWithRxSubscriber_(self, delegate);
  return self;
}

- (instancetype)initWithRxObserver:(id<RxObserver>)delegate {
  RxObserversTestSubscriber_initWithRxObserver_(self, delegate);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (RxObserversTestSubscriber *)create {
  return RxObserversTestSubscriber_create();
}

+ (RxObserversTestSubscriber *)createWithLong:(jlong)initialRequest {
  return RxObserversTestSubscriber_createWithLong_(initialRequest);
}

+ (RxObserversTestSubscriber *)createWithRxObserver:(id<RxObserver>)delegate
                                           withLong:(jlong)initialRequest {
  return RxObserversTestSubscriber_createWithRxObserver_withLong_(delegate, initialRequest);
}

+ (RxObserversTestSubscriber *)createWithRxSubscriber:(RxSubscriber *)delegate {
  return RxObserversTestSubscriber_createWithRxSubscriber_(delegate);
}

+ (RxObserversTestSubscriber *)createWithRxObserver:(id<RxObserver>)delegate {
  return RxObserversTestSubscriber_createWithRxObserver_(delegate);
}

- (void)onCompleted {
  @try {
    completions_++;
    JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
    [((id<RxObserver>) nil_chk(delegate_)) onCompleted];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
  }
}

- (id<JavaUtilList>)getOnCompletedEvents {
  jint c = completions_;
  id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_(c != 0 ? c : 1);
  for (jint i = 0; i < c; i++) {
    [result addWithId:RxNotification_createOnCompleted()];
  }
  return result;
}

- (jint)getCompletions {
  return completions_;
}

- (void)onErrorWithNSException:(NSException *)e {
  @try {
    JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:e];
    [((id<RxObserver>) nil_chk(delegate_)) onErrorWithNSException:e];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
  }
}

- (id<JavaUtilList>)getOnErrorEvents {
  return errors_;
}

- (void)onNextWithId:(id)t {
  JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:t];
  JreAssignVolatileInt(&valueCount_, [values_ size]);
  [((id<RxObserver>) nil_chk(delegate_)) onNextWithId:t];
}

- (jint)getValueCount {
  return JreLoadVolatileInt(&valueCount_);
}

- (void)requestMoreWithLong:(jlong)n {
  [self requestWithLong:n];
}

- (id<JavaUtilList>)getOnNextEvents {
  return values_;
}

- (void)assertReceivedOnNextWithJavaUtilList:(id<JavaUtilList>)items {
  if ([((id<JavaUtilList>) nil_chk(values_)) size] != [((id<JavaUtilList>) nil_chk(items)) size]) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I$I$@$@C", @"Number of items does not match. Provided: ", [items size], @"  Actual: ", [values_ size], @".\nProvided values: ", items, @"\nActual values: ", values_, 0x000a));
  }
  for (jint i = 0; i < [items size]; i++) {
    RxObserversTestSubscriber_assertItemWithId_withInt_(self, [items getWithInt:i], i);
  }
}

- (void)assertItemWithId:(id)expected
                 withInt:(jint)i {
  RxObserversTestSubscriber_assertItemWithId_withInt_(self, expected, i);
}

- (jboolean)awaitValueCountWithInt:(jint)expected
                          withLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  while (timeout != 0 && JreLoadVolatileInt(&valueCount_) < expected) {
    @try {
      [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) sleepWithLong:1];
    }
    @catch (JavaLangInterruptedException *e) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Interrupted", e);
    }
    timeout--;
  }
  return JreLoadVolatileInt(&valueCount_) >= expected;
}

- (void)assertTerminalEvent {
  if ([((id<JavaUtilList>) nil_chk(errors_)) size] > 1) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I", @"Too many onError events: ", [errors_ size]));
  }
  if (completions_ > 1) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I", @"Too many onCompleted events: ", completions_));
  }
  if (completions_ == 1 && [errors_ size] == 1) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"Received both an onError and onCompleted. Should be one or the other.");
  }
  if (completions_ == 0 && [errors_ isEmpty]) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"No terminal events received.");
  }
}

- (void)assertUnsubscribed {
  if (![self isUnsubscribed]) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"Not unsubscribed.");
  }
}

- (void)assertNoErrors {
  id<JavaUtilList> onErrorEvents = [self getOnErrorEvents];
  if (![((id<JavaUtilList>) nil_chk(onErrorEvents)) isEmpty]) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"Unexpected onError events");
  }
}

- (void)awaitTerminalEvent {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) await];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Interrupted", e);
  }
}

- (void)awaitTerminalEventWithLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) awaitWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Interrupted", e);
  }
}

- (void)awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:(jlong)timeout
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    jboolean result = [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) awaitWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
    if (!result) {
      [self unsubscribe];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [self unsubscribe];
  }
}

- (JavaLangThread *)getLastSeenThread {
  return JreLoadVolatileId(&lastSeenThread_);
}

- (void)assertCompleted {
  jint s = completions_;
  if (s == 0) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"Not completed!");
  }
  else if (s > 1) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I", @"Completed multiple times: ", s));
  }
}

- (void)assertNotCompleted {
  jint s = completions_;
  if (s == 1) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"Completed!");
  }
  else if (s > 1) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I", @"Completed multiple times: ", s));
  }
}

- (void)assertErrorWithIOSClass:(IOSClass *)clazz {
  id<JavaUtilList> err = errors_;
  if ([((id<JavaUtilList>) nil_chk(err)) isEmpty]) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"No errors");
  }
  else if ([err size] > 1) {
    JavaLangAssertionError *ae = create_JavaLangAssertionError_initWithId_(JreStrcat("$I", @"Multiple errors: ", [err size]));
    [ae initCauseWithNSException:create_RxExceptionsCompositeException_initWithJavaUtilCollection_(err)];
    @throw ae;
  }
  else if (![((IOSClass *) nil_chk(clazz)) isInstance:[err getWithInt:0]]) {
    JavaLangAssertionError *ae = create_JavaLangAssertionError_initWithId_(JreStrcat("$@$@", @"Exceptions differ; expected: ", clazz, @", actual: ", [err getWithInt:0]));
    [ae initCauseWithNSException:[err getWithInt:0]];
    @throw ae;
  }
}

- (void)assertErrorWithNSException:(NSException *)throwable {
  id<JavaUtilList> err = errors_;
  if ([((id<JavaUtilList>) nil_chk(err)) isEmpty]) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"No errors");
  }
  else if ([err size] > 1) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, @"Multiple errors");
  }
  else if (![((NSException *) nil_chk(throwable)) isEqual:[err getWithInt:0]]) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$@$@", @"Exceptions differ; expected: ", throwable, @", actual: ", [err getWithInt:0]));
  }
}

- (void)assertNoTerminalEvent {
  id<JavaUtilList> err = errors_;
  jint s = completions_;
  if (![((id<JavaUtilList>) nil_chk(err)) isEmpty] || s > 0) {
    if ([err isEmpty]) {
      RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I$I$", @"Found ", [err size], @" errors and ", s, @" completion events instead of none"));
    }
    else if ([err size] == 1) {
      RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I$I$", @"Found ", [err size], @" errors and ", s, @" completion events instead of none"));
    }
    else {
      RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I$I$", @"Found ", [err size], @" errors and ", s, @" completion events instead of none"));
    }
  }
}

- (void)assertNoValues {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  if (s != 0) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I", @"No onNext events expected yet some received: ", s));
  }
}

- (void)assertValueCountWithInt:(jint)count {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  if (s != count) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I$I", @"Number of onNext events differ; expected: ", count, @", actual: ", s));
  }
}

- (void)assertValuesWithNSObjectArray:(IOSObjectArray *)values {
  [self assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(values)];
}

- (void)assertValueWithId:(id)value {
  [self assertReceivedOnNextWithJavaUtilList:JavaUtilCollections_singletonListWithId_(value)];
}

- (void)assertionErrorWithNSString:(NSString *)message {
  RxObserversTestSubscriber_assertionErrorWithNSString_(self, message);
}

- (void)assertValuesAndClearWithId:(id)expectedFirstValue
                 withNSObjectArray:(IOSObjectArray *)expectedRestValues {
  jint n = 1 + ((IOSObjectArray *) nil_chk(expectedRestValues))->size_;
  [self assertValueCountWithInt:n];
  RxObserversTestSubscriber_assertItemWithId_withInt_(self, expectedFirstValue, 0);
  for (jint i = 0; i < expectedRestValues->size_; i++) {
    RxObserversTestSubscriber_assertItemWithId_withInt_(self, IOSObjectArray_Get(expectedRestValues, i), i + 1);
  }
  [((id<JavaUtilList>) nil_chk(values_)) clear];
}

- (void)__javaClone:(RxObserversTestSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&lastSeenThread_, &original->lastSeenThread_);
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(values_);
  RELEASE_(errors_);
  RELEASE_(latch_);
  JreReleaseVolatile(&lastSeenThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObserversTestSubscriber;", 0x9, -1, -1, -1, 7, -1, -1 },
    { NULL, "LRxObserversTestSubscriber;", 0x9, 8, 0, -1, 9, -1, -1 },
    { NULL, "LRxObserversTestSubscriber;", 0x9, 8, 1, -1, 10, -1, -1 },
    { NULL, "LRxObserversTestSubscriber;", 0x9, 8, 3, -1, 11, -1, -1 },
    { NULL, "LRxObserversTestSubscriber;", 0x9, 8, 5, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 13, 14, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, 28, -1, -1 },
    { NULL, "Z", 0x11, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 32, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x1, 34, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 39, 40, -1, 41, -1, -1 },
    { NULL, "V", 0x1, 42, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x10, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x91, 45, 46, -1, 47, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(initWithRxObserver:withLong:);
  methods[2].selector = @selector(initWithRxSubscriber:);
  methods[3].selector = @selector(initWithRxObserver:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(create);
  methods[6].selector = @selector(createWithLong:);
  methods[7].selector = @selector(createWithRxObserver:withLong:);
  methods[8].selector = @selector(createWithRxSubscriber:);
  methods[9].selector = @selector(createWithRxObserver:);
  methods[10].selector = @selector(onCompleted);
  methods[11].selector = @selector(getOnCompletedEvents);
  methods[12].selector = @selector(getCompletions);
  methods[13].selector = @selector(onErrorWithNSException:);
  methods[14].selector = @selector(getOnErrorEvents);
  methods[15].selector = @selector(onNextWithId:);
  methods[16].selector = @selector(getValueCount);
  methods[17].selector = @selector(requestMoreWithLong:);
  methods[18].selector = @selector(getOnNextEvents);
  methods[19].selector = @selector(assertReceivedOnNextWithJavaUtilList:);
  methods[20].selector = @selector(assertItemWithId:withInt:);
  methods[21].selector = @selector(awaitValueCountWithInt:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[22].selector = @selector(assertTerminalEvent);
  methods[23].selector = @selector(assertUnsubscribed);
  methods[24].selector = @selector(assertNoErrors);
  methods[25].selector = @selector(awaitTerminalEvent);
  methods[26].selector = @selector(awaitTerminalEventWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[27].selector = @selector(awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[28].selector = @selector(getLastSeenThread);
  methods[29].selector = @selector(assertCompleted);
  methods[30].selector = @selector(assertNotCompleted);
  methods[31].selector = @selector(assertErrorWithIOSClass:);
  methods[32].selector = @selector(assertErrorWithNSException:);
  methods[33].selector = @selector(assertNoTerminalEvent);
  methods[34].selector = @selector(assertNoValues);
  methods[35].selector = @selector(assertValueCountWithInt:);
  methods[36].selector = @selector(assertValuesWithNSObjectArray:);
  methods[37].selector = @selector(assertValueWithId:);
  methods[38].selector = @selector(assertionErrorWithNSString:);
  methods[39].selector = @selector(assertValuesAndClearWithId:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LRxObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 48, -1 },
    { "values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "errors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 50, -1 },
    { "completions_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "valueCount_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "lastSeenThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "INERT", "LRxObserver;", .constantValue.asLong = 0, 0x1a, -1, 51, 52, -1 },
  };
  static const void *ptrTable[] = { "J", "LRxObserver;J", "(Lrx/Observer<TT;>;J)V", "LRxSubscriber;", "(Lrx/Subscriber<TT;>;)V", "LRxObserver;", "(Lrx/Observer<TT;>;)V", "<T:Ljava/lang/Object;>()Lrx/observers/TestSubscriber<TT;>;", "create", "<T:Ljava/lang/Object;>(J)Lrx/observers/TestSubscriber<TT;>;", "<T:Ljava/lang/Object;>(Lrx/Observer<TT;>;J)Lrx/observers/TestSubscriber<TT;>;", "<T:Ljava/lang/Object;>(Lrx/Subscriber<TT;>;)Lrx/observers/TestSubscriber<TT;>;", "<T:Ljava/lang/Object;>(Lrx/Observer<TT;>;)Lrx/observers/TestSubscriber<TT;>;", "()Ljava/util/List<Lrx/Notification<TT;>;>;", (void *)&RxObserversTestSubscriber__Annotations$0, "onError", "LNSException;", "()Ljava/util/List<Ljava/lang/Throwable;>;", "onNext", "LNSObject;", "(TT;)V", "requestMore", "()Ljava/util/List<TT;>;", "assertReceivedOnNext", "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "assertItem", "LNSObject;I", "(TT;I)V", "awaitValueCount", "IJLJavaUtilConcurrentTimeUnit;", "awaitTerminalEvent", "JLJavaUtilConcurrentTimeUnit;", "awaitTerminalEventAndUnsubscribeOnTimeout", "assertError", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)V", "assertValueCount", "I", "assertValues", "[LNSObject;", "([TT;)V", "assertValue", "assertionError", "LNSString;", "assertValuesAndClear", "LNSObject;[LNSObject;", "(TT;[TT;)V", "Lrx/Observer<TT;>;", "Ljava/util/List<TT;>;", "Ljava/util/List<Ljava/lang/Throwable;>;", &RxObserversTestSubscriber_INERT, "Lrx/Observer<Ljava/lang/Object;>;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxObserversTestSubscriber = { "TestSubscriber", "rx.observers", ptrTable, methods, fields, 7, 0x1, 40, 8, -1, -1, -1, 53, -1 };
  return &_RxObserversTestSubscriber;
}

+ (void)initialize {
  if (self == [RxObserversTestSubscriber class]) {
    JreStrongAssignAndConsume(&RxObserversTestSubscriber_INERT, new_RxObserversTestSubscriber_1_init());
    J2OBJC_SET_INITIALIZED(RxObserversTestSubscriber)
  }
}

@end

void RxObserversTestSubscriber_initWithLong_(RxObserversTestSubscriber *self, jlong initialRequest) {
  RxObserversTestSubscriber_initWithRxObserver_withLong_(self, RxObserversTestSubscriber_INERT, initialRequest);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithLong_(jlong initialRequest) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, initWithLong_, initialRequest)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithLong_(jlong initialRequest) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, initWithLong_, initialRequest)
}

void RxObserversTestSubscriber_initWithRxObserver_withLong_(RxObserversTestSubscriber *self, id<RxObserver> delegate, jlong initialRequest) {
  RxSubscriber_init(self);
  JreStrongAssignAndConsume(&self->latch_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
  if (delegate == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  JreStrongAssign(&self->delegate_, delegate);
  if (initialRequest >= 0LL) {
    [self requestWithLong:initialRequest];
  }
  JreStrongAssignAndConsume(&self->values_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->errors_, new_JavaUtilArrayList_init());
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, initWithRxObserver_withLong_, delegate, initialRequest)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, initWithRxObserver_withLong_, delegate, initialRequest)
}

void RxObserversTestSubscriber_initWithRxSubscriber_(RxObserversTestSubscriber *self, RxSubscriber *delegate) {
  RxObserversTestSubscriber_initWithRxObserver_withLong_(self, delegate, -1);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxSubscriber_(RxSubscriber *delegate) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, initWithRxSubscriber_, delegate)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxSubscriber_(RxSubscriber *delegate) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, initWithRxSubscriber_, delegate)
}

void RxObserversTestSubscriber_initWithRxObserver_(RxObserversTestSubscriber *self, id<RxObserver> delegate) {
  RxObserversTestSubscriber_initWithRxObserver_withLong_(self, delegate, -1);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxObserver_(id<RxObserver> delegate) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, initWithRxObserver_, delegate)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxObserver_(id<RxObserver> delegate) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, initWithRxObserver_, delegate)
}

void RxObserversTestSubscriber_init(RxObserversTestSubscriber *self) {
  RxObserversTestSubscriber_initWithLong_(self, -1);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_init() {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, init)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, init)
}

RxObserversTestSubscriber *RxObserversTestSubscriber_create() {
  RxObserversTestSubscriber_initialize();
  return create_RxObserversTestSubscriber_init();
}

RxObserversTestSubscriber *RxObserversTestSubscriber_createWithLong_(jlong initialRequest) {
  RxObserversTestSubscriber_initialize();
  return create_RxObserversTestSubscriber_initWithLong_(initialRequest);
}

RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest) {
  RxObserversTestSubscriber_initialize();
  return create_RxObserversTestSubscriber_initWithRxObserver_withLong_(delegate, initialRequest);
}

RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxSubscriber_(RxSubscriber *delegate) {
  RxObserversTestSubscriber_initialize();
  return create_RxObserversTestSubscriber_initWithRxSubscriber_(delegate);
}

RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxObserver_(id<RxObserver> delegate) {
  RxObserversTestSubscriber_initialize();
  return create_RxObserversTestSubscriber_initWithRxObserver_(delegate);
}

void RxObserversTestSubscriber_assertItemWithId_withInt_(RxObserversTestSubscriber *self, id expected, jint i) {
  id actual = [((id<JavaUtilList>) nil_chk(self->values_)) getWithInt:i];
  if (expected == nil) {
    if (actual != nil) {
      RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I$@$", @"Value at index: ", i, @" expected to be [null] but was: [", actual, @"]\n"));
    }
  }
  else if (![expected isEqual:actual]) {
    RxObserversTestSubscriber_assertionErrorWithNSString_(self, JreStrcat("$I$@$$$@$$$", @"Value at index: ", i, @" expected to be [", expected, @"] (", [[expected java_getClass] getSimpleName], @") but was: [", actual, @"] (", (actual != nil ? [[actual java_getClass] getSimpleName] : @"null"), @")\n"));
  }
}

void RxObserversTestSubscriber_assertionErrorWithNSString_(RxObserversTestSubscriber *self, NSString *message) {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(message)) java_length] + 32);
  [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:message])) appendWithNSString:@" ("];
  jint c = self->completions_;
  [((JavaLangStringBuilder *) nil_chk([b appendWithInt:c])) appendWithNSString:@" completion"];
  if (c != 1) {
    [b appendWithChar:'s'];
  }
  [b appendWithChar:')'];
  if (![((id<JavaUtilList>) nil_chk(self->errors_)) isEmpty]) {
    jint size = [self->errors_ size];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@" (+"])) appendWithInt:size])) appendWithNSString:@" error"];
    if (size != 1) {
      [b appendWithChar:'s'];
    }
    [b appendWithChar:')'];
  }
  JavaLangAssertionError *ae = create_JavaLangAssertionError_initWithId_([b description]);
  if (![self->errors_ isEmpty]) {
    if ([self->errors_ size] == 1) {
      [ae initCauseWithNSException:[self->errors_ getWithInt:0]];
    }
    else {
      [ae initCauseWithNSException:create_RxExceptionsCompositeException_initWithJavaUtilCollection_(self->errors_)];
    }
  }
  @throw ae;
}

IOSObjectArray *RxObserversTestSubscriber__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestSubscriber)

@implementation RxObserversTestSubscriber_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriber_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)t {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxObserversTestSubscriber;", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObserversTestSubscriber_1 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 4, -1, -1, 5, -1 };
  return &_RxObserversTestSubscriber_1;
}

@end

void RxObserversTestSubscriber_1_init(RxObserversTestSubscriber_1 *self) {
  NSObject_init(self);
}

RxObserversTestSubscriber_1 *new_RxObserversTestSubscriber_1_init() {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber_1, init)
}

RxObserversTestSubscriber_1 *create_RxObserversTestSubscriber_1_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber_1, init)
}
