//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilAtomicSpscExactAtomicArrayQueue")
#ifdef RESTRICT_RxInternalUtilAtomicSpscExactAtomicArrayQueue
#define INCLUDE_ALL_RxInternalUtilAtomicSpscExactAtomicArrayQueue 0
#else
#define INCLUDE_ALL_RxInternalUtilAtomicSpscExactAtomicArrayQueue 1
#endif
#undef RESTRICT_RxInternalUtilAtomicSpscExactAtomicArrayQueue

#if !defined (RxInternalUtilAtomicSpscExactAtomicArrayQueue_) && (INCLUDE_ALL_RxInternalUtilAtomicSpscExactAtomicArrayQueue || defined(INCLUDE_RxInternalUtilAtomicSpscExactAtomicArrayQueue))
#define RxInternalUtilAtomicSpscExactAtomicArrayQueue_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReferenceArray 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReferenceArray 1
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

#define RESTRICT_JavaUtilQueue 1
#define INCLUDE_JavaUtilQueue 1
#include "java/util/Queue.h"

@class IOSObjectArray;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;
@protocol JavaUtilStreamStream;

@interface RxInternalUtilAtomicSpscExactAtomicArrayQueue : JavaUtilConcurrentAtomicAtomicReferenceArray < JavaUtilQueue > {
 @public
  jint mask_;
  jint capacitySkip_;
  JavaUtilConcurrentAtomicAtomicLong *producerIndex_;
  JavaUtilConcurrentAtomicAtomicLong *consumerIndex_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (jboolean)addWithId:(id)e;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (id)element;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)offerWithId:(id)value;

- (id)peek;

- (id)poll;

- (id)remove;

- (jboolean)removeWithId:(id)o;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilAtomicSpscExactAtomicArrayQueue)

J2OBJC_FIELD_SETTER(RxInternalUtilAtomicSpscExactAtomicArrayQueue, producerIndex_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalUtilAtomicSpscExactAtomicArrayQueue, consumerIndex_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(RxInternalUtilAtomicSpscExactAtomicArrayQueue *self, jint capacity);

FOUNDATION_EXPORT RxInternalUtilAtomicSpscExactAtomicArrayQueue *new_RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilAtomicSpscExactAtomicArrayQueue *create_RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilAtomicSpscExactAtomicArrayQueue)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilAtomicSpscExactAtomicArrayQueue")
