//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue.h"
#include "RxInternalUtilUnsafePow2.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"
#include "java/util/stream/Stream.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue ()

- (jboolean)writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                                  withId:(id)e
                                                                withLong:(jlong)index
                                                                 withInt:(jint)offset;

- (void)resizeWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)oldBuffer
                                                      withLong:(jlong)currIndex
                                                       withInt:(jint)offset
                                                        withId:(id)e
                                                      withLong:(jlong)mask;

- (void)soNextWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)curr
              withJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)next;

- (JavaUtilConcurrentAtomicAtomicReferenceArray *)lvNextWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)curr;

- (id)newBufferPollWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)nextBuffer
                                                           withLong:(jlong)index
                                                            withInt:(jint)mask OBJC_METHOD_FAMILY_NONE;

- (id)newBufferPeekWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)nextBuffer
                                                           withLong:(jlong)index
                                                            withInt:(jint)mask OBJC_METHOD_FAMILY_NONE;

- (void)adjustLookAheadStepWithInt:(jint)capacity;

- (jlong)lvProducerIndex;

- (jlong)lvConsumerIndex;

- (jlong)lpProducerIndex;

- (jlong)lpConsumerIndex;

- (void)soProducerIndexWithLong:(jlong)v;

- (void)soConsumerIndexWithLong:(jlong)v;

+ (jint)calcWrappedOffsetWithLong:(jlong)index
                          withInt:(jint)mask;

+ (jint)calcDirectOffsetWithInt:(jint)index;

+ (void)soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                          withInt:(jint)offset
                                                           withId:(id)e;

+ (id)lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                        withInt:(jint)offset;

@end

inline id RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_get_HAS_NEXT();
static id RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_HAS_NEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue, HAS_NEXT, id)

__attribute__((unused)) static jboolean RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray_withId_withLong_withInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *buffer, id e, jlong index, jint offset);

__attribute__((unused)) static void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_resizeWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_withId_withLong_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *oldBuffer, jlong currIndex, jint offset, id e, jlong mask);

__attribute__((unused)) static void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_withJavaUtilConcurrentAtomicAtomicReferenceArray_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *curr, JavaUtilConcurrentAtomicAtomicReferenceArray *next);

__attribute__((unused)) static JavaUtilConcurrentAtomicAtomicReferenceArray *RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *curr);

__attribute__((unused)) static id RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_newBufferPollWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *nextBuffer, jlong index, jint mask);

__attribute__((unused)) static id RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_newBufferPeekWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *nextBuffer, jlong index, jint mask);

__attribute__((unused)) static void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_adjustLookAheadStepWithInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, jint capacity);

__attribute__((unused)) static jlong RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvProducerIndex(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self);

__attribute__((unused)) static jlong RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvConsumerIndex(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self);

__attribute__((unused)) static jlong RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpProducerIndex(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self);

__attribute__((unused)) static jlong RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpConsumerIndex(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self);

__attribute__((unused)) static void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soProducerIndexWithLong_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, jlong v);

__attribute__((unused)) static void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soConsumerIndexWithLong_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, jlong v);

__attribute__((unused)) static jint RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(jlong index, jint mask);

__attribute__((unused)) static jint RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcDirectOffsetWithInt_(jint index);

__attribute__((unused)) static void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(JavaUtilConcurrentAtomicAtomicReferenceArray *buffer, jint offset, id e);

__attribute__((unused)) static id RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(JavaUtilConcurrentAtomicAtomicReferenceArray *buffer, jint offset);

J2OBJC_INITIALIZED_DEFN(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue)

jint RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_MAX_LOOK_AHEAD_STEP;

@implementation RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue

- (instancetype)initWithInt:(jint)bufferSize {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(self, bufferSize);
  return self;
}

- (jboolean)offerWithId:(id)e {
  if (e == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  JavaUtilConcurrentAtomicAtomicReferenceArray *buffer = producerBuffer_;
  jlong index = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpProducerIndex(self);
  jint mask = producerMask_;
  jint offset = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(index, mask);
  if (index < producerLookAhead_) {
    return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray_withId_withLong_withInt_(self, buffer, e, index, offset);
  }
  else {
    jint lookAheadStep = producerLookAheadStep_;
    jint lookAheadElementOffset = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(index + lookAheadStep, mask);
    if (nil == RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(buffer, lookAheadElementOffset)) {
      producerLookAhead_ = index + lookAheadStep - 1;
      return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray_withId_withLong_withInt_(self, buffer, e, index, offset);
    }
    else if (nil != RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(buffer, RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(index + 1, mask))) {
      return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray_withId_withLong_withInt_(self, buffer, e, index, offset);
    }
    else {
      RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_resizeWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_withId_withLong_(self, buffer, index, offset, e, mask);
      return true;
    }
  }
}

- (jboolean)writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                                  withId:(id)e
                                                                withLong:(jlong)index
                                                                 withInt:(jint)offset {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray_withId_withLong_withInt_(self, buffer, e, index, offset);
}

- (void)resizeWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)oldBuffer
                                                      withLong:(jlong)currIndex
                                                       withInt:(jint)offset
                                                        withId:(id)e
                                                      withLong:(jlong)mask {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_resizeWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_withId_withLong_(self, oldBuffer, currIndex, offset, e, mask);
}

- (void)soNextWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)curr
              withJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)next {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_withJavaUtilConcurrentAtomicAtomicReferenceArray_(self, curr, next);
}

- (JavaUtilConcurrentAtomicAtomicReferenceArray *)lvNextWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)curr {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_(self, curr);
}

- (id)poll {
  JavaUtilConcurrentAtomicAtomicReferenceArray *buffer = consumerBuffer_;
  jlong index = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpConsumerIndex(self);
  jint mask = consumerMask_;
  jint offset = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(index, mask);
  id e = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(buffer, offset);
  jboolean isNextBuffer = e == RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_HAS_NEXT;
  if (nil != e && !isNextBuffer) {
    RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soConsumerIndexWithLong_(self, index + 1);
    RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(buffer, offset, nil);
    return e;
  }
  else if (isNextBuffer) {
    return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_newBufferPollWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_(self, RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_(self, buffer), index, mask);
  }
  return nil;
}

- (id)newBufferPollWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)nextBuffer
                                                           withLong:(jlong)index
                                                            withInt:(jint)mask {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_newBufferPollWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_(self, nextBuffer, index, mask);
}

- (id)peek {
  JavaUtilConcurrentAtomicAtomicReferenceArray *buffer = consumerBuffer_;
  jlong index = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpConsumerIndex(self);
  jint mask = consumerMask_;
  jint offset = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(index, mask);
  id e = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(buffer, offset);
  if (e == RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_HAS_NEXT) {
    return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_newBufferPeekWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_(self, RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_(self, buffer), index, mask);
  }
  return e;
}

- (void)clear {
  while ([self poll] != nil || ![self isEmpty]) ;
}

- (id)newBufferPeekWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)nextBuffer
                                                           withLong:(jlong)index
                                                            withInt:(jint)mask {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_newBufferPeekWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_(self, nextBuffer, index, mask);
}

- (jint)size {
  jlong after = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvConsumerIndex(self);
  while (true) {
    jlong before = after;
    jlong currentProducerIndex = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvProducerIndex(self);
    after = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvConsumerIndex(self);
    if (before == after) {
      return (jint) (currentProducerIndex - after);
    }
  }
}

- (jboolean)isEmpty {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvProducerIndex(self) == RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvConsumerIndex(self);
}

- (void)adjustLookAheadStepWithInt:(jint)capacity {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_adjustLookAheadStepWithInt_(self, capacity);
}

- (jlong)lvProducerIndex {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvProducerIndex(self);
}

- (jlong)lvConsumerIndex {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvConsumerIndex(self);
}

- (jlong)lpProducerIndex {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpProducerIndex(self);
}

- (jlong)lpConsumerIndex {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpConsumerIndex(self);
}

- (void)soProducerIndexWithLong:(jlong)v {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soProducerIndexWithLong_(self, v);
}

- (void)soConsumerIndexWithLong:(jlong)v {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soConsumerIndexWithLong_(self, v);
}

+ (jint)calcWrappedOffsetWithLong:(jlong)index
                          withInt:(jint)mask {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(index, mask);
}

+ (jint)calcDirectOffsetWithInt:(jint)index {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcDirectOffsetWithInt_(index);
}

+ (void)soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                          withInt:(jint)offset
                                                           withId:(id)e {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(buffer, offset, e);
}

+ (id)lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                        withInt:(jint)offset {
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(buffer, offset);
}

- (id<JavaUtilIterator>)iterator {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)containsWithId:(id)o {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)toArray {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)removeWithId:(id)o {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)addWithId:(id)e {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)element {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilCollection_removeIfWithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilCollection_spliterator(self);
}

- (id<JavaUtilStreamStream>)stream {
  return JavaUtilCollection_stream(self);
}

- (id<JavaUtilStreamStream>)parallelStream {
  return JavaUtilCollection_parallelStream(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(producerIndex_);
  RELEASE_(producerBuffer_);
  RELEASE_(consumerBuffer_);
  RELEASE_(consumerIndex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilConcurrentAtomicAtomicReferenceArray;", 0x2, 13, 14, -1, 15, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LNSObject;", 0x2, 17, 18, -1, 19, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 20, 18, -1, 19, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 23, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 27, 0, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 29, -1, 30, -1, -1 },
    { NULL, "LNSObject;", 0xa, 31, 32, -1, 33, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "Z", 0x1, 35, 2, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 36, 37, -1, 38, -1, -1 },
    { NULL, "Z", 0x1, 39, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 40, 41, -1, 42, -1, -1 },
    { NULL, "Z", 0x1, 43, 41, -1, 44, -1, -1 },
    { NULL, "Z", 0x1, 45, 41, -1, 42, -1, -1 },
    { NULL, "Z", 0x1, 46, 41, -1, 42, -1, -1 },
    { NULL, "Z", 0x1, 47, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(offerWithId:);
  methods[2].selector = @selector(writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray:withId:withLong:withInt:);
  methods[3].selector = @selector(resizeWithJavaUtilConcurrentAtomicAtomicReferenceArray:withLong:withInt:withId:withLong:);
  methods[4].selector = @selector(soNextWithJavaUtilConcurrentAtomicAtomicReferenceArray:withJavaUtilConcurrentAtomicAtomicReferenceArray:);
  methods[5].selector = @selector(lvNextWithJavaUtilConcurrentAtomicAtomicReferenceArray:);
  methods[6].selector = @selector(poll);
  methods[7].selector = @selector(newBufferPollWithJavaUtilConcurrentAtomicAtomicReferenceArray:withLong:withInt:);
  methods[8].selector = @selector(peek);
  methods[9].selector = @selector(clear);
  methods[10].selector = @selector(newBufferPeekWithJavaUtilConcurrentAtomicAtomicReferenceArray:withLong:withInt:);
  methods[11].selector = @selector(size);
  methods[12].selector = @selector(isEmpty);
  methods[13].selector = @selector(adjustLookAheadStepWithInt:);
  methods[14].selector = @selector(lvProducerIndex);
  methods[15].selector = @selector(lvConsumerIndex);
  methods[16].selector = @selector(lpProducerIndex);
  methods[17].selector = @selector(lpConsumerIndex);
  methods[18].selector = @selector(soProducerIndexWithLong:);
  methods[19].selector = @selector(soConsumerIndexWithLong:);
  methods[20].selector = @selector(calcWrappedOffsetWithLong:withInt:);
  methods[21].selector = @selector(calcDirectOffsetWithInt:);
  methods[22].selector = @selector(soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:withInt:withId:);
  methods[23].selector = @selector(lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:withInt:);
  methods[24].selector = @selector(iterator);
  methods[25].selector = @selector(containsWithId:);
  methods[26].selector = @selector(toArray);
  methods[27].selector = @selector(toArrayWithNSObjectArray:);
  methods[28].selector = @selector(removeWithId:);
  methods[29].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[30].selector = @selector(addAllWithJavaUtilCollection:);
  methods[31].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[32].selector = @selector(retainAllWithJavaUtilCollection:);
  methods[33].selector = @selector(addWithId:);
  methods[34].selector = @selector(remove);
  methods[35].selector = @selector(element);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_LOOK_AHEAD_STEP", "I", .constantValue.asLong = 0, 0x18, -1, 48, -1, -1 },
    { "producerIndex_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "producerLookAheadStep_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producerLookAhead_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producerMask_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producerBuffer_", "LJavaUtilConcurrentAtomicAtomicReferenceArray;", .constantValue.asLong = 0, 0x0, -1, -1, 49, -1 },
    { "consumerMask_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "consumerBuffer_", "LJavaUtilConcurrentAtomicAtomicReferenceArray;", .constantValue.asLong = 0, 0x0, -1, -1, 49, -1 },
    { "consumerIndex_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "HAS_NEXT", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "offer", "LNSObject;", "(TT;)Z", "writeToQueue", "LJavaUtilConcurrentAtomicAtomicReferenceArray;LNSObject;JI", "(Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;TT;JI)Z", "resize", "LJavaUtilConcurrentAtomicAtomicReferenceArray;JILNSObject;J", "(Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;JITT;J)V", "soNext", "LJavaUtilConcurrentAtomicAtomicReferenceArray;LJavaUtilConcurrentAtomicAtomicReferenceArray;", "(Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;)V", "lvNext", "LJavaUtilConcurrentAtomicAtomicReferenceArray;", "(Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;)Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;", "()TT;", "newBufferPoll", "LJavaUtilConcurrentAtomicAtomicReferenceArray;JI", "(Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;JI)TT;", "newBufferPeek", "adjustLookAheadStep", "soProducerIndex", "J", "soConsumerIndex", "calcWrappedOffset", "JI", "calcDirectOffset", "soElement", "LJavaUtilConcurrentAtomicAtomicReferenceArray;ILNSObject;", "(Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;ILjava/lang/Object;)V", "lvElement", "LJavaUtilConcurrentAtomicAtomicReferenceArray;I", "<E:Ljava/lang/Object;>(Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;I)Ljava/lang/Object;", "()Ljava/util/Iterator<TT;>;", "contains", "toArray", "[LNSObject;", "<E:Ljava/lang/Object;>([TE;)[TE;", "remove", "containsAll", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)Z", "addAll", "(Ljava/util/Collection<+TT;>;)Z", "removeAll", "retainAll", "add", &RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_MAX_LOOK_AHEAD_STEP, "Ljava/util/concurrent/atomic/AtomicReferenceArray<Ljava/lang/Object;>;", &RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_HAS_NEXT, "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Queue<TT;>;" };
  static const J2ObjcClassInfo _RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue = { "SpscUnboundedAtomicArrayQueue", "rx.internal.util.atomic", ptrTable, methods, fields, 7, 0x11, 36, 10, -1, -1, -1, 51, -1 };
  return &_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue;
}

+ (void)initialize {
  if (self == [RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue class]) {
    RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_MAX_LOOK_AHEAD_STEP = [((JavaLangInteger *) nil_chk(JavaLangInteger_getIntegerWithNSString_withInt_(@"jctools.spsc.max.lookahead.step", 4096))) intValue];
    JreStrongAssignAndConsume(&RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_HAS_NEXT, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue)
  }
}

@end

void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, jint bufferSize) {
  NSObject_init(self);
  jint p2capacity = RxInternalUtilUnsafePow2_roundToPowerOfTwoWithInt_(JavaLangMath_maxWithInt_withInt_(8, bufferSize));
  jint mask = p2capacity - 1;
  JreStrongAssignAndConsume(&self->producerIndex_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->consumerIndex_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JavaUtilConcurrentAtomicAtomicReferenceArray *buffer = create_JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(p2capacity + 1);
  JreStrongAssign(&self->producerBuffer_, buffer);
  self->producerMask_ = mask;
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_adjustLookAheadStepWithInt_(self, p2capacity);
  JreStrongAssign(&self->consumerBuffer_, buffer);
  self->consumerMask_ = mask;
  self->producerLookAhead_ = mask - 1;
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soProducerIndexWithLong_(self, 0LL);
}

RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *new_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(jint bufferSize) {
  J2OBJC_NEW_IMPL(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue, initWithInt_, bufferSize)
}

RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *create_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(jint bufferSize) {
  J2OBJC_CREATE_IMPL(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue, initWithInt_, bufferSize)
}

jboolean RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_writeToQueueWithJavaUtilConcurrentAtomicAtomicReferenceArray_withId_withLong_withInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *buffer, id e, jlong index, jint offset) {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soProducerIndexWithLong_(self, index + 1);
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(buffer, offset, e);
  return true;
}

void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_resizeWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_withId_withLong_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *oldBuffer, jlong currIndex, jint offset, id e, jlong mask) {
  jint capacity = [((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(oldBuffer)) length];
  JavaUtilConcurrentAtomicAtomicReferenceArray *newBuffer = create_JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(capacity);
  JreStrongAssign(&self->producerBuffer_, newBuffer);
  self->producerLookAhead_ = currIndex + mask - 1;
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soProducerIndexWithLong_(self, currIndex + 1);
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(newBuffer, offset, e);
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_withJavaUtilConcurrentAtomicAtomicReferenceArray_(self, oldBuffer, newBuffer);
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(oldBuffer, offset, RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_HAS_NEXT);
}

void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_withJavaUtilConcurrentAtomicAtomicReferenceArray_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *curr, JavaUtilConcurrentAtomicAtomicReferenceArray *next) {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(curr, RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcDirectOffsetWithInt_([((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(curr)) length] - 1), next);
}

JavaUtilConcurrentAtomicAtomicReferenceArray *RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvNextWithJavaUtilConcurrentAtomicAtomicReferenceArray_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *curr) {
  return (JavaUtilConcurrentAtomicAtomicReferenceArray *) cast_chk(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(curr, RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcDirectOffsetWithInt_([((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(curr)) length] - 1)), [JavaUtilConcurrentAtomicAtomicReferenceArray class]);
}

id RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_newBufferPollWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *nextBuffer, jlong index, jint mask) {
  JreStrongAssign(&self->consumerBuffer_, nextBuffer);
  jint offsetInNew = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(index, mask);
  id n = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(nextBuffer, offsetInNew);
  if (nil == n) {
    return nil;
  }
  else {
    RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soConsumerIndexWithLong_(self, index + 1);
    RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(nextBuffer, offsetInNew, nil);
    return n;
  }
}

id RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_newBufferPeekWithJavaUtilConcurrentAtomicAtomicReferenceArray_withLong_withInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, JavaUtilConcurrentAtomicAtomicReferenceArray *nextBuffer, jlong index, jint mask) {
  JreStrongAssign(&self->consumerBuffer_, nextBuffer);
  jint offsetInNew = RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(index, mask);
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(nextBuffer, offsetInNew);
}

void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_adjustLookAheadStepWithInt_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, jint capacity) {
  self->producerLookAheadStep_ = JavaLangMath_minWithInt_withInt_(capacity / 4, RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_MAX_LOOK_AHEAD_STEP);
}

jlong RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvProducerIndex(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self) {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->producerIndex_)) get];
}

jlong RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvConsumerIndex(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self) {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->consumerIndex_)) get];
}

jlong RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpProducerIndex(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self) {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->producerIndex_)) get];
}

jlong RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lpConsumerIndex(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self) {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->consumerIndex_)) get];
}

void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soProducerIndexWithLong_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, jlong v) {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->producerIndex_)) lazySetWithLong:v];
}

void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soConsumerIndexWithLong_(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *self, jlong v) {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->consumerIndex_)) lazySetWithLong:v];
}

jint RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcWrappedOffsetWithLong_withInt_(jlong index, jint mask) {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initialize();
  return RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcDirectOffsetWithInt_((jint) index & mask);
}

jint RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_calcDirectOffsetWithInt_(jint index) {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initialize();
  return index;
}

void RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_withId_(JavaUtilConcurrentAtomicAtomicReferenceArray *buffer, jint offset, id e) {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initialize();
  [((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(buffer)) lazySetWithInt:offset withId:e];
}

id RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray_withInt_(JavaUtilConcurrentAtomicAtomicReferenceArray *buffer, jint offset) {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initialize();
  return [((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(buffer)) getWithInt:offset];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue)
