//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSchedulersSchedulers")
#ifdef RESTRICT_RxSchedulersSchedulers
#define INCLUDE_ALL_RxSchedulersSchedulers 0
#else
#define INCLUDE_ALL_RxSchedulersSchedulers 1
#endif
#undef RESTRICT_RxSchedulersSchedulers

#if !defined (RxSchedulersSchedulers_) && (INCLUDE_ALL_RxSchedulersSchedulers || defined(INCLUDE_RxSchedulersSchedulers))
#define RxSchedulersSchedulers_

@class RxScheduler;
@class RxSchedulersTestScheduler;
@protocol JavaUtilConcurrentExecutor;

@interface RxSchedulersSchedulers : NSObject

#pragma mark Public

+ (RxScheduler *)computation;

+ (RxScheduler *)fromWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (RxScheduler *)immediate;

+ (RxScheduler *)io;

+ (RxScheduler *)newThread OBJC_METHOD_FAMILY_NONE;

+ (void)reset;

+ (void)shutdown;

+ (void)start;

+ (RxSchedulersTestScheduler *)test;

+ (RxScheduler *)trampoline;

#pragma mark Package-Private

- (void)shutdownInstance;

- (void)startInstance;

@end

J2OBJC_STATIC_INIT(RxSchedulersSchedulers)

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_immediate();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_trampoline();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_newThread();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_computation();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_io();

FOUNDATION_EXPORT RxSchedulersTestScheduler *RxSchedulersSchedulers_test();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT void RxSchedulersSchedulers_reset();

FOUNDATION_EXPORT void RxSchedulersSchedulers_start();

FOUNDATION_EXPORT void RxSchedulersSchedulers_shutdown();

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersSchedulers)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSchedulersSchedulers")
