//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbase/src/main/java/rename/org/kxml2/io/KXmlSerializer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RenameOrgKxml2IoKXmlSerializer.h"
#include "java/io/BufferedWriter.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"
#include "org/xmlpull/v1/XmlSerializer.h"

@interface RenameOrgKxml2IoKXmlSerializer () {
 @public
  JavaIoBufferedWriter *writer_;
  jboolean pending_;
  jint auto__;
  jint depth_;
  IOSObjectArray *elementStack_;
  IOSIntArray *nspCounts_;
  IOSObjectArray *nspStack_;
  IOSBooleanArray *indent_;
  jboolean unicode_;
  NSString *encoding_;
}

- (void)checkWithBoolean:(jboolean)close;

- (void)writeEscapedWithNSString:(NSString *)s
                         withInt:(jint)quot;

+ (void)reportInvalidCharacterWithChar:(jchar)ch;

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                        withBoolean:(jboolean)includeDefault
                        withBoolean:(jboolean)create;

@end

J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlSerializer, writer_, JavaIoBufferedWriter *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlSerializer, elementStack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlSerializer, nspCounts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlSerializer, nspStack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlSerializer, indent_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlSerializer, encoding_, NSString *)

inline jint RenameOrgKxml2IoKXmlSerializer_get_WRITE_BUFFER_SIZE();
#define RenameOrgKxml2IoKXmlSerializer_WRITE_BUFFER_SIZE 500
J2OBJC_STATIC_FIELD_CONSTANT(RenameOrgKxml2IoKXmlSerializer, WRITE_BUFFER_SIZE, jint)

__attribute__((unused)) static void RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(RenameOrgKxml2IoKXmlSerializer *self, jboolean close);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlSerializer_writeEscapedWithNSString_withInt_(RenameOrgKxml2IoKXmlSerializer *self, NSString *s, jint quot);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlSerializer_reportInvalidCharacterWithChar_(jchar ch);

__attribute__((unused)) static NSString *RenameOrgKxml2IoKXmlSerializer_getPrefixWithNSString_withBoolean_withBoolean_(RenameOrgKxml2IoKXmlSerializer *self, NSString *namespace_, jboolean includeDefault, jboolean create);

@implementation RenameOrgKxml2IoKXmlSerializer

- (void)checkWithBoolean:(jboolean)close {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, close);
}

- (void)writeEscapedWithNSString:(NSString *)s
                         withInt:(jint)quot {
  RenameOrgKxml2IoKXmlSerializer_writeEscapedWithNSString_withInt_(self, s, quot);
}

+ (void)reportInvalidCharacterWithChar:(jchar)ch {
  RenameOrgKxml2IoKXmlSerializer_reportInvalidCharacterWithChar_(ch);
}

- (void)docdeclWithNSString:(NSString *)dd {
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<!DOCTYPE"];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:dd];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@">"];
}

- (void)endDocument {
  while (depth_ > 0) {
    [self endTagWithNSString:IOSObjectArray_Get(nil_chk(elementStack_), depth_ * 3 - 3) withNSString:IOSObjectArray_Get(elementStack_, depth_ * 3 - 1)];
  }
  [self flush];
}

- (void)entityRefWithNSString:(NSString *)name {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, false);
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:'&'];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:name];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:';'];
}

- (jboolean)getFeatureWithNSString:(NSString *)name {
  return ([@"http://xmlpull.org/v1/doc/features.html#indent-output" isEqual:name]) ? IOSBooleanArray_Get(nil_chk(indent_), depth_) : false;
}

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                        withBoolean:(jboolean)create {
  @try {
    return RenameOrgKxml2IoKXmlSerializer_getPrefixWithNSString_withBoolean_withBoolean_(self, namespace_, false, create);
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_([((JavaIoIOException *) nil_chk(e)) description]);
  }
}

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                        withBoolean:(jboolean)includeDefault
                        withBoolean:(jboolean)create {
  return RenameOrgKxml2IoKXmlSerializer_getPrefixWithNSString_withBoolean_withBoolean_(self, namespace_, includeDefault, create);
}

- (id)getPropertyWithNSString:(NSString *)name {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Unsupported property");
}

- (void)ignorableWhitespaceWithNSString:(NSString *)s {
  [self textWithNSString:s];
}

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value {
  if ([@"http://xmlpull.org/v1/doc/features.html#indent-output" isEqual:name]) {
    *IOSBooleanArray_GetRef(nil_chk(indent_), depth_) = value;
  }
  else @throw create_JavaLangRuntimeException_initWithNSString_(@"Unsupported Feature");
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Unsupported Property:", value));
}

- (void)setPrefixWithNSString:(NSString *)prefix
                 withNSString:(NSString *)namespace_ {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, false);
  if (prefix == nil) prefix = @"";
  if (namespace_ == nil) namespace_ = @"";
  NSString *defined = RenameOrgKxml2IoKXmlSerializer_getPrefixWithNSString_withBoolean_withBoolean_(self, namespace_, true, false);
  if ([prefix isEqual:defined]) return;
  jint pos = JreLShift32(((*IOSIntArray_GetRef(nil_chk(nspCounts_), depth_ + 1))++), 1);
  if (((IOSObjectArray *) nil_chk(nspStack_))->size_ < pos + 1) {
    IOSObjectArray *hlp = [IOSObjectArray arrayWithLength:nspStack_->size_ + 16 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nspStack_, 0, hlp, 0, pos);
    JreStrongAssign(&nspStack_, hlp);
  }
  IOSObjectArray_Set(nspStack_, pos++, prefix);
  IOSObjectArray_Set(nspStack_, pos, namespace_);
}

- (void)setOutputWithJavaIoWriter:(JavaIoWriter *)writer {
  if ([writer isKindOfClass:[JavaIoBufferedWriter class]]) {
    JreStrongAssign(&self->writer_, (JavaIoBufferedWriter *) cast_chk(writer, [JavaIoBufferedWriter class]));
  }
  else {
    JreStrongAssignAndConsume(&self->writer_, new_JavaIoBufferedWriter_initWithJavaIoWriter_withInt_(writer, RenameOrgKxml2IoKXmlSerializer_WRITE_BUFFER_SIZE));
  }
  *IOSIntArray_GetRef(nil_chk(nspCounts_), 0) = 2;
  *IOSIntArray_GetRef(nspCounts_, 1) = 2;
  IOSObjectArray_Set(nil_chk(nspStack_), 0, @"");
  IOSObjectArray_Set(nspStack_, 1, @"");
  IOSObjectArray_Set(nspStack_, 2, @"xml");
  IOSObjectArray_Set(nspStack_, 3, @"http://www.w3.org/XML/1998/namespace");
  pending_ = false;
  auto__ = 0;
  depth_ = 0;
  unicode_ = false;
}

- (void)setOutputWithJavaIoOutputStream:(JavaIoOutputStream *)os
                           withNSString:(NSString *)encoding {
  if (os == nil) @throw create_JavaLangIllegalArgumentException_init();
  [self setOutputWithJavaIoWriter:encoding == nil ? create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(os) : create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(os, encoding)];
  JreStrongAssign(&self->encoding_, encoding);
  if (encoding != nil && [((NSString *) nil_chk([encoding lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) hasPrefix:@"utf"]) {
    unicode_ = true;
  }
}

- (void)startDocumentWithNSString:(NSString *)encoding
              withJavaLangBoolean:(JavaLangBoolean *)standalone {
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<?xml version='1.0' "];
  if (encoding != nil) {
    JreStrongAssign(&self->encoding_, encoding);
    if ([((NSString *) nil_chk([encoding lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) hasPrefix:@"utf"]) {
      unicode_ = true;
    }
  }
  if (self->encoding_ != nil) {
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"encoding='"];
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:self->encoding_];
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"' "];
  }
  if (standalone != nil) {
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"standalone='"];
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:[standalone booleanValue] ? @"yes" : @"no"];
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"' "];
  }
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"?>"];
}

- (id<OrgXmlpullV1XmlSerializer>)startTagWithNSString:(NSString *)namespace_
                                         withNSString:(NSString *)name {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, false);
  if (IOSBooleanArray_Get(nil_chk(indent_), depth_)) {
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"\x0d\n"];
    for (jint i = 0; i < depth_; i++) [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"  "];
  }
  jint esp = depth_ * 3;
  if (((IOSObjectArray *) nil_chk(elementStack_))->size_ < esp + 3) {
    IOSObjectArray *hlp = [IOSObjectArray arrayWithLength:elementStack_->size_ + 12 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(elementStack_, 0, hlp, 0, esp);
    JreStrongAssign(&elementStack_, hlp);
  }
  NSString *prefix = namespace_ == nil ? @"" : RenameOrgKxml2IoKXmlSerializer_getPrefixWithNSString_withBoolean_withBoolean_(self, namespace_, true, true);
  if (namespace_ != nil && [namespace_ isEmpty]) {
    for (jint i = IOSIntArray_Get(nil_chk(nspCounts_), depth_); i < IOSIntArray_Get(nil_chk(nspCounts_), depth_ + 1); i++) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(nspStack_), i * 2))) isEmpty] && ![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(nspStack_), i * 2 + 1))) isEmpty]) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot set default namespace for elements in no namespace");
      }
    }
  }
  IOSObjectArray_Set(nil_chk(elementStack_), esp++, namespace_);
  IOSObjectArray_Set(elementStack_, esp++, prefix);
  IOSObjectArray_Set(elementStack_, esp, name);
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:'<'];
  if (![prefix isEmpty]) {
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:prefix];
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:':'];
  }
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:name];
  pending_ = true;
  return self;
}

- (id<OrgXmlpullV1XmlSerializer>)attributeWithNSString:(NSString *)namespace_
                                          withNSString:(NSString *)name
                                          withNSString:(NSString *)value {
  if (!pending_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"illegal position for attribute");
  if (namespace_ == nil) namespace_ = @"";
  NSString *prefix = [namespace_ isEmpty] ? @"" : RenameOrgKxml2IoKXmlSerializer_getPrefixWithNSString_withBoolean_withBoolean_(self, namespace_, false, true);
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:' '];
  if (![prefix isEmpty]) {
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:prefix];
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:':'];
  }
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:name];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:'='];
  jchar q = [((NSString *) nil_chk(value)) indexOf:'"'] == -1 ? '"' : '\'';
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:q];
  RenameOrgKxml2IoKXmlSerializer_writeEscapedWithNSString_withInt_(self, value, q);
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:q];
  return self;
}

- (void)flush {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, false);
  [((JavaIoBufferedWriter *) nil_chk(writer_)) flush];
}

- (id<OrgXmlpullV1XmlSerializer>)endTagWithNSString:(NSString *)namespace_
                                       withNSString:(NSString *)name {
  if (!pending_) depth_--;
  if ((namespace_ == nil && IOSObjectArray_Get(nil_chk(elementStack_), depth_ * 3) != nil) || (namespace_ != nil && ![namespace_ isEqual:IOSObjectArray_Get(nil_chk(elementStack_), depth_ * 3)]) || ![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(elementStack_), depth_ * 3 + 2))) isEqual:name]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C$$", @"</{", namespace_, '}', name, @"> does not match start"));
  if (pending_) {
    RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, true);
    depth_--;
  }
  else {
    if (IOSBooleanArray_Get(nil_chk(indent_), depth_ + 1)) {
      [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"\x0d\n"];
      for (jint i = 0; i < depth_; i++) [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"  "];
    }
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"</"];
    NSString *prefix = IOSObjectArray_Get(nil_chk(elementStack_), depth_ * 3 + 1);
    if (![((NSString *) nil_chk(prefix)) isEmpty]) {
      [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:prefix];
      [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:':'];
    }
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:name];
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:'>'];
  }
  *IOSIntArray_GetRef(nil_chk(nspCounts_), depth_ + 1) = IOSIntArray_Get(nspCounts_, depth_);
  return self;
}

- (NSString *)getNamespace {
  return [self getDepth] == 0 ? nil : IOSObjectArray_Get(nil_chk(elementStack_), [self getDepth] * 3 - 3);
}

- (NSString *)getName {
  return [self getDepth] == 0 ? nil : IOSObjectArray_Get(nil_chk(elementStack_), [self getDepth] * 3 - 1);
}

- (jint)getDepth {
  return pending_ ? depth_ + 1 : depth_;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithNSString:(NSString *)text {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, false);
  *IOSBooleanArray_GetRef(nil_chk(indent_), depth_) = false;
  RenameOrgKxml2IoKXmlSerializer_writeEscapedWithNSString_withInt_(self, text, -1);
  return self;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithCharArray:(IOSCharArray *)text
                                           withInt:(jint)start
                                           withInt:(jint)len {
  [self textWithNSString:[NSString stringWithCharacters:text offset:start length:len]];
  return self;
}

- (void)cdsectWithNSString:(NSString *)data {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, false);
  data = [((NSString *) nil_chk(data)) replace:@"]]>" withSequence:@"]]]]><![CDATA[>"];
  IOSCharArray *chars = [((NSString *) nil_chk(data)) toCharArray];
  {
    IOSCharArray *a__ = chars;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar ch = *b__++;
      jboolean valid = (ch >= (jint) 0x20 && ch <= (jint) 0xd7ff) || (ch == 0x0009 || ch == 0x000a || ch == 0x000d) || (ch >= (jint) 0xe000 && ch <= (jint) 0xfffd);
      if (!valid) {
        RenameOrgKxml2IoKXmlSerializer_reportInvalidCharacterWithChar_(ch);
      }
    }
  }
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<![CDATA["];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithCharArray:chars withInt:0 withInt:((IOSCharArray *) nil_chk(chars))->size_];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"]]>"];
}

- (void)commentWithNSString:(NSString *)comment {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, false);
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<!--"];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:comment];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"-->"];
}

- (void)processingInstructionWithNSString:(NSString *)pi {
  RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(self, false);
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<?"];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:pi];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"?>"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RenameOrgKxml2IoKXmlSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(writer_);
  RELEASE_(elementStack_);
  RELEASE_(nspCounts_);
  RELEASE_(nspStack_);
  RELEASE_(indent_);
  RELEASE_(encoding_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x12, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x12, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 11, 13, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 23, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, 2, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 26, 20, 2, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 27, 28, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 29, 20, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 30, 8, 2, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 30, 31, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 8, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkWithBoolean:);
  methods[1].selector = @selector(writeEscapedWithNSString:withInt:);
  methods[2].selector = @selector(reportInvalidCharacterWithChar:);
  methods[3].selector = @selector(docdeclWithNSString:);
  methods[4].selector = @selector(endDocument);
  methods[5].selector = @selector(entityRefWithNSString:);
  methods[6].selector = @selector(getFeatureWithNSString:);
  methods[7].selector = @selector(getPrefixWithNSString:withBoolean:);
  methods[8].selector = @selector(getPrefixWithNSString:withBoolean:withBoolean:);
  methods[9].selector = @selector(getPropertyWithNSString:);
  methods[10].selector = @selector(ignorableWhitespaceWithNSString:);
  methods[11].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[12].selector = @selector(setPropertyWithNSString:withId:);
  methods[13].selector = @selector(setPrefixWithNSString:withNSString:);
  methods[14].selector = @selector(setOutputWithJavaIoWriter:);
  methods[15].selector = @selector(setOutputWithJavaIoOutputStream:withNSString:);
  methods[16].selector = @selector(startDocumentWithNSString:withJavaLangBoolean:);
  methods[17].selector = @selector(startTagWithNSString:withNSString:);
  methods[18].selector = @selector(attributeWithNSString:withNSString:withNSString:);
  methods[19].selector = @selector(flush);
  methods[20].selector = @selector(endTagWithNSString:withNSString:);
  methods[21].selector = @selector(getNamespace);
  methods[22].selector = @selector(getName);
  methods[23].selector = @selector(getDepth);
  methods[24].selector = @selector(textWithNSString:);
  methods[25].selector = @selector(textWithCharArray:withInt:withInt:);
  methods[26].selector = @selector(cdsectWithNSString:);
  methods[27].selector = @selector(commentWithNSString:);
  methods[28].selector = @selector(processingInstructionWithNSString:);
  methods[29].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WRITE_BUFFER_SIZE", "I", .constantValue.asInt = RenameOrgKxml2IoKXmlSerializer_WRITE_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "writer_", "LJavaIoBufferedWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pending_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "auto__", "I", .constantValue.asLong = 0, 0x2, 35, -1, -1, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elementStack_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nspCounts_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nspStack_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indent_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unicode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "check", "Z", "LJavaIoIOException;", "writeEscaped", "LNSString;I", "reportInvalidCharacter", "C", "docdecl", "LNSString;", "entityRef", "getFeature", "getPrefix", "LNSString;Z", "LNSString;ZZ", "getProperty", "ignorableWhitespace", "setFeature", "setProperty", "LNSString;LNSObject;", "setPrefix", "LNSString;LNSString;", "setOutput", "LJavaIoWriter;", "LJavaIoOutputStream;LNSString;", "startDocument", "LNSString;LJavaLangBoolean;", "startTag", "attribute", "LNSString;LNSString;LNSString;", "endTag", "text", "[CII", "cdsect", "comment", "processingInstruction", "auto" };
  static const J2ObjcClassInfo _RenameOrgKxml2IoKXmlSerializer = { "KXmlSerializer", "rename.org.kxml2.io", ptrTable, methods, fields, 7, 0x1, 30, 11, -1, -1, -1, -1, -1 };
  return &_RenameOrgKxml2IoKXmlSerializer;
}

@end

void RenameOrgKxml2IoKXmlSerializer_checkWithBoolean_(RenameOrgKxml2IoKXmlSerializer *self, jboolean close) {
  if (!self->pending_) return;
  self->depth_++;
  self->pending_ = false;
  if (((IOSBooleanArray *) nil_chk(self->indent_))->size_ <= self->depth_) {
    IOSBooleanArray *hlp = [IOSBooleanArray arrayWithLength:self->depth_ + 4];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->indent_, 0, hlp, 0, self->depth_);
    JreStrongAssign(&self->indent_, hlp);
  }
  *IOSBooleanArray_GetRef(self->indent_, self->depth_) = IOSBooleanArray_Get(self->indent_, self->depth_ - 1);
  for (jint i = IOSIntArray_Get(nil_chk(self->nspCounts_), self->depth_ - 1); i < IOSIntArray_Get(nil_chk(self->nspCounts_), self->depth_); i++) {
    [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithInt:' '];
    [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:@"xmlns"];
    if (![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(self->nspStack_), i * 2))) isEmpty]) {
      [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithInt:':'];
      [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:IOSObjectArray_Get(nil_chk(self->nspStack_), i * 2)];
    }
    else if ([((NSString *) nil_chk([self getNamespace])) isEmpty] && ![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(self->nspStack_), i * 2 + 1))) isEmpty]) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot set default namespace for elements in no namespace");
    [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:@"=\""];
    RenameOrgKxml2IoKXmlSerializer_writeEscapedWithNSString_withInt_(self, IOSObjectArray_Get(nil_chk(self->nspStack_), i * 2 + 1), '"');
    [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithInt:'"'];
  }
  if (self->nspCounts_->size_ <= self->depth_ + 1) {
    IOSIntArray *hlp = [IOSIntArray arrayWithLength:self->depth_ + 8];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->nspCounts_, 0, hlp, 0, self->depth_ + 1);
    JreStrongAssign(&self->nspCounts_, hlp);
  }
  *IOSIntArray_GetRef(self->nspCounts_, self->depth_ + 1) = IOSIntArray_Get(self->nspCounts_, self->depth_);
  [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:close ? @" />" : @">"];
}

void RenameOrgKxml2IoKXmlSerializer_writeEscapedWithNSString_withInt_(RenameOrgKxml2IoKXmlSerializer *self, NSString *s, jint quot) {
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    {
      jboolean valid;
      switch (c) {
        case 0x000a:
        case 0x000d:
        case 0x0009:
        if (quot == -1) [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithInt:c];
        else [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:JreStrcat("$IC", @"&#", ((jint) c), ';')];
        break;
        case '&':
        [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:@"&amp;"];
        break;
        case '>':
        [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:@"&gt;"];
        break;
        case '<':
        [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:@"&lt;"];
        break;
        default:
        if (c == quot) {
          [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:c == '"' ? @"&quot;" : @"&apos;"];
          break;
        }
        valid = ((c >= (jint) 0x20 && c <= (jint) 0xd7ff) || (c >= (jint) 0xe000 && c <= (jint) 0xfffd));
        if (!valid) {
          RenameOrgKxml2IoKXmlSerializer_reportInvalidCharacterWithChar_(c);
        }
        if (self->unicode_ || c < 127) {
          [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithInt:c];
        }
        else {
          [((JavaIoBufferedWriter *) nil_chk(self->writer_)) writeWithNSString:JreStrcat("$IC", @"&#", ((jint) c), ';')];
        }
      }
    }
  }
}

void RenameOrgKxml2IoKXmlSerializer_reportInvalidCharacterWithChar_(jchar ch) {
  RenameOrgKxml2IoKXmlSerializer_initialize();
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"Illegal character (", JavaLangInteger_toHexStringWithInt_((jint) ch), ')'));
}

NSString *RenameOrgKxml2IoKXmlSerializer_getPrefixWithNSString_withBoolean_withBoolean_(RenameOrgKxml2IoKXmlSerializer *self, NSString *namespace_, jboolean includeDefault, jboolean create) {
  for (jint i = IOSIntArray_Get(nil_chk(self->nspCounts_), self->depth_ + 1) * 2 - 2; i >= 0; i -= 2) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(self->nspStack_), i + 1))) isEqual:namespace_] && (includeDefault || ![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(self->nspStack_), i))) isEmpty])) {
      NSString *cand = IOSObjectArray_Get(nil_chk(self->nspStack_), i);
      for (jint j = i + 2; j < IOSIntArray_Get(nil_chk(self->nspCounts_), self->depth_ + 1) * 2; j++) {
        if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(self->nspStack_), j))) isEqual:cand]) {
          cand = nil;
          break;
        }
      }
      if (cand != nil) return cand;
    }
  }
  if (!create) return nil;
  NSString *prefix;
  if ([((NSString *) nil_chk(namespace_)) isEmpty]) prefix = @"";
  else {
    do {
      prefix = JreStrcat("CI", 'n', (self->auto__++));
      for (jint i = IOSIntArray_Get(nil_chk(self->nspCounts_), self->depth_ + 1) * 2 - 2; i >= 0; i -= 2) {
        if ([prefix isEqual:IOSObjectArray_Get(nil_chk(self->nspStack_), i)]) {
          prefix = nil;
          break;
        }
      }
    }
    while (prefix == nil);
  }
  jboolean p = self->pending_;
  self->pending_ = false;
  [self setPrefixWithNSString:prefix withNSString:namespace_];
  self->pending_ = p;
  return prefix;
}

void RenameOrgKxml2IoKXmlSerializer_init(RenameOrgKxml2IoKXmlSerializer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->elementStack_, [IOSObjectArray newArrayWithLength:12 type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->nspCounts_, [IOSIntArray newArrayWithLength:4]);
  JreStrongAssignAndConsume(&self->nspStack_, [IOSObjectArray newArrayWithLength:8 type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->indent_, [IOSBooleanArray newArrayWithLength:4]);
}

RenameOrgKxml2IoKXmlSerializer *new_RenameOrgKxml2IoKXmlSerializer_init() {
  J2OBJC_NEW_IMPL(RenameOrgKxml2IoKXmlSerializer, init)
}

RenameOrgKxml2IoKXmlSerializer *create_RenameOrgKxml2IoKXmlSerializer_init() {
  J2OBJC_CREATE_IMPL(RenameOrgKxml2IoKXmlSerializer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RenameOrgKxml2IoKXmlSerializer)
