//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/types/BooleanIntegerType.java
//

#include "AndroidDatabaseCursor.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBooleanIntegerType.h"
#include "CoTouchlabSqueakyFieldTypesBooleanType.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"

inline JavaLangInteger *CoTouchlabSqueakyFieldTypesBooleanIntegerType_get_TRUE_VALUE();
static JavaLangInteger *CoTouchlabSqueakyFieldTypesBooleanIntegerType_TRUE_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBooleanIntegerType, TRUE_VALUE, JavaLangInteger *)

inline JavaLangInteger *CoTouchlabSqueakyFieldTypesBooleanIntegerType_get_FALSE_VALUE();
static JavaLangInteger *CoTouchlabSqueakyFieldTypesBooleanIntegerType_FALSE_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBooleanIntegerType, FALSE_VALUE, JavaLangInteger *)

inline CoTouchlabSqueakyFieldTypesBooleanIntegerType *CoTouchlabSqueakyFieldTypesBooleanIntegerType_get_singleTon();
static CoTouchlabSqueakyFieldTypesBooleanIntegerType *CoTouchlabSqueakyFieldTypesBooleanIntegerType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBooleanIntegerType, singleTon, CoTouchlabSqueakyFieldTypesBooleanIntegerType *)

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesBooleanIntegerType)

@implementation CoTouchlabSqueakyFieldTypesBooleanIntegerType

+ (CoTouchlabSqueakyFieldTypesBooleanIntegerType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesBooleanIntegerType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesBooleanIntegerType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  return [self javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:fieldType withId:JavaLangBoolean_valueOfWithBoolean_(JavaLangBoolean_parseBooleanWithNSString_(defaultStr))];
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj {
  return ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(obj, [JavaLangBoolean class]))) booleanValue] ? CoTouchlabSqueakyFieldTypesBooleanIntegerType_TRUE_VALUE : CoTouchlabSqueakyFieldTypesBooleanIntegerType_FALSE_VALUE);
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return JavaLangInteger_valueOfWithInt_([((id<AndroidDatabaseCursor>) nil_chk(results)) getIntWithInt:columnPos]);
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  return ([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(sqlArg, [JavaLangInteger class]))) intValue] == 0 ? JreLoadStatic(JavaLangBoolean, FALSE) : JreLoadStatic(JavaLangBoolean, TRUE));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCoTouchlabSqueakyFieldTypesBooleanIntegerType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getSingleton);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:);
  methods[3].selector = @selector(javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:);
  methods[4].selector = @selector(resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  methods[5].selector = @selector(sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE_VALUE", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "FALSE_VALUE", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "singleTon", "LCoTouchlabSqueakyFieldTypesBooleanIntegerType;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "parseDefaultString", "LCoTouchlabSqueakyFieldFieldType;LNSString;", "javaToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LNSObject;", "resultToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LAndroidDatabaseCursor;I", "LJavaSqlSQLException;", "sqlArgToJava", "LCoTouchlabSqueakyFieldFieldType;LNSObject;I", &CoTouchlabSqueakyFieldTypesBooleanIntegerType_TRUE_VALUE, &CoTouchlabSqueakyFieldTypesBooleanIntegerType_FALSE_VALUE, &CoTouchlabSqueakyFieldTypesBooleanIntegerType_singleTon };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBooleanIntegerType = { "BooleanIntegerType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesBooleanIntegerType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesBooleanIntegerType class]) {
    JreStrongAssign(&CoTouchlabSqueakyFieldTypesBooleanIntegerType_TRUE_VALUE, JavaLangInteger_valueOfWithInt_(1));
    JreStrongAssign(&CoTouchlabSqueakyFieldTypesBooleanIntegerType_FALSE_VALUE, JavaLangInteger_valueOfWithInt_(0));
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesBooleanIntegerType_singleTon, new_CoTouchlabSqueakyFieldTypesBooleanIntegerType_init());
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesBooleanIntegerType)
  }
}

@end

CoTouchlabSqueakyFieldTypesBooleanIntegerType *CoTouchlabSqueakyFieldTypesBooleanIntegerType_getSingleton() {
  CoTouchlabSqueakyFieldTypesBooleanIntegerType_initialize();
  return CoTouchlabSqueakyFieldTypesBooleanIntegerType_singleTon;
}

void CoTouchlabSqueakyFieldTypesBooleanIntegerType_init(CoTouchlabSqueakyFieldTypesBooleanIntegerType *self) {
  CoTouchlabSqueakyFieldTypesBooleanType_initWithCoTouchlabSqueakyFieldSqlType_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, INTEGER));
}

CoTouchlabSqueakyFieldTypesBooleanIntegerType *new_CoTouchlabSqueakyFieldTypesBooleanIntegerType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesBooleanIntegerType, init)
}

CoTouchlabSqueakyFieldTypesBooleanIntegerType *create_CoTouchlabSqueakyFieldTypesBooleanIntegerType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesBooleanIntegerType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBooleanIntegerType)
