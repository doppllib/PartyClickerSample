//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsOnSubscribeRefCount.h"
#include "RxObservablesConnectableObservable.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@interface RxInternalOperatorsOnSubscribeRefCount () {
 @public
  RxObservablesConnectableObservable *source_;
}

- (id<RxFunctionsAction1>)onSubscribeWithRxSubscriber:(RxSubscriber *)subscriber
            withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked;

- (id<RxSubscription>)disconnectWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)current;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount, source_, RxObservablesConnectableObservable *)

__attribute__((unused)) static id<RxFunctionsAction1> RxInternalOperatorsOnSubscribeRefCount_onSubscribeWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *self, RxSubscriber *subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked);

__attribute__((unused)) static id<RxSubscription> RxInternalOperatorsOnSubscribeRefCount_disconnectWithRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOnSubscribeRefCount *self, RxSubscriptionsCompositeSubscription *current);

@interface RxInternalOperatorsOnSubscribeRefCount_1 : NSObject < RxFunctionsAction1 > {
 @public
  RxInternalOperatorsOnSubscribeRefCount *this$0_;
  RxSubscriber *val$subscriber_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$writeLocked_;
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0
                     withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

- (void)callWithId:(id<RxSubscription>)subscription;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCount_1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCount_1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount_1 *self, RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_1 *new_RxInternalOperatorsOnSubscribeRefCount_1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_1 *create_RxInternalOperatorsOnSubscribeRefCount_1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

@interface RxInternalOperatorsOnSubscribeRefCount_2 : RxSubscriber {
 @public
  RxInternalOperatorsOnSubscribeRefCount *this$0_;
  RxSubscriber *val$subscriber_;
  RxSubscriptionsCompositeSubscription *val$currentBase_;
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0
                      withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1
                                              withRxSubscriber:(RxSubscriber *)subscriber;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)onCompleted;

- (void)cleanup;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCount_2)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCount_2_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_(RxInternalOperatorsOnSubscribeRefCount_2 *self, RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, RxSubscriptionsCompositeSubscription *capture$1, RxSubscriber *subscriber);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_2 *new_RxInternalOperatorsOnSubscribeRefCount_2_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, RxSubscriptionsCompositeSubscription *capture$1, RxSubscriber *subscriber) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_2 *create_RxInternalOperatorsOnSubscribeRefCount_2_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, RxSubscriptionsCompositeSubscription *capture$1, RxSubscriber *subscriber);

@interface RxInternalOperatorsOnSubscribeRefCount_3 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOnSubscribeRefCount *this$0_;
  RxSubscriptionsCompositeSubscription *val$current_;
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$
                      withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCount_3)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCount_3_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOnSubscribeRefCount_3 *self, RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriptionsCompositeSubscription *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_3 *new_RxInternalOperatorsOnSubscribeRefCount_3_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriptionsCompositeSubscription *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_3 *create_RxInternalOperatorsOnSubscribeRefCount_3_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriptionsCompositeSubscription *capture$0);

@implementation RxInternalOperatorsOnSubscribeRefCount

- (instancetype)initWithRxObservablesConnectableObservable:(RxObservablesConnectableObservable *)source {
  RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(self, source);
  return self;
}

- (void)callWithId:(RxSubscriber *)subscriber {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(subscriptionCount_)) incrementAndGet] == 1) {
    JavaUtilConcurrentAtomicAtomicBoolean *writeLocked = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
    @try {
      [((RxObservablesConnectableObservable *) nil_chk(source_)) connectWithRxFunctionsAction1:RxInternalOperatorsOnSubscribeRefCount_onSubscribeWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked)];
    }
    @finally {
      if ([writeLocked get]) {
        [lock_ unlock];
      }
    }
  }
  else {
    @try {
      [self doSubscribeWithRxSubscriber:subscriber withRxSubscriptionsCompositeSubscription:JreLoadVolatileId(&baseSubscription_)];
    }
    @finally {
      [lock_ unlock];
    }
  }
}

- (id<RxFunctionsAction1>)onSubscribeWithRxSubscriber:(RxSubscriber *)subscriber
            withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked {
  return RxInternalOperatorsOnSubscribeRefCount_onSubscribeWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked);
}

- (void)doSubscribeWithRxSubscriber:(RxSubscriber *)subscriber
withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)currentBase {
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:RxInternalOperatorsOnSubscribeRefCount_disconnectWithRxSubscriptionsCompositeSubscription_(self, currentBase)];
  [((RxObservablesConnectableObservable *) nil_chk(source_)) unsafeSubscribeWithRxSubscriber:create_RxInternalOperatorsOnSubscribeRefCount_2_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_(self, subscriber, currentBase, subscriber)];
}

- (id<RxSubscription>)disconnectWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)current {
  return RxInternalOperatorsOnSubscribeRefCount_disconnectWithRxSubscriptionsCompositeSubscription_(self, current);
}

- (void)__javaClone:(RxInternalOperatorsOnSubscribeRefCount *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&baseSubscription_, &original->baseSubscription_);
}

- (void)dealloc {
  RELEASE_(source_);
  JreReleaseVolatile(&baseSubscription_);
  RELEASE_(subscriptionCount_);
  RELEASE_(lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LRxFunctionsAction1;", 0x2, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "LRxSubscription;", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObservablesConnectableObservable:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(onSubscribeWithRxSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[3].selector = @selector(doSubscribeWithRxSubscriber:withRxSubscriptionsCompositeSubscription:);
  methods[4].selector = @selector(disconnectWithRxSubscriptionsCompositeSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxObservablesConnectableObservable;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "baseSubscription_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "subscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesConnectableObservable;", "(Lrx/observables/ConnectableObservable<+TT;>;)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "onSubscribe", "LRxSubscriber;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Lrx/Subscriber<-TT;>;Ljava/util/concurrent/atomic/AtomicBoolean;)Lrx/functions/Action1<Lrx/Subscription;>;", "doSubscribe", "LRxSubscriber;LRxSubscriptionsCompositeSubscription;", "(Lrx/Subscriber<-TT;>;Lrx/subscriptions/CompositeSubscription;)V", "disconnect", "LRxSubscriptionsCompositeSubscription;", "Lrx/observables/ConnectableObservable<+TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCount = { "OnSubscribeRefCount", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 5, 4, -1, -1, -1, 14, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCount;
}

@end

void RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxInternalOperatorsOnSubscribeRefCount *self, RxObservablesConnectableObservable *source) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->baseSubscription_, create_RxSubscriptionsCompositeSubscription_init());
  JreStrongAssignAndConsume(&self->subscriptionCount_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  JreStrongAssign(&self->source_, source);
}

RxInternalOperatorsOnSubscribeRefCount *new_RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxObservablesConnectableObservable *source) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCount, initWithRxObservablesConnectableObservable_, source)
}

RxInternalOperatorsOnSubscribeRefCount *create_RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxObservablesConnectableObservable *source) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCount, initWithRxObservablesConnectableObservable_, source)
}

id<RxFunctionsAction1> RxInternalOperatorsOnSubscribeRefCount_onSubscribeWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *self, RxSubscriber *subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  return create_RxInternalOperatorsOnSubscribeRefCount_1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked);
}

id<RxSubscription> RxInternalOperatorsOnSubscribeRefCount_disconnectWithRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOnSubscribeRefCount *self, RxSubscriptionsCompositeSubscription *current) {
  return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOnSubscribeRefCount_3_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_(self, current));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeRefCount)

@implementation RxInternalOperatorsOnSubscribeRefCount_1

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0
                     withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxInternalOperatorsOnSubscribeRefCount_1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)callWithId:(id<RxSubscription>)subscription {
  @try {
    [((RxSubscriptionsCompositeSubscription *) nil_chk(JreLoadVolatileId(&this$0_->baseSubscription_))) addWithRxSubscription:subscription];
    [this$0_ doSubscribeWithRxSubscriber:val$subscriber_ withRxSubscriptionsCompositeSubscription:JreLoadVolatileId(&this$0_->baseSubscription_)];
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) unlock];
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$writeLocked_)) setWithBoolean:false];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  RELEASE_(val$writeLocked_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOnSubscribeRefCount:withRxSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$writeLocked_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscription;", "Lrx/internal/operators/OnSubscribeRefCount<TT;>;", "Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOnSubscribeRefCount;", "onSubscribeWithRxSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCount_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 3, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCount_1;
}

@end

void RxInternalOperatorsOnSubscribeRefCount_1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount_1 *self, RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  JreStrongAssign(&self->val$writeLocked_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCount_1 *new_RxInternalOperatorsOnSubscribeRefCount_1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCount_1, initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0, capture$1)
}

RxInternalOperatorsOnSubscribeRefCount_1 *create_RxInternalOperatorsOnSubscribeRefCount_1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCount_1, initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0, capture$1)
}

@implementation RxInternalOperatorsOnSubscribeRefCount_2

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0
                      withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1
                                              withRxSubscriber:(RxSubscriber *)subscriber {
  RxInternalOperatorsOnSubscribeRefCount_2_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_(self, outer$, capture$0, capture$1, subscriber);
  return self;
}

- (void)onErrorWithNSException:(NSException *)e {
  [self cleanup];
  [((RxSubscriber *) nil_chk(val$subscriber_)) onErrorWithNSException:e];
}

- (void)onNextWithId:(id)t {
  [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:t];
}

- (void)onCompleted {
  [self cleanup];
  [((RxSubscriber *) nil_chk(val$subscriber_)) onCompleted];
}

- (void)cleanup {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    if (JreLoadVolatileId(&this$0_->baseSubscription_) == val$currentBase_) {
      [((RxSubscriptionsCompositeSubscription *) nil_chk(JreLoadVolatileId(&this$0_->baseSubscription_))) unsubscribe];
      JreVolatileStrongAssign(&this$0_->baseSubscription_, create_RxSubscriptionsCompositeSubscription_init());
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->subscriptionCount_)) setWithInt:0];
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  RELEASE_(val$currentBase_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOnSubscribeRefCount:withRxSubscriber:withRxSubscriptionsCompositeSubscription:withRxSubscriber:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(cleanup);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
    { "val$currentBase_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<*>;)V", "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "Lrx/internal/operators/OnSubscribeRefCount<TT;>;", "Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOnSubscribeRefCount;", "doSubscribeWithRxSubscriber:withRxSubscriptionsCompositeSubscription:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCount_2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 5, 3, 9, -1, 10, 11, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCount_2;
}

@end

void RxInternalOperatorsOnSubscribeRefCount_2_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_(RxInternalOperatorsOnSubscribeRefCount_2 *self, RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, RxSubscriptionsCompositeSubscription *capture$1, RxSubscriber *subscriber) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  JreStrongAssign(&self->val$currentBase_, capture$1);
  RxSubscriber_initWithRxSubscriber_(self, subscriber);
}

RxInternalOperatorsOnSubscribeRefCount_2 *new_RxInternalOperatorsOnSubscribeRefCount_2_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, RxSubscriptionsCompositeSubscription *capture$1, RxSubscriber *subscriber) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCount_2, initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_, outer$, capture$0, capture$1, subscriber)
}

RxInternalOperatorsOnSubscribeRefCount_2 *create_RxInternalOperatorsOnSubscribeRefCount_2_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, RxSubscriptionsCompositeSubscription *capture$1, RxSubscriber *subscriber) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCount_2, initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withRxSubscriptionsCompositeSubscription_withRxSubscriber_, outer$, capture$0, capture$1, subscriber)
}

@implementation RxInternalOperatorsOnSubscribeRefCount_3

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$
                      withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCount_3_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_(self, outer$, capture$0);
  return self;
}

- (void)call {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    if (JreLoadVolatileId(&this$0_->baseSubscription_) == val$current_) {
      if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->subscriptionCount_)) decrementAndGet] == 0) {
        [((RxSubscriptionsCompositeSubscription *) nil_chk(JreLoadVolatileId(&this$0_->baseSubscription_))) unsubscribe];
        JreVolatileStrongAssign(&this$0_->baseSubscription_, create_RxSubscriptionsCompositeSubscription_init());
      }
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOnSubscribeRefCount:withRxSubscriptionsCompositeSubscription:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$current_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Lrx/internal/operators/OnSubscribeRefCount<TT;>;", "LRxInternalOperatorsOnSubscribeRefCount;", "disconnectWithRxSubscriptionsCompositeSubscription:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCount_3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCount_3;
}

@end

void RxInternalOperatorsOnSubscribeRefCount_3_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOnSubscribeRefCount_3 *self, RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriptionsCompositeSubscription *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$current_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCount_3 *new_RxInternalOperatorsOnSubscribeRefCount_3_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriptionsCompositeSubscription *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCount_3, initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_, outer$, capture$0)
}

RxInternalOperatorsOnSubscribeRefCount_3 *create_RxInternalOperatorsOnSubscribeRefCount_3_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriptionsCompositeSubscription *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCount_3, initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriptionsCompositeSubscription_, outer$, capture$0)
}
