//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CoTouchlabSqueakyFieldFieldType")
#ifdef RESTRICT_CoTouchlabSqueakyFieldFieldType
#define INCLUDE_ALL_CoTouchlabSqueakyFieldFieldType 0
#else
#define INCLUDE_ALL_CoTouchlabSqueakyFieldFieldType 1
#endif
#undef RESTRICT_CoTouchlabSqueakyFieldFieldType

#if !defined (CoTouchlabSqueakyFieldFieldType_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldFieldType || defined(INCLUDE_CoTouchlabSqueakyFieldFieldType))
#define CoTouchlabSqueakyFieldFieldType_

@class CoTouchlabSqueakyFieldDataType;
@class CoTouchlabSqueakyFieldSqlType;
@class IOSClass;
@protocol CoTouchlabSqueakyFieldDataPersister;
@protocol CoTouchlabSqueakyFieldFieldConverter;

@interface CoTouchlabSqueakyFieldFieldType : NSObject

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)indexNameBase
                    withNSString:(NSString *)fieldName
                    withNSString:(NSString *)columnName
                     withBoolean:(jboolean)isId
                     withBoolean:(jboolean)isGeneratedId
                     withBoolean:(jboolean)isForeign
withCoTouchlabSqueakyFieldDataType:(CoTouchlabSqueakyFieldDataType *)dataType
                    withIOSClass:(IOSClass *)fieldType
                     withBoolean:(jboolean)canBeNull
                    withNSString:(NSString *)format
                     withBoolean:(jboolean)unique
                     withBoolean:(jboolean)uniqueCombo
                     withBoolean:(jboolean)index
                     withBoolean:(jboolean)uniqueIndex
                    withNSString:(NSString *)indexName
                    withNSString:(NSString *)uniqueIndexName
                    withNSString:(NSString *)configDefaultValue
                     withBoolean:(jboolean)foreignAutoRefresh;

- (id)convertJavaFieldToSqlArgValueWithId:(id)fieldVal;

- (NSString *)getColumnName;

- (id<CoTouchlabSqueakyFieldDataPersister>)getDataPersister;

- (id<CoTouchlabSqueakyFieldDataPersister>)getDataPersisterWithCoTouchlabSqueakyFieldDataPersister:(id<CoTouchlabSqueakyFieldDataPersister>)defaultPersister;

- (CoTouchlabSqueakyFieldDataType *)getDataType;

- (id)getDataTypeConfigObj;

- (id)getDefaultValue;

- (id<CoTouchlabSqueakyFieldFieldConverter>)getFieldConverterWithCoTouchlabSqueakyFieldDataPersister:(id<CoTouchlabSqueakyFieldDataPersister>)dataPersister;

- (NSString *)getFieldName;

- (IOSClass *)getFieldType;

- (NSString *)getFormat;

- (NSString *)getIndexName;

- (NSString *)getIndexNameWithNSString:(NSString *)indexNameBase;

- (id)getJavaDefaultValueDefault;

- (CoTouchlabSqueakyFieldSqlType *)getSqlType;

- (NSString *)getUniqueIndexName;

- (NSString *)getUniqueIndexNameWithNSString:(NSString *)indexNameBase;

- (jboolean)isCanBeNull;

- (jboolean)isComparable;

- (jboolean)isEscapedDefaultValue;

- (jboolean)isEscapedValue;

- (jboolean)isForeign;

- (jboolean)isForeignAutoRefresh;

- (jboolean)isGeneratedId;

- (jboolean)isId;

- (jboolean)isUnique;

- (jboolean)isUniqueCombo;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(CoTouchlabSqueakyFieldFieldType)

inline NSString *CoTouchlabSqueakyFieldFieldType_get_FOREIGN_ID_FIELD_SUFFIX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CoTouchlabSqueakyFieldFieldType_FOREIGN_ID_FIELD_SUFFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldFieldType, FOREIGN_ID_FIELD_SUFFIX, NSString *)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(CoTouchlabSqueakyFieldFieldType *self, NSString *indexNameBase, NSString *fieldName, NSString *columnName, jboolean isId, jboolean isGeneratedId, jboolean isForeign, CoTouchlabSqueakyFieldDataType *dataType, IOSClass *fieldType, jboolean canBeNull, NSString *format, jboolean unique, jboolean uniqueCombo, jboolean index, jboolean uniqueIndex, NSString *indexName, NSString *uniqueIndexName, NSString *configDefaultValue, jboolean foreignAutoRefresh);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldFieldType *new_CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(NSString *indexNameBase, NSString *fieldName, NSString *columnName, jboolean isId, jboolean isGeneratedId, jboolean isForeign, CoTouchlabSqueakyFieldDataType *dataType, IOSClass *fieldType, jboolean canBeNull, NSString *format, jboolean unique, jboolean uniqueCombo, jboolean index, jboolean uniqueIndex, NSString *indexName, NSString *uniqueIndexName, NSString *configDefaultValue, jboolean foreignAutoRefresh) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldFieldType *create_CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(NSString *indexNameBase, NSString *fieldName, NSString *columnName, jboolean isId, jboolean isGeneratedId, jboolean isForeign, CoTouchlabSqueakyFieldDataType *dataType, IOSClass *fieldType, jboolean canBeNull, NSString *format, jboolean unique, jboolean uniqueCombo, jboolean index, jboolean uniqueIndex, NSString *indexName, NSString *uniqueIndexName, NSString *configDefaultValue, jboolean foreignAutoRefresh);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldFieldType)

#endif

#if !defined (CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldFieldType || defined(INCLUDE_CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter))
#define CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_

#define RESTRICT_CoTouchlabSqueakyFieldBaseFieldConverter 1
#define INCLUDE_CoTouchlabSqueakyFieldBaseFieldConverter 1
#include "CoTouchlabSqueakyFieldBaseFieldConverter.h"

@class CoTouchlabSqueakyFieldFieldType;
@class CoTouchlabSqueakyFieldSqlType;
@protocol AndroidDatabaseCursor;

@interface CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter : CoTouchlabSqueakyFieldBaseFieldConverter

#pragma mark Public

- (CoTouchlabSqueakyFieldSqlType *)getSqlType;

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj;

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr;

- (id)resultToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                            withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                              withInt:(jint)columnPos;

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos;

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos;

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init(CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter *new_CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter *create_CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter)

#endif

#pragma pop_macro("INCLUDE_ALL_CoTouchlabSqueakyFieldFieldType")
