//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/DatabaseField.java
//

#include "CoTouchlabSqueakyFieldDataType.h"
#include "CoTouchlabSqueakyFieldDatabaseField.h"
#include "CoTouchlabSqueakyFieldTypesVoidType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldDatabaseField__Annotations$0();

NSString *CoTouchlabSqueakyFieldDatabaseField_DEFAULT_STRING = @"__ormlite__ no default value string was specified";

@implementation CoTouchlabSqueakyFieldDatabaseField

@synthesize columnName = columnName_;
@synthesize dataType = dataType_;
@synthesize defaultValue = defaultValue_;
@synthesize canBeNull = canBeNull_;
@synthesize id__ = id___;
@synthesize generatedId = generatedId_;
@synthesize foreign = foreign_;
@synthesize useGetSet = useGetSet_;
@synthesize format = format_;
@synthesize unique = unique_;
@synthesize uniqueCombo = uniqueCombo_;
@synthesize index = index_;
@synthesize uniqueIndex = uniqueIndex_;
@synthesize indexName = indexName_;
@synthesize uniqueIndexName = uniqueIndexName_;
@synthesize foreignAutoRefresh = foreignAutoRefresh_;
@synthesize persisterClass = persisterClass_;

+ (NSString *)columnNameDefault {
  return @"";
}

+ (CoTouchlabSqueakyFieldDataType *)dataTypeDefault {
  return JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN);
}

+ (NSString *)defaultValueDefault {
  return CoTouchlabSqueakyFieldDatabaseField_DEFAULT_STRING;
}

+ (jboolean)canBeNullDefault {
  return true;
}

+ (jboolean)id__Default {
  return false;
}

+ (jboolean)generatedIdDefault {
  return false;
}

+ (jboolean)foreignDefault {
  return false;
}

+ (jboolean)useGetSetDefault {
  return false;
}

+ (NSString *)formatDefault {
  return @"";
}

+ (jboolean)uniqueDefault {
  return false;
}

+ (jboolean)uniqueComboDefault {
  return false;
}

+ (jboolean)indexDefault {
  return false;
}

+ (jboolean)uniqueIndexDefault {
  return false;
}

+ (NSString *)indexNameDefault {
  return @"";
}

+ (NSString *)uniqueIndexNameDefault {
  return @"";
}

+ (jboolean)foreignAutoRefreshDefault {
  return false;
}

+ (IOSClass *)persisterClassDefault {
  return CoTouchlabSqueakyFieldTypesVoidType_class_();
}

- (IOSClass *)annotationType {
  return CoTouchlabSqueakyFieldDatabaseField_class_();
}

- (NSString *)description {
  return @"@co.touchlab.squeaky.field.DatabaseField()";
}

- (void)dealloc {
  RELEASE_(columnName_);
  RELEASE_(dataType_);
  RELEASE_(defaultValue_);
  RELEASE_(format_);
  RELEASE_(indexName_);
  RELEASE_(uniqueIndexName_);
  RELEASE_(persisterClass_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabSqueakyFieldDataType;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(columnName);
  methods[1].selector = @selector(dataType);
  methods[2].selector = @selector(defaultValue);
  methods[3].selector = @selector(canBeNull);
  methods[4].selector = @selector(id);
  methods[5].selector = @selector(generatedId);
  methods[6].selector = @selector(foreign);
  methods[7].selector = @selector(useGetSet);
  methods[8].selector = @selector(format);
  methods[9].selector = @selector(unique);
  methods[10].selector = @selector(uniqueCombo);
  methods[11].selector = @selector(index);
  methods[12].selector = @selector(uniqueIndex);
  methods[13].selector = @selector(indexName);
  methods[14].selector = @selector(uniqueIndexName);
  methods[15].selector = @selector(foreignAutoRefresh);
  methods[16].selector = @selector(persisterClass);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_STRING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &CoTouchlabSqueakyFieldDatabaseField_DEFAULT_STRING, (void *)&CoTouchlabSqueakyFieldDatabaseField__Annotations$0 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldDatabaseField = { "DatabaseField", "co.touchlab.squeaky.field", ptrTable, methods, fields, 7, 0x2609, 17, 1, -1, -1, -1, -1, 1 };
  return &_CoTouchlabSqueakyFieldDatabaseField;
}

@end

id<CoTouchlabSqueakyFieldDatabaseField> create_CoTouchlabSqueakyFieldDatabaseField(jboolean canBeNull, NSString *columnName, CoTouchlabSqueakyFieldDataType *dataType, NSString *defaultValue, jboolean foreign, jboolean foreignAutoRefresh, NSString *format, jboolean generatedId, jboolean id__, jboolean index, NSString *indexName, IOSClass *persisterClass, jboolean unique, jboolean uniqueCombo, jboolean uniqueIndex, NSString *uniqueIndexName, jboolean useGetSet) {
  CoTouchlabSqueakyFieldDatabaseField *self = AUTORELEASE([[CoTouchlabSqueakyFieldDatabaseField alloc] init]);
  self->canBeNull_ = canBeNull;
  self->columnName_ = RETAIN_(columnName);
  self->dataType_ = RETAIN_(dataType);
  self->defaultValue_ = RETAIN_(defaultValue);
  self->foreign_ = foreign;
  self->foreignAutoRefresh_ = foreignAutoRefresh;
  self->format_ = RETAIN_(format);
  self->generatedId_ = generatedId;
  self->id___ = id__;
  self->index_ = index;
  self->indexName_ = RETAIN_(indexName);
  self->persisterClass_ = RETAIN_(persisterClass);
  self->unique_ = unique;
  self->uniqueCombo_ = uniqueCombo;
  self->uniqueIndex_ = uniqueIndex;
  self->uniqueIndexName_ = RETAIN_(uniqueIndexName);
  self->useGetSet_ = useGetSet;
  return self;
}

IOSObjectArray *CoTouchlabSqueakyFieldDatabaseField__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:1 type:NSObject_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldDatabaseField)
