//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSubscriptionsSequentialSubscription")
#ifdef RESTRICT_RxInternalSubscriptionsSequentialSubscription
#define INCLUDE_ALL_RxInternalSubscriptionsSequentialSubscription 0
#else
#define INCLUDE_ALL_RxInternalSubscriptionsSequentialSubscription 1
#endif
#undef RESTRICT_RxInternalSubscriptionsSequentialSubscription

#if !defined (RxInternalSubscriptionsSequentialSubscription_) && (INCLUDE_ALL_RxInternalSubscriptionsSequentialSubscription || defined(INCLUDE_RxInternalSubscriptionsSequentialSubscription))
#define RxInternalSubscriptionsSequentialSubscription_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "RxSubscription.h"

@interface RxInternalSubscriptionsSequentialSubscription : JavaUtilConcurrentAtomicAtomicReference < RxSubscription >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)initial;

- (id<RxSubscription>)current;

- (id<RxSubscription>)get;

- (id<RxSubscription>)getAndSetWithId:(id<RxSubscription>)arg0;

- (jboolean)isUnsubscribed;

- (jboolean)replaceWithRxSubscription:(id<RxSubscription>)next;

- (jboolean)replaceWeakWithRxSubscription:(id<RxSubscription>)next;

- (void)unsubscribe;

- (jboolean)updateWithRxSubscription:(id<RxSubscription>)next;

- (jboolean)updateWeakWithRxSubscription:(id<RxSubscription>)next;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSubscriptionsSequentialSubscription)

FOUNDATION_EXPORT void RxInternalSubscriptionsSequentialSubscription_init(RxInternalSubscriptionsSequentialSubscription *self);

FOUNDATION_EXPORT RxInternalSubscriptionsSequentialSubscription *new_RxInternalSubscriptionsSequentialSubscription_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSubscriptionsSequentialSubscription *create_RxInternalSubscriptionsSequentialSubscription_init();

FOUNDATION_EXPORT void RxInternalSubscriptionsSequentialSubscription_initWithRxSubscription_(RxInternalSubscriptionsSequentialSubscription *self, id<RxSubscription> initial);

FOUNDATION_EXPORT RxInternalSubscriptionsSequentialSubscription *new_RxInternalSubscriptionsSequentialSubscription_initWithRxSubscription_(id<RxSubscription> initial) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSubscriptionsSequentialSubscription *create_RxInternalSubscriptionsSequentialSubscription_initWithRxSubscription_(id<RxSubscription> initial);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSubscriptionsSequentialSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSubscriptionsSequentialSubscription")
