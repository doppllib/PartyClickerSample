//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxNotification.h"
#include "RxObserver.h"
#include "RxObserversTestObserver.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface RxObserversTestObserver () {
 @public
  id<RxObserver> delegate_;
  id<JavaUtilList> onNextEvents_;
  id<JavaUtilList> onErrorEvents_;
  id<JavaUtilList> onCompletedEvents_;
}

@end

J2OBJC_FIELD_SETTER(RxObserversTestObserver, delegate_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxObserversTestObserver, onNextEvents_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxObserversTestObserver, onErrorEvents_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxObserversTestObserver, onCompletedEvents_, id<JavaUtilList>)

inline id<RxObserver> RxObserversTestObserver_get_INERT();
static id<RxObserver> RxObserversTestObserver_INERT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxObserversTestObserver, INERT, id<RxObserver>)

__attribute__((unused)) static void RxObserversTestObserver_assertionErrorWithNSString_(RxObserversTestObserver *self, NSString *message);

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserver__Annotations$0();

@interface RxObserversTestObserver_1 : NSObject < RxObserver >

- (instancetype)init;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestObserver_1)

__attribute__((unused)) static void RxObserversTestObserver_1_init(RxObserversTestObserver_1 *self);

__attribute__((unused)) static RxObserversTestObserver_1 *new_RxObserversTestObserver_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestObserver_1 *create_RxObserversTestObserver_1_init();

J2OBJC_INITIALIZED_DEFN(RxObserversTestObserver)

@implementation RxObserversTestObserver

- (instancetype)initWithRxObserver:(id<RxObserver>)delegate {
  RxObserversTestObserver_initWithRxObserver_(self, delegate);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCompleted {
  [((id<JavaUtilList>) nil_chk(onCompletedEvents_)) addWithId:RxNotification_createOnCompleted()];
  [((id<RxObserver>) nil_chk(delegate_)) onCompleted];
}

- (id<JavaUtilList>)getOnCompletedEvents {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(onCompletedEvents_);
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilList>) nil_chk(onErrorEvents_)) addWithId:e];
  [((id<RxObserver>) nil_chk(delegate_)) onErrorWithNSException:e];
}

- (id<JavaUtilList>)getOnErrorEvents {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(onErrorEvents_);
}

- (void)onNextWithId:(id)t {
  [((id<JavaUtilList>) nil_chk(onNextEvents_)) addWithId:t];
  [((id<RxObserver>) nil_chk(delegate_)) onNextWithId:t];
}

- (id<JavaUtilList>)getOnNextEvents {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(onNextEvents_);
}

- (id<JavaUtilList>)getEvents {
  JavaUtilArrayList *events = create_JavaUtilArrayList_init();
  [events addWithId:onNextEvents_];
  [events addWithId:onErrorEvents_];
  [events addWithId:onCompletedEvents_];
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(events);
}

- (void)assertReceivedOnNextWithJavaUtilList:(id<JavaUtilList>)items {
  if ([((id<JavaUtilList>) nil_chk(onNextEvents_)) size] != [((id<JavaUtilList>) nil_chk(items)) size]) {
    RxObserversTestObserver_assertionErrorWithNSString_(self, JreStrcat("$I$I$@$@C", @"Number of items does not match. Provided: ", [items size], @"  Actual: ", [onNextEvents_ size], @".\nProvided values: ", items, @"\nActual values: ", onNextEvents_, 0x000a));
  }
  for (jint i = 0; i < [items size]; i++) {
    id expected = [items getWithInt:i];
    id actual = [onNextEvents_ getWithInt:i];
    if (expected == nil) {
      if (actual != nil) {
        RxObserversTestObserver_assertionErrorWithNSString_(self, JreStrcat("$I$@$", @"Value at index: ", i, @" expected to be [null] but was: [", actual, @"]\n"));
      }
    }
    else if (![expected isEqual:actual]) {
      RxObserversTestObserver_assertionErrorWithNSString_(self, JreStrcat("$I$@$$$@$$$", @"Value at index: ", i, @" expected to be [", expected, @"] (", [[expected java_getClass] getSimpleName], @") but was: [", actual, @"] (", (actual != nil ? [[actual java_getClass] getSimpleName] : @"null"), @")\n"));
    }
  }
}

- (void)assertTerminalEvent {
  if ([((id<JavaUtilList>) nil_chk(onErrorEvents_)) size] > 1) {
    RxObserversTestObserver_assertionErrorWithNSString_(self, JreStrcat("$I", @"Too many onError events: ", [onErrorEvents_ size]));
  }
  if ([((id<JavaUtilList>) nil_chk(onCompletedEvents_)) size] > 1) {
    RxObserversTestObserver_assertionErrorWithNSString_(self, JreStrcat("$I", @"Too many onCompleted events: ", [onCompletedEvents_ size]));
  }
  if ([onCompletedEvents_ size] == 1 && [onErrorEvents_ size] == 1) {
    RxObserversTestObserver_assertionErrorWithNSString_(self, @"Received both an onError and onCompleted. Should be one or the other.");
  }
  if ([onCompletedEvents_ isEmpty] && [onErrorEvents_ isEmpty]) {
    RxObserversTestObserver_assertionErrorWithNSString_(self, @"No terminal events received.");
  }
}

- (void)assertionErrorWithNSString:(NSString *)message {
  RxObserversTestObserver_assertionErrorWithNSString_(self, message);
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(onNextEvents_);
  RELEASE_(onErrorEvents_);
  RELEASE_(onCompletedEvents_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObserver:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(getOnCompletedEvents);
  methods[4].selector = @selector(onErrorWithNSException:);
  methods[5].selector = @selector(getOnErrorEvents);
  methods[6].selector = @selector(onNextWithId:);
  methods[7].selector = @selector(getOnNextEvents);
  methods[8].selector = @selector(getEvents);
  methods[9].selector = @selector(assertReceivedOnNextWithJavaUtilList:);
  methods[10].selector = @selector(assertTerminalEvent);
  methods[11].selector = @selector(assertionErrorWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LRxObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "onNextEvents_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "onErrorEvents_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "onCompletedEvents_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "INERT", "LRxObserver;", .constantValue.asLong = 0, 0x1a, -1, 20, 21, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;", "(Lrx/Observer<TT;>;)V", "()Ljava/util/List<Lrx/Notification<TT;>;>;", "onError", "LNSException;", "()Ljava/util/List<Ljava/lang/Throwable;>;", "onNext", "LNSObject;", "(TT;)V", "()Ljava/util/List<TT;>;", "()Ljava/util/List<Ljava/lang/Object;>;", "assertReceivedOnNext", "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "assertionError", "LNSString;", "Lrx/Observer<TT;>;", "Ljava/util/List<TT;>;", "Ljava/util/List<Ljava/lang/Throwable;>;", "Ljava/util/List<Lrx/Notification<TT;>;>;", &RxObserversTestObserver_INERT, "Lrx/Observer<Ljava/lang/Object;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observer<TT;>;", (void *)&RxObserversTestObserver__Annotations$0 };
  static const J2ObjcClassInfo _RxObserversTestObserver = { "TestObserver", "rx.observers", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, 22, 23 };
  return &_RxObserversTestObserver;
}

+ (void)initialize {
  if (self == [RxObserversTestObserver class]) {
    JreStrongAssignAndConsume(&RxObserversTestObserver_INERT, new_RxObserversTestObserver_1_init());
    J2OBJC_SET_INITIALIZED(RxObserversTestObserver)
  }
}

@end

void RxObserversTestObserver_initWithRxObserver_(RxObserversTestObserver *self, id<RxObserver> delegate) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->onNextEvents_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->onErrorEvents_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->onCompletedEvents_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->delegate_, delegate);
}

RxObserversTestObserver *new_RxObserversTestObserver_initWithRxObserver_(id<RxObserver> delegate) {
  J2OBJC_NEW_IMPL(RxObserversTestObserver, initWithRxObserver_, delegate)
}

RxObserversTestObserver *create_RxObserversTestObserver_initWithRxObserver_(id<RxObserver> delegate) {
  J2OBJC_CREATE_IMPL(RxObserversTestObserver, initWithRxObserver_, delegate)
}

void RxObserversTestObserver_init(RxObserversTestObserver *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->onNextEvents_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->onErrorEvents_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->onCompletedEvents_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->delegate_, RxObserversTestObserver_INERT);
}

RxObserversTestObserver *new_RxObserversTestObserver_init() {
  J2OBJC_NEW_IMPL(RxObserversTestObserver, init)
}

RxObserversTestObserver *create_RxObserversTestObserver_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestObserver, init)
}

void RxObserversTestObserver_assertionErrorWithNSString_(RxObserversTestObserver *self, NSString *message) {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(message)) java_length] + 32);
  [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:message])) appendWithNSString:@" ("];
  jint c = [((id<JavaUtilList>) nil_chk(self->onCompletedEvents_)) size];
  [((JavaLangStringBuilder *) nil_chk([b appendWithInt:c])) appendWithNSString:@" completion"];
  if (c != 1) {
    [b appendWithChar:'s'];
  }
  [b appendWithChar:')'];
  if (![((id<JavaUtilList>) nil_chk(self->onErrorEvents_)) isEmpty]) {
    jint size = [self->onErrorEvents_ size];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@" (+"])) appendWithInt:size])) appendWithNSString:@" error"];
    if (size != 1) {
      [b appendWithChar:'s'];
    }
    [b appendWithChar:')'];
  }
  JavaLangAssertionError *ae = create_JavaLangAssertionError_initWithId_([b description]);
  if (![self->onErrorEvents_ isEmpty]) {
    if ([self->onErrorEvents_ size] == 1) {
      [ae initCauseWithNSException:[self->onErrorEvents_ getWithInt:0]];
    }
    else {
      [ae initCauseWithNSException:create_RxExceptionsCompositeException_initWithJavaUtilCollection_(self->onErrorEvents_)];
    }
  }
  @throw ae;
}

IOSObjectArray *RxObserversTestObserver__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestObserver)

@implementation RxObserversTestObserver_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestObserver_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)t {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxObserversTestObserver;", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObserversTestObserver_1 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 4, -1, -1, 5, -1 };
  return &_RxObserversTestObserver_1;
}

@end

void RxObserversTestObserver_1_init(RxObserversTestObserver_1 *self) {
  NSObject_init(self);
}

RxObserversTestObserver_1 *new_RxObserversTestObserver_1_init() {
  J2OBJC_NEW_IMPL(RxObserversTestObserver_1, init)
}

RxObserversTestObserver_1 *create_RxObserversTestObserver_1_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestObserver_1, init)
}
