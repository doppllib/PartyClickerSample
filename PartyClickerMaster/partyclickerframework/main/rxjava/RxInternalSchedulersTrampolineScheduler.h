//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersTrampolineScheduler")
#ifdef RESTRICT_RxInternalSchedulersTrampolineScheduler
#define INCLUDE_ALL_RxInternalSchedulersTrampolineScheduler 0
#else
#define INCLUDE_ALL_RxInternalSchedulersTrampolineScheduler 1
#endif
#undef RESTRICT_RxInternalSchedulersTrampolineScheduler

#if !defined (RxInternalSchedulersTrampolineScheduler_) && (INCLUDE_ALL_RxInternalSchedulersTrampolineScheduler || defined(INCLUDE_RxInternalSchedulersTrampolineScheduler))
#define RxInternalSchedulersTrampolineScheduler_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler 1
#include "RxScheduler.h"

@class RxScheduler_Worker;

@interface RxInternalSchedulersTrampolineScheduler : RxScheduler

#pragma mark Public

- (RxScheduler_Worker *)createWorker;

#pragma mark Package-Private

+ (jint)compareWithInt:(jint)x
               withInt:(jint)y;

@end

J2OBJC_STATIC_INIT(RxInternalSchedulersTrampolineScheduler)

inline RxInternalSchedulersTrampolineScheduler *RxInternalSchedulersTrampolineScheduler_get_INSTANCE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxInternalSchedulersTrampolineScheduler *RxInternalSchedulersTrampolineScheduler_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalSchedulersTrampolineScheduler, INSTANCE, RxInternalSchedulersTrampolineScheduler *)

FOUNDATION_EXPORT jint RxInternalSchedulersTrampolineScheduler_compareWithInt_withInt_(jint x, jint y);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersTrampolineScheduler)

#endif

#if !defined (RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_) && (INCLUDE_ALL_RxInternalSchedulersTrampolineScheduler || defined(INCLUDE_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler))
#define RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler_Worker 1
#include "RxScheduler.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "RxSubscription.h"

@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentPriorityBlockingQueue;
@class JavaUtilConcurrentTimeUnit;
@protocol RxFunctionsAction0;

@interface RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler : RxScheduler_Worker < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *counter_;
  JavaUtilConcurrentPriorityBlockingQueue *queue_;
}

#pragma mark Public

- (jboolean)isUnsubscribed;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)unsubscribe;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, counter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, queue_, JavaUtilConcurrentPriorityBlockingQueue *)

FOUNDATION_EXPORT void RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self);

FOUNDATION_EXPORT RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

#endif

#if !defined (RxInternalSchedulersTrampolineScheduler_TimedAction_) && (INCLUDE_ALL_RxInternalSchedulersTrampolineScheduler || defined(INCLUDE_RxInternalSchedulersTrampolineScheduler_TimedAction))
#define RxInternalSchedulersTrampolineScheduler_TimedAction_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class JavaLangLong;
@protocol RxFunctionsAction0;

@interface RxInternalSchedulersTrampolineScheduler_TimedAction : NSObject < JavaLangComparable > {
 @public
  id<RxFunctionsAction0> action_;
  JavaLangLong *execTime_;
  jint count_;
}

#pragma mark Public

- (jint)compareToWithId:(RxInternalSchedulersTrampolineScheduler_TimedAction *)that;

#pragma mark Package-Private

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                          withJavaLangLong:(JavaLangLong *)execTime
                                   withInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersTrampolineScheduler_TimedAction)

J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_TimedAction, action_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_TimedAction, execTime_, JavaLangLong *)

FOUNDATION_EXPORT void RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(RxInternalSchedulersTrampolineScheduler_TimedAction *self, id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count);

FOUNDATION_EXPORT RxInternalSchedulersTrampolineScheduler_TimedAction *new_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersTrampolineScheduler_TimedAction *create_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersTrampolineScheduler_TimedAction)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersTrampolineScheduler")
