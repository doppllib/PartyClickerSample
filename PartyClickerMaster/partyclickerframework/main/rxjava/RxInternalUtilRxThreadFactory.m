//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalUtilRxThreadFactory.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong RxInternalUtilRxThreadFactory_get_serialVersionUID();
#define RxInternalUtilRxThreadFactory_serialVersionUID -8841098858898482335LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalUtilRxThreadFactory, serialVersionUID, jlong)

@interface RxInternalUtilRxThreadFactory_1 : NSObject < JavaUtilConcurrentThreadFactory >

- (instancetype)init;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilRxThreadFactory_1)

__attribute__((unused)) static void RxInternalUtilRxThreadFactory_1_init(RxInternalUtilRxThreadFactory_1 *self);

__attribute__((unused)) static RxInternalUtilRxThreadFactory_1 *new_RxInternalUtilRxThreadFactory_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilRxThreadFactory_1 *create_RxInternalUtilRxThreadFactory_1_init();

J2OBJC_INITIALIZED_DEFN(RxInternalUtilRxThreadFactory)

id<JavaUtilConcurrentThreadFactory> RxInternalUtilRxThreadFactory_NONE;

@implementation RxInternalUtilRxThreadFactory

- (instancetype)initWithNSString:(NSString *)prefix {
  RxInternalUtilRxThreadFactory_initWithNSString_(self, prefix);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JavaLangThread *t = create_JavaLangThread_initWithJavaLangRunnable_withNSString_(r, JreStrcat("$J", prefix_, [self incrementAndGet]));
  [t setDaemonWithBoolean:true];
  return t;
}

- (void)dealloc {
  RELEASE_(prefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalUtilRxThreadFactory_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "NONE", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "prefix_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "newThread", "LJavaLangRunnable;", &RxInternalUtilRxThreadFactory_NONE };
  static const J2ObjcClassInfo _RxInternalUtilRxThreadFactory = { "RxThreadFactory", "rx.internal.util", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilRxThreadFactory;
}

+ (void)initialize {
  if (self == [RxInternalUtilRxThreadFactory class]) {
    JreStrongAssignAndConsume(&RxInternalUtilRxThreadFactory_NONE, new_RxInternalUtilRxThreadFactory_1_init());
    J2OBJC_SET_INITIALIZED(RxInternalUtilRxThreadFactory)
  }
}

@end

void RxInternalUtilRxThreadFactory_initWithNSString_(RxInternalUtilRxThreadFactory *self, NSString *prefix) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->prefix_, prefix);
}

RxInternalUtilRxThreadFactory *new_RxInternalUtilRxThreadFactory_initWithNSString_(NSString *prefix) {
  J2OBJC_NEW_IMPL(RxInternalUtilRxThreadFactory, initWithNSString_, prefix)
}

RxInternalUtilRxThreadFactory *create_RxInternalUtilRxThreadFactory_initWithNSString_(NSString *prefix) {
  J2OBJC_CREATE_IMPL(RxInternalUtilRxThreadFactory, initWithNSString_, prefix)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilRxThreadFactory)

@implementation RxInternalUtilRxThreadFactory_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilRxThreadFactory_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  @throw create_JavaLangAssertionError_initWithId_(@"No threads allowed.");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LRxInternalUtilRxThreadFactory;" };
  static const J2ObjcClassInfo _RxInternalUtilRxThreadFactory_1 = { "", "rx.internal.util", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_RxInternalUtilRxThreadFactory_1;
}

@end

void RxInternalUtilRxThreadFactory_1_init(RxInternalUtilRxThreadFactory_1 *self) {
  NSObject_init(self);
}

RxInternalUtilRxThreadFactory_1 *new_RxInternalUtilRxThreadFactory_1_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilRxThreadFactory_1, init)
}

RxInternalUtilRxThreadFactory_1 *create_RxInternalUtilRxThreadFactory_1_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilRxThreadFactory_1, init)
}
