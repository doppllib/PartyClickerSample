//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxCompletableSubscriber.h"
#include "RxInternalOperatorsCompletableOnSubscribeMergeArray.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/lang/NullPointerException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface RxInternalOperatorsCompletableOnSubscribeMergeArray_1 : NSObject < RxCompletableSubscriber > {
 @public
  RxSubscriptionsCompositeSubscription *val$set_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  id<RxCompletableSubscriber> val$s_;
  JavaUtilConcurrentAtomicAtomicInteger *val$wip_;
}

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                   withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                                 withRxCompletableSubscriber:(id<RxCompletableSubscriber>)capture$2
                   withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeMergeArray_1)

__attribute__((unused)) static void RxInternalOperatorsCompletableOnSubscribeMergeArray_1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsCompletableOnSubscribeMergeArray_1 *self, RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3);

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeMergeArray_1 *new_RxInternalOperatorsCompletableOnSubscribeMergeArray_1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeMergeArray_1 *create_RxInternalOperatorsCompletableOnSubscribeMergeArray_1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3);

@implementation RxInternalOperatorsCompletableOnSubscribeMergeArray

- (instancetype)initWithRxCompletableArray:(IOSObjectArray *)sources {
  RxInternalOperatorsCompletableOnSubscribeMergeArray_initWithRxCompletableArray_(self, sources);
  return self;
}

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  RxSubscriptionsCompositeSubscription *set = create_RxSubscriptionsCompositeSubscription_init();
  JavaUtilConcurrentAtomicAtomicInteger *wip = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(((IOSObjectArray *) nil_chk(sources_))->size_ + 1);
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((id<RxCompletableSubscriber>) nil_chk(s)) onSubscribeWithRxSubscription:set];
  {
    IOSObjectArray *a__ = sources_;
    RxCompletable * const *b__ = a__->buffer_;
    RxCompletable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      RxCompletable *c = *b__++;
      if ([set isUnsubscribed]) {
        return;
      }
      if (c == nil) {
        [set unsubscribe];
        JavaLangNullPointerException *npe = create_JavaLangNullPointerException_initWithNSString_(@"A completable source is null");
        if ([once compareAndSetWithBoolean:false withBoolean:true]) {
          [s onErrorWithNSException:npe];
          return;
        }
        else {
          RxPluginsRxJavaHooks_onErrorWithNSException_(npe);
        }
      }
      [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxInternalOperatorsCompletableOnSubscribeMergeArray_1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_(set, once, s, wip)];
    }
  }
  if ([wip decrementAndGet] == 0) {
    if ([once compareAndSetWithBoolean:false withBoolean:true]) {
      [s onCompleted];
    }
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxCompletableArray:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LRxCompletable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LRxCompletable;", "call", "LRxCompletableSubscriber;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeMergeArray = { "CompletableOnSubscribeMergeArray", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeMergeArray;
}

@end

void RxInternalOperatorsCompletableOnSubscribeMergeArray_initWithRxCompletableArray_(RxInternalOperatorsCompletableOnSubscribeMergeArray *self, IOSObjectArray *sources) {
  NSObject_init(self);
  JreStrongAssign(&self->sources_, sources);
}

RxInternalOperatorsCompletableOnSubscribeMergeArray *new_RxInternalOperatorsCompletableOnSubscribeMergeArray_initWithRxCompletableArray_(IOSObjectArray *sources) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeMergeArray, initWithRxCompletableArray_, sources)
}

RxInternalOperatorsCompletableOnSubscribeMergeArray *create_RxInternalOperatorsCompletableOnSubscribeMergeArray_initWithRxCompletableArray_(IOSObjectArray *sources) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeMergeArray, initWithRxCompletableArray_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableOnSubscribeMergeArray)

@implementation RxInternalOperatorsCompletableOnSubscribeMergeArray_1

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                   withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                                 withRxCompletableSubscriber:(id<RxCompletableSubscriber>)capture$2
                   withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3 {
  RxInternalOperatorsCompletableOnSubscribeMergeArray_1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(val$set_)) addWithRxSubscription:d];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(val$set_)) unsubscribe];
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<RxCompletableSubscriber>) nil_chk(val$s_)) onErrorWithNSException:e];
  }
  else {
    RxPluginsRxJavaHooks_onErrorWithNSException_(e);
  }
}

- (void)onCompleted {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$wip_)) decrementAndGet] == 0) {
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
      [((id<RxCompletableSubscriber>) nil_chk(val$s_)) onCompleted];
    }
  }
}

- (void)dealloc {
  RELEASE_(val$set_);
  RELEASE_(val$once_);
  RELEASE_(val$s_);
  RELEASE_(val$wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriptionsCompositeSubscription:withJavaUtilConcurrentAtomicAtomicBoolean:withRxCompletableSubscriber:withJavaUtilConcurrentAtomicAtomicInteger:);
  methods[1].selector = @selector(onSubscribeWithRxSubscription:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$set_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxCompletableSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxInternalOperatorsCompletableOnSubscribeMergeArray;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeMergeArray_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 4, 4, 4, -1, 5, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeMergeArray_1;
}

@end

void RxInternalOperatorsCompletableOnSubscribeMergeArray_1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsCompletableOnSubscribeMergeArray_1 *self, RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  JreStrongAssign(&self->val$set_, capture$0);
  JreStrongAssign(&self->val$once_, capture$1);
  JreStrongAssign(&self->val$s_, capture$2);
  JreStrongAssign(&self->val$wip_, capture$3);
  NSObject_init(self);
}

RxInternalOperatorsCompletableOnSubscribeMergeArray_1 *new_RxInternalOperatorsCompletableOnSubscribeMergeArray_1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeMergeArray_1, initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2, capture$3)
}

RxInternalOperatorsCompletableOnSubscribeMergeArray_1 *create_RxInternalOperatorsCompletableOnSubscribeMergeArray_1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<RxCompletableSubscriber> capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeMergeArray_1, initWithRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicBoolean_withRxCompletableSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2, capture$3)
}
