//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalOperatorsSingleTimeout.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSingle.h"
#include "RxSingleSubscriber.h"
#include "RxSubscription.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@implementation RxInternalOperatorsSingleTimeout

- (instancetype)initWithRxSingle_OnSubscribe:(id<RxSingle_OnSubscribe>)source
                                    withLong:(jlong)timeout
              withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                             withRxScheduler:(RxScheduler *)scheduler
                    withRxSingle_OnSubscribe:(id<RxSingle_OnSubscribe>)other {
  RxInternalOperatorsSingleTimeout_initWithRxSingle_OnSubscribe_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxSingle_OnSubscribe_(self, source, timeout, unit, scheduler, other);
  return self;
}

- (void)callWithId:(RxSingleSubscriber *)t {
  RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber *parent = create_RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_initWithRxSingleSubscriber_withRxSingle_OnSubscribe_(t, other_);
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  [parent addWithRxSubscription:w];
  [((RxSingleSubscriber *) nil_chk(t)) addWithRxSubscription:parent];
  [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:parent withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
  [((id<RxSingle_OnSubscribe>) nil_chk(source_)) callWithId:parent];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSingle_OnSubscribe:withLong:withJavaUtilConcurrentTimeUnit:withRxScheduler:withRxSingle_OnSubscribe:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxSingle_OnSubscribe;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LRxSingle_OnSubscribe;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LRxSingle_OnSubscribe;JLJavaUtilConcurrentTimeUnit;LRxScheduler;LRxSingle_OnSubscribe;", "(Lrx/Single$OnSubscribe<TT;>;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Single$OnSubscribe<+TT;>;)V", "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-TT;>;)V", "Lrx/Single$OnSubscribe<TT;>;", "Lrx/Single$OnSubscribe<+TT;>;", "LRxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Single$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleTimeout = { "SingleTimeout", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, 7, -1, 8, -1 };
  return &_RxInternalOperatorsSingleTimeout;
}

@end

void RxInternalOperatorsSingleTimeout_initWithRxSingle_OnSubscribe_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxSingle_OnSubscribe_(RxInternalOperatorsSingleTimeout *self, id<RxSingle_OnSubscribe> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, id<RxSingle_OnSubscribe> other) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->other_, other);
}

RxInternalOperatorsSingleTimeout *new_RxInternalOperatorsSingleTimeout_initWithRxSingle_OnSubscribe_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxSingle_OnSubscribe_(id<RxSingle_OnSubscribe> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, id<RxSingle_OnSubscribe> other) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleTimeout, initWithRxSingle_OnSubscribe_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxSingle_OnSubscribe_, source, timeout, unit, scheduler, other)
}

RxInternalOperatorsSingleTimeout *create_RxInternalOperatorsSingleTimeout_initWithRxSingle_OnSubscribe_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxSingle_OnSubscribe_(id<RxSingle_OnSubscribe> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, id<RxSingle_OnSubscribe> other) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleTimeout, initWithRxSingle_OnSubscribe_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxSingle_OnSubscribe_, source, timeout, unit, scheduler, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsSingleTimeout)

@implementation RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber

- (instancetype)initWithRxSingleSubscriber:(RxSingleSubscriber *)actual
                  withRxSingle_OnSubscribe:(id<RxSingle_OnSubscribe>)other {
  RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_initWithRxSingleSubscriber_withRxSingle_OnSubscribe_(self, actual, other);
  return self;
}

- (void)onSuccessWithId:(id)value {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    @try {
      [((RxSingleSubscriber *) nil_chk(actual_)) onSuccessWithId:value];
    }
    @finally {
      [self unsubscribe];
    }
  }
}

- (void)onErrorWithNSException:(NSException *)error {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    @try {
      [((RxSingleSubscriber *) nil_chk(actual_)) onErrorWithNSException:error];
    }
    @finally {
      [self unsubscribe];
    }
  }
  else {
    RxPluginsRxJavaHooks_onErrorWithNSException_(error);
  }
}

- (void)call {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    @try {
      id<RxSingle_OnSubscribe> o = other_;
      if (o == nil) {
        [((RxSingleSubscriber *) nil_chk(actual_)) onErrorWithNSException:create_JavaUtilConcurrentTimeoutException_init()];
      }
      else {
        RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber *p = create_RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber_initWithRxSingleSubscriber_(actual_);
        [((RxSingleSubscriber *) nil_chk(actual_)) addWithRxSubscription:p];
        [o callWithId:p];
      }
    }
    @finally {
      [self unsubscribe];
    }
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(once_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSingleSubscriber:withRxSingle_OnSubscribe:);
  methods[1].selector = @selector(onSuccessWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LRxSingleSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LRxSingle_OnSubscribe;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleSubscriber;LRxSingle_OnSubscribe;", "(Lrx/SingleSubscriber<-TT;>;Lrx/Single$OnSubscribe<+TT;>;)V", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/SingleSubscriber<-TT;>;", "Lrx/Single$OnSubscribe<+TT;>;", "LRxInternalOperatorsSingleTimeout;", "LRxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber;", "<T:Ljava/lang/Object;>Lrx/SingleSubscriber<TT;>;Lrx/functions/Action0;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber = { "TimeoutSingleSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 4, 3, 9, 10, -1, 11, -1 };
  return &_RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber;
}

@end

void RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_initWithRxSingleSubscriber_withRxSingle_OnSubscribe_(RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber *self, RxSingleSubscriber *actual, id<RxSingle_OnSubscribe> other) {
  RxSingleSubscriber_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->other_, other);
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber *new_RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_initWithRxSingleSubscriber_withRxSingle_OnSubscribe_(RxSingleSubscriber *actual, id<RxSingle_OnSubscribe> other) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber, initWithRxSingleSubscriber_withRxSingle_OnSubscribe_, actual, other)
}

RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber *create_RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_initWithRxSingleSubscriber_withRxSingle_OnSubscribe_(RxSingleSubscriber *actual, id<RxSingle_OnSubscribe> other) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber, initWithRxSingleSubscriber_withRxSingle_OnSubscribe_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber)

@implementation RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber

- (instancetype)initWithRxSingleSubscriber:(RxSingleSubscriber *)actual {
  RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber_initWithRxSingleSubscriber_(self, actual);
  return self;
}

- (void)onSuccessWithId:(id)value {
  [((RxSingleSubscriber *) nil_chk(actual_)) onSuccessWithId:value];
}

- (void)onErrorWithNSException:(NSException *)error {
  [((RxSingleSubscriber *) nil_chk(actual_)) onErrorWithNSException:error];
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSingleSubscriber:);
  methods[1].selector = @selector(onSuccessWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LRxSingleSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-TT;>;)V", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/SingleSubscriber<-TT;>;", "LRxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber;", "<T:Ljava/lang/Object;>Lrx/SingleSubscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber = { "OtherSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 3, 1, 8, -1, -1, 9, -1 };
  return &_RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber;
}

@end

void RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber_initWithRxSingleSubscriber_(RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber *self, RxSingleSubscriber *actual) {
  RxSingleSubscriber_init(self);
  JreStrongAssign(&self->actual_, actual);
}

RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber *new_RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber_initWithRxSingleSubscriber_(RxSingleSubscriber *actual) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber, initWithRxSingleSubscriber_, actual)
}

RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber *create_RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber_initWithRxSingleSubscriber_(RxSingleSubscriber *actual) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber, initWithRxSingleSubscriber_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsSingleTimeout_TimeoutSingleSubscriber_OtherSubscriber)
