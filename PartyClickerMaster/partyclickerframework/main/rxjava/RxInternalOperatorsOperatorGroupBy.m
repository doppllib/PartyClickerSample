//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsBackpressureUtils.h"
#include "RxInternalOperatorsNotificationLite.h"
#include "RxInternalOperatorsOperatorGroupBy.h"
#include "RxInternalProducersProducerArbiter.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxInternalUtilUtilityFunctions.h"
#include "RxObservablesGroupedObservable.h"
#include "RxObserversSubscribers.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface RxInternalOperatorsOperatorGroupBy_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *val$parent_;
}

- (instancetype)initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorGroupBy_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorGroupBy_1_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_1 *self, RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorGroupBy_1 *new_RxInternalOperatorsOperatorGroupBy_1_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorGroupBy_1 *create_RxInternalOperatorsOperatorGroupBy_1_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *capture$0);

@interface RxInternalOperatorsOperatorGroupBy_GroupBySubscriber ()

- (id<JavaUtilMap>)createMapWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)mapFactory
                          withRxFunctionsAction1:(id<RxFunctionsAction1>)evictionAction;

@end

__attribute__((unused)) static id<JavaUtilMap> RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_createMapWithRxFunctionsFunc1_withRxFunctionsAction1_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *self, id<RxFunctionsFunc1> mapFactory, id<RxFunctionsAction1> evictionAction);

inline jlong RxInternalOperatorsOperatorGroupBy_State_get_serialVersionUID();
#define RxInternalOperatorsOperatorGroupBy_State_serialVersionUID -3852313036005250360LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsOperatorGroupBy_State, serialVersionUID, jlong)

@implementation RxInternalOperatorsOperatorGroupBy

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector {
  RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_(self, keySelector);
  return self;
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)valueSelector {
  RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_(self, keySelector, valueSelector);
  return self;
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)valueSelector
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)mapFactory {
  RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc1_(self, keySelector, valueSelector, mapFactory);
  return self;
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)valueSelector
                                 withInt:(jint)bufferSize
                             withBoolean:(jboolean)delayError
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)mapFactory {
  RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(self, keySelector, valueSelector, bufferSize, delayError, mapFactory);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *parent;
  @try {
    parent = create_RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_initWithRxSubscriber_withRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(child, keySelector_, valueSelector_, bufferSize_, delayError_, mapFactory_);
  }
  @catch (NSException *ex) {
    RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(ex, child);
    RxSubscriber *parent2 = RxObserversSubscribers_empty();
    [((RxSubscriber *) nil_chk(parent2)) unsubscribe];
    return parent2;
  }
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOperatorGroupBy_1_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(parent))];
  [child setProducerWithRxProducer:((RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *) nil_chk(parent))->producer_GroupBySubscriber_];
  return parent;
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(valueSelector_);
  RELEASE_(mapFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, 7, -1, -1 },
    { NULL, "LRxSubscriber;", 0x1, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxFunctionsFunc1:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:withRxFunctionsFunc1:);
  methods[2].selector = @selector(initWithRxFunctionsFunc1:withRxFunctionsFunc1:withRxFunctionsFunc1:);
  methods[3].selector = @selector(initWithRxFunctionsFunc1:withRxFunctionsFunc1:withInt:withBoolean:withRxFunctionsFunc1:);
  methods[4].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "valueSelector_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mapFactory_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsFunc1;", "(Lrx/functions/Func1<-TT;+TK;>;)V", "LRxFunctionsFunc1;LRxFunctionsFunc1;", "(Lrx/functions/Func1<-TT;+TK;>;Lrx/functions/Func1<-TT;+TV;>;)V", "LRxFunctionsFunc1;LRxFunctionsFunc1;LRxFunctionsFunc1;", "(Lrx/functions/Func1<-TT;+TK;>;Lrx/functions/Func1<-TT;+TV;>;Lrx/functions/Func1<Lrx/functions/Action1<TK;>;Ljava/util/Map<TK;Ljava/lang/Object;>;>;)V", "LRxFunctionsFunc1;LRxFunctionsFunc1;IZLRxFunctionsFunc1;", "(Lrx/functions/Func1<-TT;+TK;>;Lrx/functions/Func1<-TT;+TV;>;IZLrx/functions/Func1<Lrx/functions/Action1<TK;>;Ljava/util/Map<TK;Ljava/lang/Object;>;>;)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/observables/GroupedObservable<TK;TV;>;>;)Lrx/Subscriber<-TT;>;", "Lrx/functions/Func1<-TT;+TK;>;", "Lrx/functions/Func1<-TT;+TV;>;", "Lrx/functions/Func1<Lrx/functions/Action1<TK;>;Ljava/util/Map<TK;Ljava/lang/Object;>;>;", "LRxInternalOperatorsOperatorGroupBy_GroupByProducer;LRxInternalOperatorsOperatorGroupBy_GroupBySubscriber;LRxInternalOperatorsOperatorGroupBy_GroupedUnicast;LRxInternalOperatorsOperatorGroupBy_State;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<Lrx/observables/GroupedObservable<TK;TV;>;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorGroupBy = { "OperatorGroupBy", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 5, 5, -1, 14, -1, 15, -1 };
  return &_RxInternalOperatorsOperatorGroupBy;
}

@end

void RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorGroupBy *self, id<RxFunctionsFunc1> keySelector) {
  RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(self, keySelector, RxInternalUtilUtilityFunctions_identity(), JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE), false, nil);
}

RxInternalOperatorsOperatorGroupBy *new_RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy, initWithRxFunctionsFunc1_, keySelector)
}

RxInternalOperatorsOperatorGroupBy *create_RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy, initWithRxFunctionsFunc1_, keySelector)
}

void RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_(RxInternalOperatorsOperatorGroupBy *self, id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector) {
  RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(self, keySelector, valueSelector, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE), false, nil);
}

RxInternalOperatorsOperatorGroupBy *new_RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy, initWithRxFunctionsFunc1_withRxFunctionsFunc1_, keySelector, valueSelector)
}

RxInternalOperatorsOperatorGroupBy *create_RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy, initWithRxFunctionsFunc1_withRxFunctionsFunc1_, keySelector, valueSelector)
}

void RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc1_(RxInternalOperatorsOperatorGroupBy *self, id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, id<RxFunctionsFunc1> mapFactory) {
  RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(self, keySelector, valueSelector, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE), false, mapFactory);
}

RxInternalOperatorsOperatorGroupBy *new_RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, id<RxFunctionsFunc1> mapFactory) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy, initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc1_, keySelector, valueSelector, mapFactory)
}

RxInternalOperatorsOperatorGroupBy *create_RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, id<RxFunctionsFunc1> mapFactory) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy, initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc1_, keySelector, valueSelector, mapFactory)
}

void RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(RxInternalOperatorsOperatorGroupBy *self, id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, jint bufferSize, jboolean delayError, id<RxFunctionsFunc1> mapFactory) {
  NSObject_init(self);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->valueSelector_, valueSelector);
  self->bufferSize_ = bufferSize;
  self->delayError_ = delayError;
  JreStrongAssign(&self->mapFactory_, mapFactory);
}

RxInternalOperatorsOperatorGroupBy *new_RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, jint bufferSize, jboolean delayError, id<RxFunctionsFunc1> mapFactory) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy, initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_, keySelector, valueSelector, bufferSize, delayError, mapFactory)
}

RxInternalOperatorsOperatorGroupBy *create_RxInternalOperatorsOperatorGroupBy_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, jint bufferSize, jboolean delayError, id<RxFunctionsFunc1> mapFactory) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy, initWithRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_, keySelector, valueSelector, bufferSize, delayError, mapFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorGroupBy)

@implementation RxInternalOperatorsOperatorGroupBy_1

- (instancetype)initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *)capture$0 {
  RxInternalOperatorsOperatorGroupBy_1_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(self, capture$0);
  return self;
}

- (void)call {
  [((RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *) nil_chk(val$parent_)) cancel];
}

- (void)dealloc {
  RELEASE_(val$parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$parent_", "LRxInternalOperatorsOperatorGroupBy_GroupBySubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber<TT;TK;TV;>;", "LRxInternalOperatorsOperatorGroupBy;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorGroupBy_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorGroupBy_1;
}

@end

void RxInternalOperatorsOperatorGroupBy_1_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_1 *self, RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *capture$0) {
  JreStrongAssign(&self->val$parent_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorGroupBy_1 *new_RxInternalOperatorsOperatorGroupBy_1_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy_1, initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_, capture$0)
}

RxInternalOperatorsOperatorGroupBy_1 *create_RxInternalOperatorsOperatorGroupBy_1_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy_1, initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorGroupBy_GroupByProducer

- (instancetype)initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *)parent {
  RxInternalOperatorsOperatorGroupBy_GroupByProducer_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(self, parent);
  return self;
}

- (void)requestWithLong:(jlong)n {
  [((RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *) nil_chk(parent_)) requestMoreWithLong:n];
}

- (void)__javaClone:(RxInternalOperatorsOperatorGroupBy_GroupByProducer *)original {
  [super __javaClone:original];
  [parent_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LRxInternalOperatorsOperatorGroupBy_GroupBySubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorGroupBy_GroupBySubscriber;", "(Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber<***>;)V", "request", "J", "Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber<***>;", "LRxInternalOperatorsOperatorGroupBy;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorGroupBy_GroupByProducer = { "GroupByProducer", "rx.internal.operators", ptrTable, methods, fields, 7, 0x19, 2, 1, 5, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorGroupBy_GroupByProducer;
}

@end

void RxInternalOperatorsOperatorGroupBy_GroupByProducer_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_GroupByProducer *self, RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *parent) {
  NSObject_init(self);
  self->parent_ = parent;
}

RxInternalOperatorsOperatorGroupBy_GroupByProducer *new_RxInternalOperatorsOperatorGroupBy_GroupByProducer_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *parent) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy_GroupByProducer, initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_, parent)
}

RxInternalOperatorsOperatorGroupBy_GroupByProducer *create_RxInternalOperatorsOperatorGroupBy_GroupByProducer_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *parent) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy_GroupByProducer, initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorGroupBy_GroupByProducer)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber)

id RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_NULL_KEY;

@implementation RxInternalOperatorsOperatorGroupBy_GroupBySubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)valueSelector
                             withInt:(jint)bufferSize
                         withBoolean:(jboolean)delayError
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)mapFactory {
  RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_initWithRxSubscriber_withRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(self, actual, keySelector, valueSelector, bufferSize, delayError, mapFactory);
  return self;
}

- (id<JavaUtilMap>)createMapWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)mapFactory
                          withRxFunctionsAction1:(id<RxFunctionsAction1>)evictionAction {
  return RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_createMapWithRxFunctionsFunc1_withRxFunctionsAction1_(self, mapFactory, evictionAction);
}

- (void)setProducerWithRxProducer:(id<RxProducer>)s {
  [((RxInternalProducersProducerArbiter *) nil_chk(self->s_)) setProducerWithRxProducer:s];
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  id<JavaUtilQueue> q = self->queue_;
  RxSubscriber *a = self->actual_;
  id key;
  @try {
    key = [((id<RxFunctionsFunc1>) nil_chk(keySelector_)) callWithId:t];
  }
  @catch (NSException *ex) {
    [self unsubscribe];
    [self errorAllWithRxSubscriber:a withJavaUtilQueue:q withNSException:ex];
    return;
  }
  jboolean notNew = true;
  id mapKey = key != nil ? key : RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_NULL_KEY;
  RxInternalOperatorsOperatorGroupBy_GroupedUnicast *group = [((id<JavaUtilMap>) nil_chk(groups_)) getWithId:mapKey];
  if (group == nil) {
    if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
      group = RxInternalOperatorsOperatorGroupBy_GroupedUnicast_createWithWithId_withInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withBoolean_(key, bufferSize_, self, delayError_);
      [groups_ putWithId:mapKey withId:group];
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(groupCount_)) getAndIncrement];
      notNew = false;
      [((id<JavaUtilQueue>) nil_chk(q)) offerWithId:group];
      [self drain];
    }
    else {
      return;
    }
  }
  id v;
  @try {
    v = [((id<RxFunctionsFunc1>) nil_chk(valueSelector_)) callWithId:t];
  }
  @catch (NSException *ex) {
    [self unsubscribe];
    [self errorAllWithRxSubscriber:a withJavaUtilQueue:q withNSException:ex];
    return;
  }
  [((RxInternalOperatorsOperatorGroupBy_GroupedUnicast *) nil_chk(group)) onNextWithId:v];
  if (evictedKeys_ != nil) {
    id evictedKey;
    while ((evictedKey = [evictedKeys_ poll]) != nil) {
      RxInternalOperatorsOperatorGroupBy_GroupedUnicast *g = [groups_ getWithId:evictedKey];
      if (g != nil) {
        [g onComplete];
      }
    }
  }
  if (notNew) {
    [((RxInternalProducersProducerArbiter *) nil_chk(s_)) requestWithLong:1];
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    RxPluginsRxJavaHooks_onErrorWithNSException_(t);
    return;
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(groupCount_)) decrementAndGet];
  [self drain];
}

- (void)onCompleted {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  for (RxInternalOperatorsOperatorGroupBy_GroupedUnicast * __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(groups_)) values])) {
    [((RxInternalOperatorsOperatorGroupBy_GroupedUnicast *) nil_chk(e)) onComplete];
  }
  [groups_ clear];
  if (evictedKeys_ != nil) {
    [evictedKeys_ clear];
  }
  JreAssignVolatileBoolean(&done_, true);
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(groupCount_)) decrementAndGet];
  [self drain];
}

- (void)requestMoreWithLong:(jlong)n {
  if (n < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"n >= 0 required but it was ", n));
  }
  RxInternalOperatorsBackpressureUtils_getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_GroupBySubscriber_, n);
  [self drain];
}

- (void)cancel {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(groupCount_)) decrementAndGet] == 0) {
      [self unsubscribe];
    }
  }
}

- (void)cancelWithId:(id)key {
  id mapKey = key != nil ? key : RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_NULL_KEY;
  if ([((id<JavaUtilMap>) nil_chk(groups_)) removeWithId:mapKey] != nil) {
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(groupCount_)) decrementAndGet] == 0) {
      [self unsubscribe];
    }
  }
}

- (void)drain {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<JavaUtilQueue> q = self->queue_;
  RxSubscriber *a = self->actual_;
  for (; ; ) {
    if ([self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((id<JavaUtilQueue>) nil_chk(q)) isEmpty] withRxSubscriber:a withJavaUtilQueue:q]) {
      return;
    }
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_GroupBySubscriber_)) get];
    jlong e = 0LL;
    while (e != r) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      RxObservablesGroupedObservable *t = [q poll];
      jboolean empty = t == nil;
      if ([self checkTerminatedWithBoolean:d withBoolean:empty withRxSubscriber:a withJavaUtilQueue:q]) {
        return;
      }
      if (empty) {
        break;
      }
      [((RxSubscriber *) nil_chk(a)) onNextWithId:t];
      e++;
    }
    if (e != 0LL) {
      if (r != JavaLangLong_MAX_VALUE) {
        RxInternalOperatorsBackpressureUtils_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_GroupBySubscriber_, e);
      }
      [((RxInternalProducersProducerArbiter *) nil_chk(s_)) requestWithLong:e];
    }
    missed = [wip_ addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)errorAllWithRxSubscriber:(RxSubscriber *)a
               withJavaUtilQueue:(id<JavaUtilQueue>)q
                 withNSException:(NSException *)ex {
  [((id<JavaUtilQueue>) nil_chk(q)) clear];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(groups_)) values]);
  [groups_ clear];
  if (evictedKeys_ != nil) {
    [evictedKeys_ clear];
  }
  for (RxInternalOperatorsOperatorGroupBy_GroupedUnicast * __strong e in list) {
    [((RxInternalOperatorsOperatorGroupBy_GroupedUnicast *) nil_chk(e)) onErrorWithNSException:ex];
  }
  [((RxSubscriber *) nil_chk(a)) onErrorWithNSException:ex];
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
                      withRxSubscriber:(RxSubscriber *)a
                     withJavaUtilQueue:(id<JavaUtilQueue>)q {
  if (d) {
    NSException *err = error_;
    if (err != nil) {
      [self errorAllWithRxSubscriber:a withJavaUtilQueue:q withNSException:err];
      return true;
    }
    else if (empty) {
      [((RxSubscriber *) nil_chk(actual_)) onCompleted];
      return true;
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(keySelector_);
  RELEASE_(valueSelector_);
  RELEASE_(groups_);
  RELEASE_(queue_);
  RELEASE_(producer_GroupBySubscriber_);
  RELEASE_(evictedKeys_);
  RELEASE_(s_);
  RELEASE_(cancelled_);
  RELEASE_(requested_GroupBySubscriber_);
  RELEASE_(groupCount_);
  RELEASE_(error_);
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 8, -1, 15, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, 18, -1, -1 },
    { NULL, "Z", 0x0, 19, 20, -1, 21, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:withRxFunctionsFunc1:withRxFunctionsFunc1:withInt:withBoolean:withRxFunctionsFunc1:);
  methods[1].selector = @selector(createMapWithRxFunctionsFunc1:withRxFunctionsAction1:);
  methods[2].selector = @selector(setProducerWithRxProducer:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(onErrorWithNSException:);
  methods[5].selector = @selector(onCompleted);
  methods[6].selector = @selector(requestMoreWithLong:);
  methods[7].selector = @selector(cancel);
  methods[8].selector = @selector(cancelWithId:);
  methods[9].selector = @selector(drain);
  methods[10].selector = @selector(errorAllWithRxSubscriber:withJavaUtilQueue:withNSException:);
  methods[11].selector = @selector(checkTerminatedWithBoolean:withBoolean:withRxSubscriber:withJavaUtilQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 22, -1 },
    { "keySelector_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "valueSelector_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x10, -1, -1, 24, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "groups_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 25, -1 },
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 26, -1 },
    { "producer_GroupBySubscriber_", "LRxInternalOperatorsOperatorGroupBy_GroupByProducer;", .constantValue.asLong = 0, 0x10, 27, -1, -1, -1 },
    { "evictedKeys_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 28, -1 },
    { "NULL_KEY", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "s_", "LRxInternalProducersProducerArbiter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_GroupBySubscriber_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, 30, -1, -1, -1 },
    { "groupCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LRxFunctionsFunc1;LRxFunctionsFunc1;IZLRxFunctionsFunc1;", "(Lrx/Subscriber<-Lrx/observables/GroupedObservable<TK;TV;>;>;Lrx/functions/Func1<-TT;+TK;>;Lrx/functions/Func1<-TT;+TV;>;IZLrx/functions/Func1<Lrx/functions/Action1<TK;>;Ljava/util/Map<TK;Ljava/lang/Object;>;>;)V", "createMap", "LRxFunctionsFunc1;LRxFunctionsAction1;", "(Lrx/functions/Func1<Lrx/functions/Action1<TK;>;Ljava/util/Map<TK;Ljava/lang/Object;>;>;Lrx/functions/Action1<TK;>;)Ljava/util/Map<Ljava/lang/Object;Lrx/internal/operators/OperatorGroupBy$GroupedUnicast<TK;TV;>;>;", "setProducer", "LRxProducer;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "requestMore", "J", "cancel", "(TK;)V", "errorAll", "LRxSubscriber;LJavaUtilQueue;LNSException;", "(Lrx/Subscriber<-Lrx/observables/GroupedObservable<TK;TV;>;>;Ljava/util/Queue<*>;Ljava/lang/Throwable;)V", "checkTerminated", "ZZLRxSubscriber;LJavaUtilQueue;", "(ZZLrx/Subscriber<-Lrx/observables/GroupedObservable<TK;TV;>;>;Ljava/util/Queue<*>;)Z", "Lrx/Subscriber<-Lrx/observables/GroupedObservable<TK;TV;>;>;", "Lrx/functions/Func1<-TT;+TK;>;", "Lrx/functions/Func1<-TT;+TV;>;", "Ljava/util/Map<Ljava/lang/Object;Lrx/internal/operators/OperatorGroupBy$GroupedUnicast<TK;TV;>;>;", "Ljava/util/Queue<Lrx/observables/GroupedObservable<TK;TV;>;>;", "producer", "Ljava/util/Queue<TK;>;", &RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_NULL_KEY, "requested", "LRxInternalOperatorsOperatorGroupBy;", "LRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorGroupBy_GroupBySubscriber = { "GroupBySubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x19, 12, 17, 31, 32, -1, 33, -1 };
  return &_RxInternalOperatorsOperatorGroupBy_GroupBySubscriber;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorGroupBy_GroupBySubscriber class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_NULL_KEY, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber)
  }
}

@end

void RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_initWithRxSubscriber_withRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *self, RxSubscriber *actual, id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, jint bufferSize, jboolean delayError, id<RxFunctionsFunc1> mapFactory) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->valueSelector_, valueSelector);
  self->bufferSize_ = bufferSize;
  self->delayError_ = delayError;
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
  JreStrongAssignAndConsume(&self->s_, new_RxInternalProducersProducerArbiter_init());
  [self->s_ requestWithLong:bufferSize];
  JreStrongAssignAndConsume(&self->producer_GroupBySubscriber_, new_RxInternalOperatorsOperatorGroupBy_GroupByProducer_initWithRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_(self));
  JreStrongAssignAndConsume(&self->cancelled_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->requested_GroupBySubscriber_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->groupCount_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  if (mapFactory == nil) {
    JreStrongAssignAndConsume(&self->groups_, new_JavaUtilConcurrentConcurrentHashMap_init());
    JreStrongAssign(&self->evictedKeys_, nil);
  }
  else {
    JreStrongAssignAndConsume(&self->evictedKeys_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
    JreStrongAssign(&self->groups_, RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_createMapWithRxFunctionsFunc1_withRxFunctionsAction1_(self, mapFactory, create_RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction_initWithJavaUtilQueue_(self->evictedKeys_)));
  }
}

RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *new_RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_initWithRxSubscriber_withRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(RxSubscriber *actual, id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, jint bufferSize, jboolean delayError, id<RxFunctionsFunc1> mapFactory) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber, initWithRxSubscriber_withRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_, actual, keySelector, valueSelector, bufferSize, delayError, mapFactory)
}

RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *create_RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_initWithRxSubscriber_withRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_(RxSubscriber *actual, id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, jint bufferSize, jboolean delayError, id<RxFunctionsFunc1> mapFactory) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber, initWithRxSubscriber_withRxFunctionsFunc1_withRxFunctionsFunc1_withInt_withBoolean_withRxFunctionsFunc1_, actual, keySelector, valueSelector, bufferSize, delayError, mapFactory)
}

id<JavaUtilMap> RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_createMapWithRxFunctionsFunc1_withRxFunctionsAction1_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *self, id<RxFunctionsFunc1> mapFactory, id<RxFunctionsAction1> evictionAction) {
  return [((id<RxFunctionsFunc1>) nil_chk(mapFactory)) callWithId:evictionAction];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber)

@implementation RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)evictedKeys {
  RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction_initWithJavaUtilQueue_(self, evictedKeys);
  return self;
}

- (void)callWithId:(id)key {
  [((id<JavaUtilQueue>) nil_chk(evictedKeys_)) offerWithId:key];
}

- (void)dealloc {
  RELEASE_(evictedKeys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilQueue:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "evictedKeys_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilQueue;", "(Ljava/util/Queue<TK;>;)V", "call", "LNSObject;", "(TK;)V", "Ljava/util/Queue<TK;>;", "LRxInternalOperatorsOperatorGroupBy_GroupBySubscriber;", "<K:Ljava/lang/Object;>Ljava/lang/Object;Lrx/functions/Action1<TK;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction = { "EvictionAction", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8, 2, 1, 6, -1, -1, 7, -1 };
  return &_RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction;
}

@end

void RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction_initWithJavaUtilQueue_(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction *self, id<JavaUtilQueue> evictedKeys) {
  NSObject_init(self);
  JreStrongAssign(&self->evictedKeys_, evictedKeys);
}

RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction *new_RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction_initWithJavaUtilQueue_(id<JavaUtilQueue> evictedKeys) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction, initWithJavaUtilQueue_, evictedKeys)
}

RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction *create_RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction_initWithJavaUtilQueue_(id<JavaUtilQueue> evictedKeys) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction, initWithJavaUtilQueue_, evictedKeys)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber_EvictionAction)

@implementation RxInternalOperatorsOperatorGroupBy_GroupedUnicast

+ (RxInternalOperatorsOperatorGroupBy_GroupedUnicast *)createWithWithId:(id)key
                                                                withInt:(jint)bufferSize
               withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *)parent
                                                            withBoolean:(jboolean)delayError {
  return RxInternalOperatorsOperatorGroupBy_GroupedUnicast_createWithWithId_withInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withBoolean_(key, bufferSize, parent, delayError);
}

- (instancetype)initWithId:(id)key
withRxInternalOperatorsOperatorGroupBy_State:(RxInternalOperatorsOperatorGroupBy_State *)state {
  RxInternalOperatorsOperatorGroupBy_GroupedUnicast_initWithId_withRxInternalOperatorsOperatorGroupBy_State_(self, key, state);
  return self;
}

- (void)onNextWithId:(id)t {
  [((RxInternalOperatorsOperatorGroupBy_State *) nil_chk(state_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxInternalOperatorsOperatorGroupBy_State *) nil_chk(state_)) onErrorWithNSException:e];
}

- (void)onComplete {
  [((RxInternalOperatorsOperatorGroupBy_State *) nil_chk(state_)) onComplete];
}

- (void)dealloc {
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalOperatorsOperatorGroupBy_GroupedUnicast;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithWithId:withInt:withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:withBoolean:);
  methods[1].selector = @selector(initWithId:withRxInternalOperatorsOperatorGroupBy_State:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LRxInternalOperatorsOperatorGroupBy_State;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "createWith", "LNSObject;ILRxInternalOperatorsOperatorGroupBy_GroupBySubscriber;Z", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>(TK;ILrx/internal/operators/OperatorGroupBy$GroupBySubscriber<*TK;TT;>;Z)Lrx/internal/operators/OperatorGroupBy$GroupedUnicast<TK;TT;>;", "LNSObject;LRxInternalOperatorsOperatorGroupBy_State;", "(TK;Lrx/internal/operators/OperatorGroupBy$State<TT;TK;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/internal/operators/OperatorGroupBy$State<TT;TK;>;", "LRxInternalOperatorsOperatorGroupBy;", "<K:Ljava/lang/Object;T:Ljava/lang/Object;>Lrx/observables/GroupedObservable<TK;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorGroupBy_GroupedUnicast = { "GroupedUnicast", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 5, 1, 11, -1, -1, 12, -1 };
  return &_RxInternalOperatorsOperatorGroupBy_GroupedUnicast;
}

@end

RxInternalOperatorsOperatorGroupBy_GroupedUnicast *RxInternalOperatorsOperatorGroupBy_GroupedUnicast_createWithWithId_withInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withBoolean_(id key, jint bufferSize, RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *parent, jboolean delayError) {
  RxInternalOperatorsOperatorGroupBy_GroupedUnicast_initialize();
  RxInternalOperatorsOperatorGroupBy_State *state = create_RxInternalOperatorsOperatorGroupBy_State_initWithInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withId_withBoolean_(bufferSize, parent, key, delayError);
  return create_RxInternalOperatorsOperatorGroupBy_GroupedUnicast_initWithId_withRxInternalOperatorsOperatorGroupBy_State_(key, state);
}

void RxInternalOperatorsOperatorGroupBy_GroupedUnicast_initWithId_withRxInternalOperatorsOperatorGroupBy_State_(RxInternalOperatorsOperatorGroupBy_GroupedUnicast *self, id key, RxInternalOperatorsOperatorGroupBy_State *state) {
  RxObservablesGroupedObservable_initWithId_withRxObservable_OnSubscribe_(self, key, state);
  JreStrongAssign(&self->state_, state);
}

RxInternalOperatorsOperatorGroupBy_GroupedUnicast *new_RxInternalOperatorsOperatorGroupBy_GroupedUnicast_initWithId_withRxInternalOperatorsOperatorGroupBy_State_(id key, RxInternalOperatorsOperatorGroupBy_State *state) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy_GroupedUnicast, initWithId_withRxInternalOperatorsOperatorGroupBy_State_, key, state)
}

RxInternalOperatorsOperatorGroupBy_GroupedUnicast *create_RxInternalOperatorsOperatorGroupBy_GroupedUnicast_initWithId_withRxInternalOperatorsOperatorGroupBy_State_(id key, RxInternalOperatorsOperatorGroupBy_State *state) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy_GroupedUnicast, initWithId_withRxInternalOperatorsOperatorGroupBy_State_, key, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorGroupBy_GroupedUnicast)

@implementation RxInternalOperatorsOperatorGroupBy_State

- (instancetype)initWithInt:(jint)bufferSize
withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:(RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *)parent
                     withId:(id)key
                withBoolean:(jboolean)delayError {
  RxInternalOperatorsOperatorGroupBy_State_initWithInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withId_withBoolean_(self, bufferSize, parent, key, delayError);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (n < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"n >= required but it was ", n));
  }
  if (n != 0LL) {
    RxInternalOperatorsBackpressureUtils_getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (jboolean)isUnsubscribed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get];
}

- (void)unsubscribe {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if ([self getAndIncrement] == 0) {
      [((RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *) nil_chk(parent_)) cancelWithId:key_];
    }
  }
}

- (void)callWithId:(RxSubscriber *)s {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxSubscriber *) nil_chk(s)) addWithRxSubscription:self];
    [s setProducerWithRxProducer:self];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:s];
    [self drain];
  }
  else {
    [((RxSubscriber *) nil_chk(s)) onErrorWithNSException:create_JavaLangIllegalStateException_initWithNSString_(@"Only one Subscriber allowed!")];
  }
}

- (void)onNextWithId:(id)t {
  if (t == nil) {
    JreStrongAssignAndConsume(&error_, new_JavaLangNullPointerException_init());
    JreAssignVolatileBoolean(&done_, true);
  }
  else {
    [((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:RxInternalOperatorsNotificationLite_nextWithId_(t)];
  }
  [self drain];
}

- (void)onErrorWithNSException:(NSException *)e {
  JreStrongAssign(&error_, e);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<JavaUtilQueue> q = queue_;
  jboolean delayError = self->delayError_;
  RxSubscriber *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) get];
  for (; ; ) {
    if (a != nil) {
      if ([self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((id<JavaUtilQueue>) nil_chk(q)) isEmpty] withRxSubscriber:a withBoolean:delayError]) {
        return;
      }
      jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
      jlong e = 0;
      while (e != r) {
        jboolean d = JreLoadVolatileBoolean(&done_);
        id v = [q poll];
        jboolean empty = v == nil;
        if ([self checkTerminatedWithBoolean:d withBoolean:empty withRxSubscriber:a withBoolean:delayError]) {
          return;
        }
        if (empty) {
          break;
        }
        [a onNextWithId:RxInternalOperatorsNotificationLite_getValueWithId_(v)];
        e++;
      }
      if (e != 0LL) {
        if (r != JavaLangLong_MAX_VALUE) {
          RxInternalOperatorsBackpressureUtils_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, e);
        }
        [((RxInternalProducersProducerArbiter *) nil_chk(((RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *) nil_chk(parent_))->s_)) requestWithLong:e];
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
    if (a == nil) {
      a = [actual_ get];
    }
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
                      withRxSubscriber:(RxSubscriber *)a
                           withBoolean:(jboolean)delayError {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
    [((id<JavaUtilQueue>) nil_chk(queue_)) clear];
    [((RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *) nil_chk(parent_)) cancelWithId:key_];
    return true;
  }
  if (d) {
    if (delayError) {
      if (empty) {
        NSException *e = error_;
        if (e != nil) {
          [((RxSubscriber *) nil_chk(a)) onErrorWithNSException:e];
        }
        else {
          [((RxSubscriber *) nil_chk(a)) onCompleted];
        }
        return true;
      }
    }
    else {
      NSException *e = error_;
      if (e != nil) {
        [((id<JavaUtilQueue>) nil_chk(queue_)) clear];
        [((RxSubscriber *) nil_chk(a)) onErrorWithNSException:e];
        return true;
      }
      else if (empty) {
        [((RxSubscriber *) nil_chk(a)) onCompleted];
        return true;
      }
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(queue_);
  RELEASE_(parent_);
  RELEASE_(requested_);
  RELEASE_(error_);
  RELEASE_(cancelled_);
  RELEASE_(actual_);
  RELEASE_(once_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 12, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber:withId:withBoolean:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(isUnsubscribed);
  methods[3].selector = @selector(unsubscribe);
  methods[4].selector = @selector(callWithId:);
  methods[5].selector = @selector(onNextWithId:);
  methods[6].selector = @selector(onErrorWithNSException:);
  methods[7].selector = @selector(onComplete);
  methods[8].selector = @selector(drain);
  methods[9].selector = @selector(checkTerminatedWithBoolean:withBoolean:withRxSubscriber:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalOperatorsOperatorGroupBy_State_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "parent_", "LRxInternalOperatorsOperatorGroupBy_GroupBySubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 17, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "actual_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILRxInternalOperatorsOperatorGroupBy_GroupBySubscriber;LNSObject;Z", "(ILrx/internal/operators/OperatorGroupBy$GroupBySubscriber<*TK;TT;>;TK;Z)V", "request", "J", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "checkTerminated", "ZZLRxSubscriber;Z", "(ZZLrx/Subscriber<-TT;>;Z)Z", "TK;", "Ljava/util/Queue<Ljava/lang/Object;>;", "Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber<*TK;TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscriber<-TT;>;>;", "LRxInternalOperatorsOperatorGroupBy;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lrx/Producer;Lrx/Subscription;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorGroupBy_State = { "State", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 10, 11, 19, -1, -1, 20, -1 };
  return &_RxInternalOperatorsOperatorGroupBy_State;
}

@end

void RxInternalOperatorsOperatorGroupBy_State_initWithInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withId_withBoolean_(RxInternalOperatorsOperatorGroupBy_State *self, jint bufferSize, RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *parent, id key, jboolean delayError) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->key_, key);
  self->delayError_ = delayError;
  JreStrongAssignAndConsume(&self->cancelled_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->actual_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

RxInternalOperatorsOperatorGroupBy_State *new_RxInternalOperatorsOperatorGroupBy_State_initWithInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withId_withBoolean_(jint bufferSize, RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *parent, id key, jboolean delayError) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorGroupBy_State, initWithInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withId_withBoolean_, bufferSize, parent, key, delayError)
}

RxInternalOperatorsOperatorGroupBy_State *create_RxInternalOperatorsOperatorGroupBy_State_initWithInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withId_withBoolean_(jint bufferSize, RxInternalOperatorsOperatorGroupBy_GroupBySubscriber *parent, id key, jboolean delayError) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorGroupBy_State, initWithInt_withRxInternalOperatorsOperatorGroupBy_GroupBySubscriber_withId_withBoolean_, bufferSize, parent, key, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorGroupBy_State)
