//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager")
#ifdef RESTRICT_RxSubjectsSubjectSubscriptionManager
#define INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager 0
#else
#define INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager 1
#endif
#undef RESTRICT_RxSubjectsSubjectSubscriptionManager

#if !defined (RxSubjectsSubjectSubscriptionManager_) && (INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager || defined(INCLUDE_RxSubjectsSubjectSubscriptionManager))
#define RxSubjectsSubjectSubscriptionManager_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

@class IOSObjectArray;
@class RxSubjectsSubjectSubscriptionManager_State;
@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;
@class RxSubscriber;
@protocol RxFunctionsAction1;

@interface RxSubjectsSubjectSubscriptionManager : JavaUtilConcurrentAtomicAtomicReference < RxObservable_OnSubscribe > {
 @public
  volatile_id latest_;
  jboolean active_;
  id<RxFunctionsAction1> onStart_;
  id<RxFunctionsAction1> onAdded_;
  id<RxFunctionsAction1> onTerminated_;
}

#pragma mark Public

- (instancetype)init;

- (void)callWithId:(RxSubscriber *)child;

- (RxSubjectsSubjectSubscriptionManager_State *)get;

- (RxSubjectsSubjectSubscriptionManager_State *)getAndSetWithId:(RxSubjectsSubjectSubscriptionManager_State *)arg0;

#pragma mark Package-Private

- (jboolean)addWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

- (void)addUnsubscriberWithRxSubscriber:(RxSubscriber *)child
withRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)bo;

- (id)getLatest;

- (IOSObjectArray *)nextWithId:(id)n;

- (IOSObjectArray *)observers;

- (void)removeWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

- (void)setLatestWithId:(id)value;

- (IOSObjectArray *)terminateWithId:(id)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsSubjectSubscriptionManager)

J2OBJC_VOLATILE_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, latest_, id)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, onStart_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, onAdded_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, onTerminated_, id<RxFunctionsAction1>)

FOUNDATION_EXPORT void RxSubjectsSubjectSubscriptionManager_init(RxSubjectsSubjectSubscriptionManager *self);

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager *new_RxSubjectsSubjectSubscriptionManager_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager *create_RxSubjectsSubjectSubscriptionManager_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsSubjectSubscriptionManager)

#endif

#if !defined (RxSubjectsSubjectSubscriptionManager_State_) && (INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager || defined(INCLUDE_RxSubjectsSubjectSubscriptionManager_State))
#define RxSubjectsSubjectSubscriptionManager_State_

@class IOSObjectArray;
@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;

@interface RxSubjectsSubjectSubscriptionManager_State : NSObject {
 @public
  jboolean terminated_;
  IOSObjectArray *observers_;
}

#pragma mark Public

- (instancetype)initWithBoolean:(jboolean)terminated
withRxSubjectsSubjectSubscriptionManager_SubjectObserverArray:(IOSObjectArray *)observers;

- (RxSubjectsSubjectSubscriptionManager_State *)addWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

- (RxSubjectsSubjectSubscriptionManager_State *)removeWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

@end

J2OBJC_STATIC_INIT(RxSubjectsSubjectSubscriptionManager_State)

J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager_State, observers_, IOSObjectArray *)

inline IOSObjectArray *RxSubjectsSubjectSubscriptionManager_State_get_NO_OBSERVERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *RxSubjectsSubjectSubscriptionManager_State_NO_OBSERVERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubjectsSubjectSubscriptionManager_State, NO_OBSERVERS, IOSObjectArray *)

inline RxSubjectsSubjectSubscriptionManager_State *RxSubjectsSubjectSubscriptionManager_State_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_State *RxSubjectsSubjectSubscriptionManager_State_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubjectsSubjectSubscriptionManager_State, TERMINATED, RxSubjectsSubjectSubscriptionManager_State *)

inline RxSubjectsSubjectSubscriptionManager_State *RxSubjectsSubjectSubscriptionManager_State_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_State *RxSubjectsSubjectSubscriptionManager_State_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubjectsSubjectSubscriptionManager_State, EMPTY, RxSubjectsSubjectSubscriptionManager_State *)

FOUNDATION_EXPORT void RxSubjectsSubjectSubscriptionManager_State_initWithBoolean_withRxSubjectsSubjectSubscriptionManager_SubjectObserverArray_(RxSubjectsSubjectSubscriptionManager_State *self, jboolean terminated, IOSObjectArray *observers);

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_State *new_RxSubjectsSubjectSubscriptionManager_State_initWithBoolean_withRxSubjectsSubjectSubscriptionManager_SubjectObserverArray_(jboolean terminated, IOSObjectArray *observers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_State *create_RxSubjectsSubjectSubscriptionManager_State_initWithBoolean_withRxSubjectsSubjectSubscriptionManager_SubjectObserverArray_(jboolean terminated, IOSObjectArray *observers);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsSubjectSubscriptionManager_State)

#endif

#if !defined (RxSubjectsSubjectSubscriptionManager_SubjectObserver_) && (INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager || defined(INCLUDE_RxSubjectsSubjectSubscriptionManager_SubjectObserver))
#define RxSubjectsSubjectSubscriptionManager_SubjectObserver_

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "RxObserver.h"

@class RxSubscriber;
@protocol JavaUtilList;

@interface RxSubjectsSubjectSubscriptionManager_SubjectObserver : NSObject < RxObserver > {
 @public
  RxSubscriber *actual_;
  jboolean first_;
  jboolean emitting_;
  id<JavaUtilList> queue_;
  jboolean fastPath_;
  volatile_jboolean caughtUp_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual;

- (id)index;

- (void)indexWithId:(id)newIndex;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (void)acceptWithId:(id)n;

- (void)emitFirstWithId:(id)n;

- (void)emitLoopWithJavaUtilList:(id<JavaUtilList>)localQueue
                          withId:(id)current;

- (void)emitNextWithId:(id)n;

- (id<RxObserver>)getActual;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsSubjectSubscriptionManager_SubjectObserver)

J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager_SubjectObserver, actual_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager_SubjectObserver, queue_, id<JavaUtilList>)

FOUNDATION_EXPORT void RxSubjectsSubjectSubscriptionManager_SubjectObserver_initWithRxSubscriber_(RxSubjectsSubjectSubscriptionManager_SubjectObserver *self, RxSubscriber *actual);

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_SubjectObserver *new_RxSubjectsSubjectSubscriptionManager_SubjectObserver_initWithRxSubscriber_(RxSubscriber *actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_SubjectObserver *create_RxSubjectsSubjectSubscriptionManager_SubjectObserver_initWithRxSubscriber_(RxSubscriber *actual);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsSubjectSubscriptionManager_SubjectObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager")
