//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorBufferWithTime.h"
#include "RxObserversSerializedSubscriber.h"
#include "RxScheduler.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"

@interface RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber () {
 @public
  RxInternalOperatorsOperatorBufferWithTime *this$0_;
}

@end

@interface RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *this$0_;
}

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber:(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *)outer$;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1 *self, RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1 *new_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1 *create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$);

@interface RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *this$0_;
  id<JavaUtilList> val$chunk_;
}

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber:(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *)outer$
                                                                   withJavaUtilList:(id<JavaUtilList>)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2)

__attribute__((unused)) static void RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2 *self, RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2 *new_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$, id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2 *create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$, id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber () {
 @public
  RxInternalOperatorsOperatorBufferWithTime *this$0_;
}

@end

@interface RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *this$0_;
}

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber:(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *)outer$;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1 *self, RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1 *new_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1 *create_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *outer$);

@implementation RxInternalOperatorsOperatorBufferWithTime

- (instancetype)initWithLong:(jlong)timespan
                    withLong:(jlong)timeshift
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withInt:(jint)count
             withRxScheduler:(RxScheduler *)scheduler {
  RxInternalOperatorsOperatorBufferWithTime_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(self, timespan, timeshift, unit, count, scheduler);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  RxObserversSerializedSubscriber *serialized = create_RxObserversSerializedSubscriber_initWithRxSubscriber_(child);
  if (timespan_ == timeshift_) {
    RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *parent = create_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(self, serialized, inner);
    [parent addWithRxSubscription:inner];
    [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:parent];
    [parent scheduleExact];
    return parent;
  }
  RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *parent = create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(self, serialized, inner);
  [parent addWithRxSubscription:inner];
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:parent];
  [parent startNewChunk];
  [parent scheduleChunk];
  return parent;
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxSubscriber;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withLong:withJavaUtilConcurrentTimeUnit:withInt:withRxScheduler:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeshift_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JJLJavaUtilConcurrentTimeUnit;ILRxScheduler;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/util/List<TT;>;>;)Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber;LRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<Ljava/util/List<TT;>;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorBufferWithTime = { "OperatorBufferWithTime", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, 4, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorBufferWithTime;
}

@end

void RxInternalOperatorsOperatorBufferWithTime_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(RxInternalOperatorsOperatorBufferWithTime *self, jlong timespan, jlong timeshift, JavaUtilConcurrentTimeUnit *unit, jint count, RxScheduler *scheduler) {
  NSObject_init(self);
  self->timespan_ = timespan;
  self->timeshift_ = timeshift;
  JreStrongAssign(&self->unit_, unit);
  self->count_ = count;
  JreStrongAssign(&self->scheduler_, scheduler);
}

RxInternalOperatorsOperatorBufferWithTime *new_RxInternalOperatorsOperatorBufferWithTime_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(jlong timespan, jlong timeshift, JavaUtilConcurrentTimeUnit *unit, jint count, RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorBufferWithTime, initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_, timespan, timeshift, unit, count, scheduler)
}

RxInternalOperatorsOperatorBufferWithTime *create_RxInternalOperatorsOperatorBufferWithTime_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(jlong timespan, jlong timeshift, JavaUtilConcurrentTimeUnit *unit, jint count, RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorBufferWithTime, initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_, timespan, timeshift, unit, count, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorBufferWithTime)

@implementation RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime:(RxInternalOperatorsOperatorBufferWithTime *)outer$
                                                 withRxSubscriber:(RxSubscriber *)child
                                           withRxScheduler_Worker:(RxScheduler_Worker *)inner {
  RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(self, outer$, child, inner);
  return self;
}

- (void)onNextWithId:(id)t {
  id<JavaUtilList> sizeReached = nil;
  @synchronized(self) {
    if (done_) {
      return;
    }
    id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(chunks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilList> chunk = [it next];
      [((id<JavaUtilList>) nil_chk(chunk)) addWithId:t];
      if ([chunk size] == this$0_->count_) {
        [it remove];
        if (sizeReached == nil) {
          sizeReached = create_JavaUtilLinkedList_init();
        }
        [sizeReached addWithId:chunk];
      }
    }
  }
  if (sizeReached != nil) {
    for (id<JavaUtilList> __strong chunk in sizeReached) {
      [((RxSubscriber *) nil_chk(child_)) onNextWithId:chunk];
    }
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  @synchronized(self) {
    if (done_) {
      return;
    }
    done_ = true;
    [((id<JavaUtilList>) nil_chk(chunks_)) clear];
  }
  [((RxSubscriber *) nil_chk(child_)) onErrorWithNSException:e];
  [self unsubscribe];
}

- (void)onCompleted {
  @try {
    id<JavaUtilList> sizeReached;
    @synchronized(self) {
      if (done_) {
        return;
      }
      done_ = true;
      sizeReached = create_JavaUtilLinkedList_initWithJavaUtilCollection_(chunks_);
      [((id<JavaUtilList>) nil_chk(chunks_)) clear];
    }
    for (id<JavaUtilList> __strong chunk in sizeReached) {
      [((RxSubscriber *) nil_chk(child_)) onNextWithId:chunk];
    }
  }
  @catch (NSException *t) {
    RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(t, child_);
    return;
  }
  [((RxSubscriber *) nil_chk(child_)) onCompleted];
  [self unsubscribe];
}

- (void)scheduleChunk {
  [((RxScheduler_Worker *) nil_chk(inner_)) schedulePeriodicallyWithRxFunctionsAction0:create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_(self) withLong:this$0_->timeshift_ withLong:this$0_->timeshift_ withJavaUtilConcurrentTimeUnit:this$0_->unit_];
}

- (void)startNewChunk {
  id<JavaUtilList> chunk = create_JavaUtilArrayList_init();
  @synchronized(self) {
    if (done_) {
      return;
    }
    [((id<JavaUtilList>) nil_chk(chunks_)) addWithId:chunk];
  }
  [((RxScheduler_Worker *) nil_chk(inner_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_(self, chunk) withLong:this$0_->timespan_ withJavaUtilConcurrentTimeUnit:this$0_->unit_];
}

- (void)emitChunkWithJavaUtilList:(id<JavaUtilList>)chunkToEmit {
  jboolean emit = false;
  @synchronized(self) {
    if (done_) {
      return;
    }
    id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(chunks_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilList> chunk = [it next];
      if (chunk == chunkToEmit) {
        [it remove];
        emit = true;
        break;
      }
    }
  }
  if (emit) {
    @try {
      [((RxSubscriber *) nil_chk(child_)) onNextWithId:chunkToEmit];
    }
    @catch (NSException *t) {
      RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(t, self);
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(child_);
  RELEASE_(inner_);
  RELEASE_(chunks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorBufferWithTime:withRxSubscriber:withRxScheduler_Worker:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(scheduleChunk);
  methods[5].selector = @selector(startNewChunk);
  methods[6].selector = @selector(emitChunkWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorBufferWithTime;", .constantValue.asLong = 0, 0x1012, -1, -1, 10, -1 },
    { "child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "chunks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LRxScheduler_Worker;", "(Lrx/Subscriber<-Ljava/util/List<TT;>;>;Lrx/Scheduler$Worker;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "emitChunk", "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "Lrx/internal/operators/OperatorBufferWithTime<TT;>;", "Lrx/Subscriber<-Ljava/util/List<TT;>;>;", "Ljava/util/List<Ljava/util/List<TT;>;>;", "LRxInternalOperatorsOperatorBufferWithTime;", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber = { "InexactSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x10, 7, 5, 13, -1, -1, 14, -1 };
  return &_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber;
}

@end

void RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *self, RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner) {
  JreStrongAssign(&self->this$0_, outer$);
  RxSubscriber_init(self);
  JreStrongAssign(&self->child_, child);
  JreStrongAssign(&self->inner_, inner);
  JreStrongAssignAndConsume(&self->chunks_, new_JavaUtilLinkedList_init());
}

RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *new_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber, initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_, outer$, child, inner)
}

RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber, initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_, outer$, child, inner)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber)

@implementation RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber:(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *)outer$ {
  RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_(self, outer$);
  return self;
}

- (void)call {
  [this$0_ startNewChunk];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber;", "scheduleChunk" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1;
}

@end

void RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1 *self, RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1 *new_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1, initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_, outer$)
}

RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1 *create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_1, initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_, outer$)
}

@implementation RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber:(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *)outer$
                                                                   withJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_(self, outer$, capture$0);
  return self;
}

- (void)call {
  [this$0_ emitChunkWithJavaUtilList:val$chunk_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$chunk_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber:withJavaUtilList:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$chunk_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/List<TT;>;", "LRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber;", "startNewChunk" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2;
}

@end

void RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2 *self, RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$chunk_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2 *new_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$, id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2, initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_, outer$, capture$0)
}

RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2 *create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2_initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *outer$, id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_2, initWithRxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_withJavaUtilList_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime:(RxInternalOperatorsOperatorBufferWithTime *)outer$
                                                 withRxSubscriber:(RxSubscriber *)child
                                           withRxScheduler_Worker:(RxScheduler_Worker *)inner {
  RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(self, outer$, child, inner);
  return self;
}

- (void)onNextWithId:(id)t {
  id<JavaUtilList> toEmit = nil;
  @synchronized(self) {
    if (done_) {
      return;
    }
    [((id<JavaUtilList>) nil_chk(chunk_)) addWithId:t];
    if ([((id<JavaUtilList>) nil_chk(chunk_)) size] == this$0_->count_) {
      toEmit = chunk_;
      JreStrongAssignAndConsume(&chunk_, new_JavaUtilArrayList_init());
    }
  }
  if (toEmit != nil) {
    [((RxSubscriber *) nil_chk(child_)) onNextWithId:toEmit];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  @synchronized(self) {
    if (done_) {
      return;
    }
    done_ = true;
    JreStrongAssign(&chunk_, nil);
  }
  [((RxSubscriber *) nil_chk(child_)) onErrorWithNSException:e];
  [self unsubscribe];
}

- (void)onCompleted {
  @try {
    [((RxScheduler_Worker *) nil_chk(inner_)) unsubscribe];
    id<JavaUtilList> toEmit;
    @synchronized(self) {
      if (done_) {
        return;
      }
      done_ = true;
      toEmit = chunk_;
      JreStrongAssign(&chunk_, nil);
    }
    [((RxSubscriber *) nil_chk(child_)) onNextWithId:toEmit];
  }
  @catch (NSException *t) {
    RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(t, child_);
    return;
  }
  [((RxSubscriber *) nil_chk(child_)) onCompleted];
  [self unsubscribe];
}

- (void)scheduleExact {
  [((RxScheduler_Worker *) nil_chk(inner_)) schedulePeriodicallyWithRxFunctionsAction0:create_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_(self) withLong:this$0_->timespan_ withLong:this$0_->timespan_ withJavaUtilConcurrentTimeUnit:this$0_->unit_];
}

- (void)emit {
  id<JavaUtilList> toEmit;
  @synchronized(self) {
    if (done_) {
      return;
    }
    toEmit = chunk_;
    JreStrongAssignAndConsume(&chunk_, new_JavaUtilArrayList_init());
  }
  @try {
    [((RxSubscriber *) nil_chk(child_)) onNextWithId:toEmit];
  }
  @catch (NSException *t) {
    RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(t, self);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(child_);
  RELEASE_(inner_);
  RELEASE_(chunk_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorBufferWithTime:withRxSubscriber:withRxScheduler_Worker:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(scheduleExact);
  methods[5].selector = @selector(emit);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorBufferWithTime;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "chunk_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LRxScheduler_Worker;", "(Lrx/Subscriber<-Ljava/util/List<TT;>;>;Lrx/Scheduler$Worker;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/internal/operators/OperatorBufferWithTime<TT;>;", "Lrx/Subscriber<-Ljava/util/List<TT;>;>;", "Ljava/util/List<TT;>;", "LRxInternalOperatorsOperatorBufferWithTime;", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber = { "ExactSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x10, 6, 5, 10, -1, -1, 11, -1 };
  return &_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber;
}

@end

void RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *self, RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner) {
  JreStrongAssign(&self->this$0_, outer$);
  RxSubscriber_init(self);
  JreStrongAssign(&self->child_, child);
  JreStrongAssign(&self->inner_, inner);
  JreStrongAssignAndConsume(&self->chunk_, new_JavaUtilArrayList_init());
}

RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *new_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber, initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_, outer$, child, inner)
}

RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *create_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber, initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_, outer$, child, inner)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber)

@implementation RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber:(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *)outer$ {
  RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_(self, outer$);
  return self;
}

- (void)call {
  [this$0_ emit];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber;", "scheduleExact" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1;
}

@end

void RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1 *self, RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1 *new_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1, initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_, outer$)
}

RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1 *create_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1_initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_1, initWithRxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_, outer$)
}
