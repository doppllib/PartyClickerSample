//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertJSONCompareMode.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

@interface OrgSkyscreamerJsonassertJSONCompareMode () {
 @public
  jboolean _extensible_;
  jboolean _strictOrder_;
}

@end

__attribute__((unused)) static void OrgSkyscreamerJsonassertJSONCompareMode_initWithBoolean_withBoolean_withNSString_withInt_(OrgSkyscreamerJsonassertJSONCompareMode *self, jboolean extensible, jboolean strictOrder, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(OrgSkyscreamerJsonassertJSONCompareMode)

OrgSkyscreamerJsonassertJSONCompareMode *OrgSkyscreamerJsonassertJSONCompareMode_values_[4];

@implementation OrgSkyscreamerJsonassertJSONCompareMode

- (jboolean)isExtensible {
  return _extensible_;
}

- (jboolean)hasStrictOrder {
  return _strictOrder_;
}

- (OrgSkyscreamerJsonassertJSONCompareMode *)withStrictOrderingWithBoolean:(jboolean)strictOrdering {
  if (strictOrdering) {
    return [self isExtensible] ? JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, STRICT_ORDER) : JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, STRICT);
  }
  else {
    return [self isExtensible] ? JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, LENIENT) : JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, NON_EXTENSIBLE);
  }
}

- (OrgSkyscreamerJsonassertJSONCompareMode *)withExtensibleWithBoolean:(jboolean)extensible {
  if (extensible) {
    return [self hasStrictOrder] ? JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, STRICT_ORDER) : JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, LENIENT);
  }
  else {
    return [self hasStrictOrder] ? JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, STRICT) : JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, NON_EXTENSIBLE);
  }
}

+ (IOSObjectArray *)values {
  return OrgSkyscreamerJsonassertJSONCompareMode_values();
}

+ (OrgSkyscreamerJsonassertJSONCompareMode *)valueOfWithNSString:(NSString *)name {
  return OrgSkyscreamerJsonassertJSONCompareMode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSkyscreamerJsonassertJSONCompareMode;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSkyscreamerJsonassertJSONCompareMode;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "[LOrgSkyscreamerJsonassertJSONCompareMode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSkyscreamerJsonassertJSONCompareMode;", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isExtensible);
  methods[1].selector = @selector(hasStrictOrder);
  methods[2].selector = @selector(withStrictOrderingWithBoolean:);
  methods[3].selector = @selector(withExtensibleWithBoolean:);
  methods[4].selector = @selector(values);
  methods[5].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STRICT", "LOrgSkyscreamerJsonassertJSONCompareMode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "LENIENT", "LOrgSkyscreamerJsonassertJSONCompareMode;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "NON_EXTENSIBLE", "LOrgSkyscreamerJsonassertJSONCompareMode;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "STRICT_ORDER", "LOrgSkyscreamerJsonassertJSONCompareMode;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "_extensible_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_strictOrder_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withStrictOrdering", "Z", "withExtensible", "valueOf", "LNSString;", &JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, STRICT), &JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, LENIENT), &JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, NON_EXTENSIBLE), &JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, STRICT_ORDER), "Ljava/lang/Enum<Lorg/skyscreamer/jsonassert/JSONCompareMode;>;" };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertJSONCompareMode = { "JSONCompareMode", "org.skyscreamer.jsonassert", ptrTable, methods, fields, 7, 0x4011, 6, 6, -1, -1, -1, 9, -1 };
  return &_OrgSkyscreamerJsonassertJSONCompareMode;
}

+ (void)initialize {
  if (self == [OrgSkyscreamerJsonassertJSONCompareMode class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, STRICT) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgSkyscreamerJsonassertJSONCompareMode_initWithBoolean_withBoolean_withNSString_withInt_(e, false, true, @"STRICT", 0);
    (JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, LENIENT) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgSkyscreamerJsonassertJSONCompareMode_initWithBoolean_withBoolean_withNSString_withInt_(e, true, false, @"LENIENT", 1);
    (JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, NON_EXTENSIBLE) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgSkyscreamerJsonassertJSONCompareMode_initWithBoolean_withBoolean_withNSString_withInt_(e, false, false, @"NON_EXTENSIBLE", 2);
    (JreEnum(OrgSkyscreamerJsonassertJSONCompareMode, STRICT_ORDER) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgSkyscreamerJsonassertJSONCompareMode_initWithBoolean_withBoolean_withNSString_withInt_(e, true, true, @"STRICT_ORDER", 3);
    J2OBJC_SET_INITIALIZED(OrgSkyscreamerJsonassertJSONCompareMode)
  }
}

@end

void OrgSkyscreamerJsonassertJSONCompareMode_initWithBoolean_withBoolean_withNSString_withInt_(OrgSkyscreamerJsonassertJSONCompareMode *self, jboolean extensible, jboolean strictOrder, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->_extensible_ = extensible;
  self->_strictOrder_ = strictOrder;
}

IOSObjectArray *OrgSkyscreamerJsonassertJSONCompareMode_values() {
  OrgSkyscreamerJsonassertJSONCompareMode_initialize();
  return [IOSObjectArray arrayWithObjects:OrgSkyscreamerJsonassertJSONCompareMode_values_ count:4 type:OrgSkyscreamerJsonassertJSONCompareMode_class_()];
}

OrgSkyscreamerJsonassertJSONCompareMode *OrgSkyscreamerJsonassertJSONCompareMode_valueOfWithNSString_(NSString *name) {
  OrgSkyscreamerJsonassertJSONCompareMode_initialize();
  for (int i = 0; i < 4; i++) {
    OrgSkyscreamerJsonassertJSONCompareMode *e = OrgSkyscreamerJsonassertJSONCompareMode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgSkyscreamerJsonassertJSONCompareMode *OrgSkyscreamerJsonassertJSONCompareMode_fromOrdinal(NSUInteger ordinal) {
  OrgSkyscreamerJsonassertJSONCompareMode_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return OrgSkyscreamerJsonassertJSONCompareMode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertJSONCompareMode)
