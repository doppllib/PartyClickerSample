//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxInternalOperatorsSingleFromFuture.h"
#include "RxSingleSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"

@implementation RxInternalOperatorsSingleFromFuture

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                        withLong:(jlong)timeout
                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  RxInternalOperatorsSingleFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(self, future, timeout, unit);
  return self;
}

- (void)callWithId:(RxSingleSubscriber *)t {
  id<JavaUtilConcurrentFuture> f = future_;
  [((RxSingleSubscriber *) nil_chk(t)) addWithRxSubscription:RxSubscriptionsSubscriptions_fromWithJavaUtilConcurrentFuture_(f)];
  id v;
  @try {
    if (timeout_ == 0LL) {
      v = [((id<JavaUtilConcurrentFuture>) nil_chk(f)) get];
    }
    else {
      v = [((id<JavaUtilConcurrentFuture>) nil_chk(f)) getWithLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
    }
  }
  @catch (NSException *ex) {
    RxExceptionsExceptions_throwIfFatalWithNSException_(ex);
    [t onErrorWithNSException:ex];
    return;
  }
  [t onSuccessWithId:v];
}

- (void)dealloc {
  RELEASE_(future_);
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentFuture:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "future_", "LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentFuture;JLJavaUtilConcurrentTimeUnit;", "(Ljava/util/concurrent/Future<+TT;>;JLjava/util/concurrent/TimeUnit;)V", "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-TT;>;)V", "Ljava/util/concurrent/Future<+TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Single$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleFromFuture = { "SingleFromFuture", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, -1, -1, 6, -1 };
  return &_RxInternalOperatorsSingleFromFuture;
}

@end

void RxInternalOperatorsSingleFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(RxInternalOperatorsSingleFromFuture *self, id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  NSObject_init(self);
  JreStrongAssign(&self->future_, future);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
}

RxInternalOperatorsSingleFromFuture *new_RxInternalOperatorsSingleFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleFromFuture, initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_, future, timeout, unit)
}

RxInternalOperatorsSingleFromFuture *create_RxInternalOperatorsSingleFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleFromFuture, initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_, future, timeout, unit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsSingleFromFuture)
