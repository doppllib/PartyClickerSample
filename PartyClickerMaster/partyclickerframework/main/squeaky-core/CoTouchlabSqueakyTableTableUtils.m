//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/table/TableUtils.java
//

#include "CoTouchlabSqueakyDaoSqueakyContext.h"
#include "CoTouchlabSqueakyDbSQLiteDatabase.h"
#include "CoTouchlabSqueakyFieldDataPersister.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyLoggerOLog.h"
#include "CoTouchlabSqueakyMiscSqlExceptionUtil.h"
#include "CoTouchlabSqueakyTableGeneratedTableMapper.h"
#include "CoTouchlabSqueakyTableTableInfo.h"
#include "CoTouchlabSqueakyTableTableUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/sql/SQLException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface CoTouchlabSqueakyTableTableUtils ()

- (instancetype)init;

+ (id<CoTouchlabSqueakyTableGeneratedTableMapper>)loadTableMapperWithIOSClass:(IOSClass *)dataclass;

+ (jint)createTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                            withIOSClass:(IOSClass *)clazz
                                             withBoolean:(jboolean)ifNotExists;

+ (void)clearTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                           withNSString:(NSString *)tableName;

+ (jint)doDropTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
          withCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                             withBoolean:(jboolean)ignoreErrors;

+ (jint)doDropViewWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
         withCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                            withBoolean:(jboolean)ignoreErrors;

+ (void)addDropIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                            withJavaUtilList:(id<JavaUtilList>)statements;

+ (void)addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                              withJavaUtilList:(id<JavaUtilList>)statements
                                                                   withBoolean:(jboolean)ifNotExists;

+ (void)addCreateIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                              withJavaUtilList:(id<JavaUtilList>)statements
                                                                   withBoolean:(jboolean)ifNotExists
                                                                   withBoolean:(jboolean)unique;

+ (void)addDropTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                            withJavaUtilList:(id<JavaUtilList>)statements;

+ (void)addDropViewStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                           withJavaUtilList:(id<JavaUtilList>)statements;

+ (jint)doCreateTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
            withCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                               withBoolean:(jboolean)ifNotExists;

+ (jint)doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connection
                                             withNSString:(NSString *)label
                                   withJavaUtilCollection:(id<JavaUtilCollection>)statements
                                              withBoolean:(jboolean)ignoreErrors
                                              withBoolean:(jboolean)returnsNegative
                                              withBoolean:(jboolean)expectingZero;

+ (id<JavaUtilList>)addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                                               withBoolean:(jboolean)ifNotExists;

+ (void)appendDefaultValueWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                withCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                             withId:(id)defaultValue;

+ (void)addSingleUniqueWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                          withJavaUtilList:(id<JavaUtilList>)additionalArgs;

+ (void)appendIntegerTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (void)appendFloatTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (void)appendDoubleTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

@end

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_init(CoTouchlabSqueakyTableTableUtils *self);

__attribute__((unused)) static CoTouchlabSqueakyTableTableUtils *new_CoTouchlabSqueakyTableTableUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyTableTableUtils *create_CoTouchlabSqueakyTableTableUtils_init();

__attribute__((unused)) static id<CoTouchlabSqueakyTableGeneratedTableMapper> CoTouchlabSqueakyTableTableUtils_loadTableMapperWithIOSClass_(IOSClass *dataclass);

__attribute__((unused)) static jint CoTouchlabSqueakyTableTableUtils_createTableWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, IOSClass *clazz, jboolean ifNotExists);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_clearTableWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, NSString *tableName);

__attribute__((unused)) static jint CoTouchlabSqueakyTableTableUtils_doDropTableWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, jboolean ignoreErrors);

__attribute__((unused)) static jint CoTouchlabSqueakyTableTableUtils_doDropViewWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, jboolean ignoreErrors);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_addDropIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements, jboolean ifNotExists);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_addCreateIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_withBoolean_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements, jboolean ifNotExists, jboolean unique);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_addDropTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_addDropViewStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements);

__attribute__((unused)) static jint CoTouchlabSqueakyTableTableUtils_doCreateTableWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, jboolean ifNotExists);

__attribute__((unused)) static jint CoTouchlabSqueakyTableTableUtils_doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_withJavaUtilCollection_withBoolean_withBoolean_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connection, NSString *label, id<JavaUtilCollection> statements, jboolean ignoreErrors, jboolean returnsNegative, jboolean expectingZero);

__attribute__((unused)) static id<JavaUtilList> CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, jboolean ifNotExists);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_appendDefaultValueWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_withId_(JavaLangStringBuilder *sb, CoTouchlabSqueakyFieldFieldType *fieldType, id defaultValue);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_addSingleUniqueWithCoTouchlabSqueakyFieldFieldType_withJavaUtilList_(CoTouchlabSqueakyFieldFieldType *fieldType, id<JavaUtilList> additionalArgs);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_appendIntegerTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_appendFloatTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb);

__attribute__((unused)) static void CoTouchlabSqueakyTableTableUtils_appendDoubleTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb);

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyTableTableUtils)

NSString *CoTouchlabSqueakyTableTableUtils_TAG;

@implementation CoTouchlabSqueakyTableTableUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyTableTableUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)createTablesWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                        withIOSClassArray:(IOSObjectArray *)clazz {
  return CoTouchlabSqueakyTableTableUtils_createTablesWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClassArray_(connectionSource, clazz);
}

+ (id<CoTouchlabSqueakyTableGeneratedTableMapper>)loadTableMapperWithIOSClass:(IOSClass *)dataclass {
  return CoTouchlabSqueakyTableTableUtils_loadTableMapperWithIOSClass_(dataclass);
}

+ (jint)createTablesIfNotExistsWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                                   withIOSClassArray:(IOSObjectArray *)clazz {
  return CoTouchlabSqueakyTableTableUtils_createTablesIfNotExistsWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClassArray_(connectionSource, clazz);
}

+ (id<JavaUtilList>)getCreateTableStatementsWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                                                     withIOSClass:(IOSClass *)clazz {
  return CoTouchlabSqueakyTableTableUtils_getCreateTableStatementsWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_(connectionSource, clazz);
}

+ (jint)dropTablesWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                            withBoolean:(jboolean)ignoreErrors
                                      withIOSClassArray:(IOSObjectArray *)clazz {
  return CoTouchlabSqueakyTableTableUtils_dropTablesWithCoTouchlabSqueakyDbSQLiteDatabase_withBoolean_withIOSClassArray_(connectionSource, ignoreErrors, clazz);
}

+ (jint)dropViewsWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                           withBoolean:(jboolean)ignoreErrors
                                     withIOSClassArray:(IOSObjectArray *)clazz {
  return CoTouchlabSqueakyTableTableUtils_dropViewsWithCoTouchlabSqueakyDbSQLiteDatabase_withBoolean_withIOSClassArray_(connectionSource, ignoreErrors, clazz);
}

+ (void)clearTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                           withIOSClass:(IOSClass *)clazz {
  CoTouchlabSqueakyTableTableUtils_clearTableWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_(connectionSource, clazz);
}

+ (jint)createTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                            withIOSClass:(IOSClass *)clazz
                                             withBoolean:(jboolean)ifNotExists {
  return CoTouchlabSqueakyTableTableUtils_createTableWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_withBoolean_(connectionSource, clazz, ifNotExists);
}

+ (void)clearTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
                                           withNSString:(NSString *)tableName {
  CoTouchlabSqueakyTableTableUtils_clearTableWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_(connectionSource, tableName);
}

+ (jint)doDropTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
          withCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                             withBoolean:(jboolean)ignoreErrors {
  return CoTouchlabSqueakyTableTableUtils_doDropTableWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(connectionSource, tableInfo, ignoreErrors);
}

+ (jint)doDropViewWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
         withCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                            withBoolean:(jboolean)ignoreErrors {
  return CoTouchlabSqueakyTableTableUtils_doDropViewWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(connectionSource, tableInfo, ignoreErrors);
}

+ (void)addDropIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                            withJavaUtilList:(id<JavaUtilList>)statements {
  CoTouchlabSqueakyTableTableUtils_addDropIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(tableInfo, statements);
}

+ (void)addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                              withJavaUtilList:(id<JavaUtilList>)statements
                                                                   withBoolean:(jboolean)ifNotExists {
  CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_(tableInfo, statements, ifNotExists);
}

+ (void)addCreateIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                              withJavaUtilList:(id<JavaUtilList>)statements
                                                                   withBoolean:(jboolean)ifNotExists
                                                                   withBoolean:(jboolean)unique {
  CoTouchlabSqueakyTableTableUtils_addCreateIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_withBoolean_(tableInfo, statements, ifNotExists, unique);
}

+ (void)addDropTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                            withJavaUtilList:(id<JavaUtilList>)statements {
  CoTouchlabSqueakyTableTableUtils_addDropTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(tableInfo, statements);
}

+ (void)addDropViewStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                           withJavaUtilList:(id<JavaUtilList>)statements {
  CoTouchlabSqueakyTableTableUtils_addDropViewStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(tableInfo, statements);
}

+ (jint)doCreateTableWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connectionSource
            withCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                               withBoolean:(jboolean)ifNotExists {
  return CoTouchlabSqueakyTableTableUtils_doCreateTableWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(connectionSource, tableInfo, ifNotExists);
}

+ (jint)doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase:(id<CoTouchlabSqueakyDbSQLiteDatabase>)connection
                                             withNSString:(NSString *)label
                                   withJavaUtilCollection:(id<JavaUtilCollection>)statements
                                              withBoolean:(jboolean)ignoreErrors
                                              withBoolean:(jboolean)returnsNegative
                                              withBoolean:(jboolean)expectingZero {
  return CoTouchlabSqueakyTableTableUtils_doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_withJavaUtilCollection_withBoolean_withBoolean_withBoolean_(connection, label, statements, ignoreErrors, returnsNegative, expectingZero);
}

+ (id<JavaUtilList>)addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:(id<CoTouchlabSqueakyTableGeneratedTableMapper>)tableInfo
                                                                               withBoolean:(jboolean)ifNotExists {
  return CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(tableInfo, ifNotExists);
}

+ (void)appendEscapedEntityNameWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                            withNSString:(NSString *)name {
  CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, name);
}

+ (void)appendDefaultValueWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                withCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                             withId:(id)defaultValue {
  CoTouchlabSqueakyTableTableUtils_appendDefaultValueWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_withId_(sb, fieldType, defaultValue);
}

+ (void)addPrimaryKeySqlWithCoTouchlabSqueakyFieldFieldTypeArray:(IOSObjectArray *)fieldTypes
                                                withJavaUtilList:(id<JavaUtilList>)additionalArgs {
  CoTouchlabSqueakyTableTableUtils_addPrimaryKeySqlWithCoTouchlabSqueakyFieldFieldTypeArray_withJavaUtilList_(fieldTypes, additionalArgs);
}

+ (void)addUniqueComboSqlWithCoTouchlabSqueakyFieldFieldTypeArray:(IOSObjectArray *)fieldTypes
                                                 withJavaUtilList:(id<JavaUtilList>)additionalArgs {
  CoTouchlabSqueakyTableTableUtils_addUniqueComboSqlWithCoTouchlabSqueakyFieldFieldTypeArray_withJavaUtilList_(fieldTypes, additionalArgs);
}

+ (void)appendEscapedWordWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                      withNSString:(NSString *)word {
  CoTouchlabSqueakyTableTableUtils_appendEscapedWordWithJavaLangStringBuilder_withNSString_(sb, word);
}

+ (void)addSingleUniqueWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                          withJavaUtilList:(id<JavaUtilList>)additionalArgs {
  CoTouchlabSqueakyTableTableUtils_addSingleUniqueWithCoTouchlabSqueakyFieldFieldType_withJavaUtilList_(fieldType, additionalArgs);
}

+ (void)appendColumnArgWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
             withCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                withJavaUtilList:(id<JavaUtilList>)additionalArgs {
  CoTouchlabSqueakyTableTableUtils_appendColumnArgWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_withJavaUtilList_(sb, fieldType, additionalArgs);
}

+ (void)appendStringTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendStringTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendLongStringTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendLongStringTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendDateTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendDateTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendBooleanTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendBooleanTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendCharTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendCharTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendByteTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendByteTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendShortTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendShortTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendIntegerTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendIntegerTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendFloatTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendFloatTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendDoubleTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendDoubleTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendByteArrayTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendByteArrayTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendSerializableTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendSerializableTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendBigDecimalNumericTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  CoTouchlabSqueakyTableTableUtils_appendBigDecimalNumericTypeWithJavaLangStringBuilder_(sb);
}

+ (void)appendLongTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
            withCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  CoTouchlabSqueakyTableTableUtils_appendLongTypeWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_(sb, fieldType);
}

+ (void)configureGeneratedIdWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                  withCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  CoTouchlabSqueakyTableTableUtils_configureGeneratedIdWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_(sb, fieldType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 0, 1, 2, 3, -1, -1 },
    { NULL, "LCoTouchlabSqueakyTableGeneratedTableMapper;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 6, 1, 2, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 7, 8, 2, 9, -1, -1 },
    { NULL, "I", 0x89, 10, 11, 2, 12, -1, -1 },
    { NULL, "I", 0x89, 13, 11, 2, 12, -1, -1 },
    { NULL, "V", 0x9, 14, 8, 2, 15, -1, -1 },
    { NULL, "I", 0xa, 16, 17, 2, 18, -1, -1 },
    { NULL, "V", 0xa, 14, 19, 2, -1, -1, -1 },
    { NULL, "I", 0xa, 20, 21, 2, 22, -1, -1 },
    { NULL, "I", 0xa, 23, 21, 2, 22, -1, -1 },
    { NULL, "V", 0xa, 24, 25, 2, 26, -1, -1 },
    { NULL, "V", 0xa, 27, 28, 2, 29, -1, -1 },
    { NULL, "V", 0xa, 30, 31, 2, 32, -1, -1 },
    { NULL, "V", 0xa, 33, 25, 2, 26, -1, -1 },
    { NULL, "V", 0xa, 34, 25, 2, 26, -1, -1 },
    { NULL, "I", 0xa, 35, 21, 2, 22, -1, -1 },
    { NULL, "I", 0xa, 36, 37, 2, 38, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 27, 39, 2, 40, -1, -1 },
    { NULL, "V", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 45, 46, -1, 47, -1, -1 },
    { NULL, "V", 0x9, 48, 46, -1, 47, -1, -1 },
    { NULL, "V", 0x9, 49, 42, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 50, 51, -1, 52, -1, -1 },
    { NULL, "V", 0x9, 53, 54, 2, 55, -1, -1 },
    { NULL, "V", 0xc, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 58, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 59, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 60, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 61, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 62, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 63, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 64, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 65, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 66, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 67, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 68, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 69, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 70, 71, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 72, 71, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createTablesWithCoTouchlabSqueakyDbSQLiteDatabase:withIOSClassArray:);
  methods[2].selector = @selector(loadTableMapperWithIOSClass:);
  methods[3].selector = @selector(createTablesIfNotExistsWithCoTouchlabSqueakyDbSQLiteDatabase:withIOSClassArray:);
  methods[4].selector = @selector(getCreateTableStatementsWithCoTouchlabSqueakyDbSQLiteDatabase:withIOSClass:);
  methods[5].selector = @selector(dropTablesWithCoTouchlabSqueakyDbSQLiteDatabase:withBoolean:withIOSClassArray:);
  methods[6].selector = @selector(dropViewsWithCoTouchlabSqueakyDbSQLiteDatabase:withBoolean:withIOSClassArray:);
  methods[7].selector = @selector(clearTableWithCoTouchlabSqueakyDbSQLiteDatabase:withIOSClass:);
  methods[8].selector = @selector(createTableWithCoTouchlabSqueakyDbSQLiteDatabase:withIOSClass:withBoolean:);
  methods[9].selector = @selector(clearTableWithCoTouchlabSqueakyDbSQLiteDatabase:withNSString:);
  methods[10].selector = @selector(doDropTableWithCoTouchlabSqueakyDbSQLiteDatabase:withCoTouchlabSqueakyTableGeneratedTableMapper:withBoolean:);
  methods[11].selector = @selector(doDropViewWithCoTouchlabSqueakyDbSQLiteDatabase:withCoTouchlabSqueakyTableGeneratedTableMapper:withBoolean:);
  methods[12].selector = @selector(addDropIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:withJavaUtilList:);
  methods[13].selector = @selector(addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:withJavaUtilList:withBoolean:);
  methods[14].selector = @selector(addCreateIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:withJavaUtilList:withBoolean:withBoolean:);
  methods[15].selector = @selector(addDropTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:withJavaUtilList:);
  methods[16].selector = @selector(addDropViewStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:withJavaUtilList:);
  methods[17].selector = @selector(doCreateTableWithCoTouchlabSqueakyDbSQLiteDatabase:withCoTouchlabSqueakyTableGeneratedTableMapper:withBoolean:);
  methods[18].selector = @selector(doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase:withNSString:withJavaUtilCollection:withBoolean:withBoolean:withBoolean:);
  methods[19].selector = @selector(addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper:withBoolean:);
  methods[20].selector = @selector(appendEscapedEntityNameWithJavaLangStringBuilder:withNSString:);
  methods[21].selector = @selector(appendDefaultValueWithJavaLangStringBuilder:withCoTouchlabSqueakyFieldFieldType:withId:);
  methods[22].selector = @selector(addPrimaryKeySqlWithCoTouchlabSqueakyFieldFieldTypeArray:withJavaUtilList:);
  methods[23].selector = @selector(addUniqueComboSqlWithCoTouchlabSqueakyFieldFieldTypeArray:withJavaUtilList:);
  methods[24].selector = @selector(appendEscapedWordWithJavaLangStringBuilder:withNSString:);
  methods[25].selector = @selector(addSingleUniqueWithCoTouchlabSqueakyFieldFieldType:withJavaUtilList:);
  methods[26].selector = @selector(appendColumnArgWithJavaLangStringBuilder:withCoTouchlabSqueakyFieldFieldType:withJavaUtilList:);
  methods[27].selector = @selector(appendStringTypeWithJavaLangStringBuilder:);
  methods[28].selector = @selector(appendLongStringTypeWithJavaLangStringBuilder:);
  methods[29].selector = @selector(appendDateTypeWithJavaLangStringBuilder:);
  methods[30].selector = @selector(appendBooleanTypeWithJavaLangStringBuilder:);
  methods[31].selector = @selector(appendCharTypeWithJavaLangStringBuilder:);
  methods[32].selector = @selector(appendByteTypeWithJavaLangStringBuilder:);
  methods[33].selector = @selector(appendShortTypeWithJavaLangStringBuilder:);
  methods[34].selector = @selector(appendIntegerTypeWithJavaLangStringBuilder:);
  methods[35].selector = @selector(appendFloatTypeWithJavaLangStringBuilder:);
  methods[36].selector = @selector(appendDoubleTypeWithJavaLangStringBuilder:);
  methods[37].selector = @selector(appendByteArrayTypeWithJavaLangStringBuilder:);
  methods[38].selector = @selector(appendSerializableTypeWithJavaLangStringBuilder:);
  methods[39].selector = @selector(appendBigDecimalNumericTypeWithJavaLangStringBuilder:);
  methods[40].selector = @selector(appendLongTypeWithJavaLangStringBuilder:withCoTouchlabSqueakyFieldFieldType:);
  methods[41].selector = @selector(configureGeneratedIdWithJavaLangStringBuilder:withCoTouchlabSqueakyFieldFieldType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 73, -1, -1 },
  };
  static const void *ptrTable[] = { "createTables", "LCoTouchlabSqueakyDbSQLiteDatabase;[LIOSClass;", "LJavaSqlSQLException;", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/db/SQLiteDatabase;[Ljava/lang/Class;)I", "loadTableMapper", "LIOSClass;", "createTablesIfNotExists", "getCreateTableStatements", "LCoTouchlabSqueakyDbSQLiteDatabase;LIOSClass;", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/db/SQLiteDatabase;Ljava/lang/Class;)Ljava/util/List<Ljava/lang/String;>;", "dropTables", "LCoTouchlabSqueakyDbSQLiteDatabase;Z[LIOSClass;", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/db/SQLiteDatabase;Z[Ljava/lang/Class;)I", "dropViews", "clearTable", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/db/SQLiteDatabase;Ljava/lang/Class;)V", "createTable", "LCoTouchlabSqueakyDbSQLiteDatabase;LIOSClass;Z", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/db/SQLiteDatabase;Ljava/lang/Class;Z)I", "LCoTouchlabSqueakyDbSQLiteDatabase;LNSString;", "doDropTable", "LCoTouchlabSqueakyDbSQLiteDatabase;LCoTouchlabSqueakyTableGeneratedTableMapper;Z", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/db/SQLiteDatabase;Lco/touchlab/squeaky/table/GeneratedTableMapper<TT;>;Z)I", "doDropView", "addDropIndexStatements", "LCoTouchlabSqueakyTableGeneratedTableMapper;LJavaUtilList;", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/table/GeneratedTableMapper<TT;>;Ljava/util/List<Ljava/lang/String;>;)V", "addCreateTableStatements", "LCoTouchlabSqueakyTableGeneratedTableMapper;LJavaUtilList;Z", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/table/GeneratedTableMapper<TT;>;Ljava/util/List<Ljava/lang/String;>;Z)V", "addCreateIndexStatements", "LCoTouchlabSqueakyTableGeneratedTableMapper;LJavaUtilList;ZZ", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/table/GeneratedTableMapper<TT;>;Ljava/util/List<Ljava/lang/String;>;ZZ)V", "addDropTableStatements", "addDropViewStatements", "doCreateTable", "doStatements", "LCoTouchlabSqueakyDbSQLiteDatabase;LNSString;LJavaUtilCollection;ZZZ", "(Lco/touchlab/squeaky/db/SQLiteDatabase;Ljava/lang/String;Ljava/util/Collection<Ljava/lang/String;>;ZZZ)I", "LCoTouchlabSqueakyTableGeneratedTableMapper;Z", "<T:Ljava/lang/Object;>(Lco/touchlab/squeaky/table/GeneratedTableMapper<TT;>;Z)Ljava/util/List<Ljava/lang/String;>;", "appendEscapedEntityName", "LJavaLangStringBuilder;LNSString;", "appendDefaultValue", "LJavaLangStringBuilder;LCoTouchlabSqueakyFieldFieldType;LNSObject;", "addPrimaryKeySql", "[LCoTouchlabSqueakyFieldFieldType;LJavaUtilList;", "([Lco/touchlab/squeaky/field/FieldType;Ljava/util/List<Ljava/lang/String;>;)V", "addUniqueComboSql", "appendEscapedWord", "addSingleUnique", "LCoTouchlabSqueakyFieldFieldType;LJavaUtilList;", "(Lco/touchlab/squeaky/field/FieldType;Ljava/util/List<Ljava/lang/String;>;)V", "appendColumnArg", "LJavaLangStringBuilder;LCoTouchlabSqueakyFieldFieldType;LJavaUtilList;", "(Ljava/lang/StringBuilder;Lco/touchlab/squeaky/field/FieldType;Ljava/util/List<Ljava/lang/String;>;)V", "appendStringType", "LJavaLangStringBuilder;", "appendLongStringType", "appendDateType", "appendBooleanType", "appendCharType", "appendByteType", "appendShortType", "appendIntegerType", "appendFloatType", "appendDoubleType", "appendByteArrayType", "appendSerializableType", "appendBigDecimalNumericType", "appendLongType", "LJavaLangStringBuilder;LCoTouchlabSqueakyFieldFieldType;", "configureGeneratedId", &CoTouchlabSqueakyTableTableUtils_TAG };
  static const J2ObjcClassInfo _CoTouchlabSqueakyTableTableUtils = { "TableUtils", "co.touchlab.squeaky.table", ptrTable, methods, fields, 7, 0x1, 42, 1, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyTableTableUtils;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyTableTableUtils class]) {
    JreStrongAssign(&CoTouchlabSqueakyTableTableUtils_TAG, [CoTouchlabSqueakyTableTableUtils_class_() getSimpleName]);
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyTableTableUtils)
  }
}

@end

void CoTouchlabSqueakyTableTableUtils_init(CoTouchlabSqueakyTableTableUtils *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyTableTableUtils *new_CoTouchlabSqueakyTableTableUtils_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyTableTableUtils, init)
}

CoTouchlabSqueakyTableTableUtils *create_CoTouchlabSqueakyTableTableUtils_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyTableTableUtils, init)
}

jint CoTouchlabSqueakyTableTableUtils_createTablesWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClassArray_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, IOSObjectArray *clazz) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  jint count = 0;
  {
    IOSObjectArray *a__ = clazz;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *aClass = *b__++;
      count += CoTouchlabSqueakyTableTableUtils_createTableWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_withBoolean_(connectionSource, aClass, false);
    }
  }
  return count;
}

id<CoTouchlabSqueakyTableGeneratedTableMapper> CoTouchlabSqueakyTableTableUtils_loadTableMapperWithIOSClass_(IOSClass *dataclass) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  return CoTouchlabSqueakyDaoSqueakyContext_loadGeneratedTableMapperWithIOSClass_(dataclass);
}

jint CoTouchlabSqueakyTableTableUtils_createTablesIfNotExistsWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClassArray_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, IOSObjectArray *clazz) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  jint count = 0;
  {
    IOSObjectArray *a__ = clazz;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *aClass = *b__++;
      count += CoTouchlabSqueakyTableTableUtils_createTableWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_withBoolean_(connectionSource, aClass, true);
    }
  }
  return count;
}

id<JavaUtilList> CoTouchlabSqueakyTableTableUtils_getCreateTableStatementsWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, IOSClass *clazz) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  return CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(CoTouchlabSqueakyTableTableUtils_loadTableMapperWithIOSClass_(clazz), false);
}

jint CoTouchlabSqueakyTableTableUtils_dropTablesWithCoTouchlabSqueakyDbSQLiteDatabase_withBoolean_withIOSClassArray_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, jboolean ignoreErrors, IOSObjectArray *clazz) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  jint count = 0;
  {
    IOSObjectArray *a__ = clazz;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *aClass = *b__++;
      count += CoTouchlabSqueakyTableTableUtils_doDropTableWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(connectionSource, CoTouchlabSqueakyTableTableUtils_loadTableMapperWithIOSClass_(aClass), ignoreErrors);
    }
  }
  return count;
}

jint CoTouchlabSqueakyTableTableUtils_dropViewsWithCoTouchlabSqueakyDbSQLiteDatabase_withBoolean_withIOSClassArray_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, jboolean ignoreErrors, IOSObjectArray *clazz) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  jint count = 0;
  {
    IOSObjectArray *a__ = clazz;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *aClass = *b__++;
      count += CoTouchlabSqueakyTableTableUtils_doDropViewWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(connectionSource, CoTouchlabSqueakyTableTableUtils_loadTableMapperWithIOSClass_(aClass), ignoreErrors);
    }
  }
  return count;
}

void CoTouchlabSqueakyTableTableUtils_clearTableWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, IOSClass *clazz) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  CoTouchlabSqueakyTableTableUtils_clearTableWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_(connectionSource, [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(CoTouchlabSqueakyTableTableUtils_loadTableMapperWithIOSClass_(clazz))) getTableConfig])) getTableName]);
}

jint CoTouchlabSqueakyTableTableUtils_createTableWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClass_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, IOSClass *clazz, jboolean ifNotExists) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  return CoTouchlabSqueakyTableTableUtils_doCreateTableWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(connectionSource, CoTouchlabSqueakyTableTableUtils_loadTableMapperWithIOSClass_(clazz), ifNotExists);
}

void CoTouchlabSqueakyTableTableUtils_clearTableWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, NSString *tableName) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(48);
  [sb appendWithNSString:@"DELETE FROM "];
  CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, tableName);
  NSString *statement = [sb description];
  CoTouchlabSqueakyLoggerOLog_iWithNSString_withNSString_(CoTouchlabSqueakyTableTableUtils_TAG, JreStrcat("$$$$C", @"clearing table '{", tableName, @"}' with '{", statement, '}'));
  [((id<CoTouchlabSqueakyDbSQLiteDatabase>) nil_chk(connectionSource)) execSQLWithNSString:[sb description]];
}

jint CoTouchlabSqueakyTableTableUtils_doDropTableWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, jboolean ignoreErrors) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  CoTouchlabSqueakyLoggerOLog_iWithNSString_withNSString_(CoTouchlabSqueakyTableTableUtils_TAG, JreStrcat("$$$", @"dropping table '{", [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(tableInfo)) getTableConfig])) getTableName], @"}'"));
  id<JavaUtilList> statements = create_JavaUtilArrayList_init();
  CoTouchlabSqueakyTableTableUtils_addDropIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(tableInfo, statements);
  CoTouchlabSqueakyTableTableUtils_addDropTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(tableInfo, statements);
  return CoTouchlabSqueakyTableTableUtils_doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_withJavaUtilCollection_withBoolean_withBoolean_withBoolean_(connectionSource, @"drop", statements, ignoreErrors, false, false);
}

jint CoTouchlabSqueakyTableTableUtils_doDropViewWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, jboolean ignoreErrors) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  CoTouchlabSqueakyLoggerOLog_iWithNSString_withNSString_(CoTouchlabSqueakyTableTableUtils_TAG, JreStrcat("$$$", @"dropping table '{", [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(tableInfo)) getTableConfig])) getTableName], @"}'"));
  id<JavaUtilList> statements = create_JavaUtilArrayList_init();
  CoTouchlabSqueakyTableTableUtils_addDropViewStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(tableInfo, statements);
  return CoTouchlabSqueakyTableTableUtils_doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_withJavaUtilCollection_withBoolean_withBoolean_withBoolean_(connectionSource, @"drop", statements, ignoreErrors, false, false);
}

void CoTouchlabSqueakyTableTableUtils_addDropIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  id<JavaUtilSet> indexSet = create_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(tableInfo)) getTableConfig])) getFieldTypes];
    CoTouchlabSqueakyFieldFieldType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    CoTouchlabSqueakyFieldFieldType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CoTouchlabSqueakyFieldFieldType *fieldType = *b__++;
      NSString *indexName = [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getIndexName];
      if (indexName != nil) {
        [indexSet addWithId:indexName];
      }
      NSString *uniqueIndexName = [fieldType getUniqueIndexName];
      if (uniqueIndexName != nil) {
        [indexSet addWithId:uniqueIndexName];
      }
    }
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(48);
  for (NSString * __strong indexName in indexSet) {
    CoTouchlabSqueakyLoggerOLog_iWithNSString_withNSString_(CoTouchlabSqueakyTableTableUtils_TAG, JreStrcat("$$$$C", @"dropping index '{", indexName, @"}' for table '{", [((CoTouchlabSqueakyTableTableInfo *) nil_chk([tableInfo getTableConfig])) getTableName], '}'));
    [sb appendWithNSString:@"DROP INDEX "];
    CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, indexName);
    [((id<JavaUtilList>) nil_chk(statements)) addWithId:[sb description]];
    [sb setLengthWithInt:0];
  }
}

void CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements, jboolean ifNotExists) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(256);
  [sb appendWithNSString:@"CREATE TABLE "];
  if (ifNotExists) {
    [sb appendWithNSString:@"IF NOT EXISTS "];
  }
  CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(tableInfo)) getTableConfig])) getTableName]);
  [sb appendWithNSString:@" ("];
  id<JavaUtilList> additionalArgs = create_JavaUtilArrayList_init();
  id<JavaUtilList> statementsBefore = create_JavaUtilArrayList_init();
  id<JavaUtilList> statementsAfter = create_JavaUtilArrayList_init();
  jboolean first = true;
  {
    IOSObjectArray *a__ = [((CoTouchlabSqueakyTableTableInfo *) nil_chk([tableInfo getTableConfig])) getFieldTypes];
    CoTouchlabSqueakyFieldFieldType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    CoTouchlabSqueakyFieldFieldType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CoTouchlabSqueakyFieldFieldType *fieldType = *b__++;
      if (first) {
        first = false;
      }
      else {
        [sb appendWithNSString:@", "];
      }
      CoTouchlabSqueakyTableTableUtils_appendColumnArgWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_withJavaUtilList_(sb, fieldType, additionalArgs);
    }
  }
  CoTouchlabSqueakyTableTableUtils_addPrimaryKeySqlWithCoTouchlabSqueakyFieldFieldTypeArray_withJavaUtilList_([((CoTouchlabSqueakyTableTableInfo *) nil_chk([tableInfo getTableConfig])) getFieldTypes], additionalArgs);
  CoTouchlabSqueakyTableTableUtils_addUniqueComboSqlWithCoTouchlabSqueakyFieldFieldTypeArray_withJavaUtilList_([((CoTouchlabSqueakyTableTableInfo *) nil_chk([tableInfo getTableConfig])) getFieldTypes], additionalArgs);
  for (NSString * __strong arg in additionalArgs) {
    [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@", "])) appendWithNSString:arg];
  }
  [sb appendWithNSString:@") "];
  [((id<JavaUtilList>) nil_chk(statements)) addAllWithJavaUtilCollection:statementsBefore];
  [statements addWithId:[sb description]];
  [statements addAllWithJavaUtilCollection:statementsAfter];
  CoTouchlabSqueakyTableTableUtils_addCreateIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_withBoolean_(tableInfo, statements, ifNotExists, false);
  CoTouchlabSqueakyTableTableUtils_addCreateIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_withBoolean_(tableInfo, statements, ifNotExists, true);
}

void CoTouchlabSqueakyTableTableUtils_addCreateIndexStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_withBoolean_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements, jboolean ifNotExists, jboolean unique) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  id<JavaUtilMap> indexMap = create_JavaUtilHashMap_init();
  {
    IOSObjectArray *a__ = [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(tableInfo)) getTableConfig])) getFieldTypes];
    CoTouchlabSqueakyFieldFieldType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    CoTouchlabSqueakyFieldFieldType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CoTouchlabSqueakyFieldFieldType *fieldType = *b__++;
      NSString *indexName;
      if (unique) {
        indexName = [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getUniqueIndexName];
      }
      else {
        indexName = [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getIndexName];
      }
      if (indexName == nil) {
        continue;
      }
      id<JavaUtilList> columnList = [indexMap getWithId:indexName];
      if (columnList == nil) {
        columnList = create_JavaUtilArrayList_init();
        [indexMap putWithId:indexName withId:columnList];
      }
      [columnList addWithId:[fieldType getColumnName]];
    }
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(128);
  for (id<JavaUtilMap_Entry> __strong indexEntry in nil_chk([indexMap entrySet])) {
    CoTouchlabSqueakyLoggerOLog_iWithNSString_withNSString_(CoTouchlabSqueakyTableTableUtils_TAG, JreStrcat("$$$$C", @"creating index '{", [((id<JavaUtilMap_Entry>) nil_chk(indexEntry)) getKey], @"}' for table '{", [((CoTouchlabSqueakyTableTableInfo *) nil_chk([tableInfo getTableConfig])) getTableName], '}'));
    [sb appendWithNSString:@"CREATE "];
    if (unique) {
      [sb appendWithNSString:@"UNIQUE "];
    }
    [sb appendWithNSString:@"INDEX "];
    if (ifNotExists) {
      [sb appendWithNSString:@"IF NOT EXISTS "];
    }
    CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, [indexEntry getKey]);
    [sb appendWithNSString:@" ON "];
    CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, [((CoTouchlabSqueakyTableTableInfo *) nil_chk([tableInfo getTableConfig])) getTableName]);
    [sb appendWithNSString:@" ( "];
    jboolean first = true;
    for (NSString * __strong columnName in nil_chk([indexEntry getValue])) {
      if (first) {
        first = false;
      }
      else {
        [sb appendWithNSString:@", "];
      }
      CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, columnName);
    }
    [sb appendWithNSString:@" )"];
    [((id<JavaUtilList>) nil_chk(statements)) addWithId:[sb description]];
    [sb setLengthWithInt:0];
  }
}

void CoTouchlabSqueakyTableTableUtils_addDropTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  id<JavaUtilList> statementsBefore = create_JavaUtilArrayList_init();
  id<JavaUtilList> statementsAfter = create_JavaUtilArrayList_init();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(64);
  [sb appendWithNSString:@"DROP TABLE "];
  CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(tableInfo)) getTableConfig])) getTableName]);
  [sb appendWithChar:' '];
  [((id<JavaUtilList>) nil_chk(statements)) addAllWithJavaUtilCollection:statementsBefore];
  [statements addWithId:[sb description]];
  [statements addAllWithJavaUtilCollection:statementsAfter];
}

void CoTouchlabSqueakyTableTableUtils_addDropViewStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, id<JavaUtilList> statements) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(64);
  [sb appendWithNSString:@"DROP VIEW "];
  CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(tableInfo)) getTableConfig])) getTableName]);
  [sb appendWithChar:' '];
  [((id<JavaUtilList>) nil_chk(statements)) addWithId:[sb description]];
}

jint CoTouchlabSqueakyTableTableUtils_doCreateTableWithCoTouchlabSqueakyDbSQLiteDatabase_withCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connectionSource, id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, jboolean ifNotExists) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  CoTouchlabSqueakyLoggerOLog_iWithNSString_withNSString_(CoTouchlabSqueakyTableTableUtils_TAG, JreStrcat("$$$", @"creating table '{", [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(tableInfo)) getTableConfig])) getTableName], @"}'"));
  id<JavaUtilList> statements = create_JavaUtilArrayList_init();
  CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_(tableInfo, statements, ifNotExists);
  jint stmtC = CoTouchlabSqueakyTableTableUtils_doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_withJavaUtilCollection_withBoolean_withBoolean_withBoolean_(connectionSource, @"create", statements, false, false, false);
  return stmtC;
}

jint CoTouchlabSqueakyTableTableUtils_doStatementsWithCoTouchlabSqueakyDbSQLiteDatabase_withNSString_withJavaUtilCollection_withBoolean_withBoolean_withBoolean_(id<CoTouchlabSqueakyDbSQLiteDatabase> connection, NSString *label, id<JavaUtilCollection> statements, jboolean ignoreErrors, jboolean returnsNegative, jboolean expectingZero) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  jint stmtC = 0;
  for (NSString * __strong statement in nil_chk(statements)) {
    @try {
      [((id<CoTouchlabSqueakyDbSQLiteDatabase>) nil_chk(connection)) execSQLWithNSString:statement];
      CoTouchlabSqueakyLoggerOLog_iWithNSString_withNSString_(CoTouchlabSqueakyTableTableUtils_TAG, JreStrcat("$$$$C", @"executed {", label, @"} table statement changed: {", statement, '}'));
    }
    @catch (JavaLangException *e) {
      if (ignoreErrors) {
        CoTouchlabSqueakyLoggerOLog_iWithNSString_withNSString_withNSException_(CoTouchlabSqueakyTableTableUtils_TAG, JreStrcat("$$$$C", @"ignoring {", label, @"} error for statement: {", statement, '}'), e);
      }
      else {
        @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$$", @"SQL statement failed: ", statement), e);
      }
    }
    stmtC++;
  }
  return stmtC;
}

id<JavaUtilList> CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withBoolean_(id<CoTouchlabSqueakyTableGeneratedTableMapper> tableInfo, jboolean ifNotExists) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  id<JavaUtilList> statements = create_JavaUtilArrayList_init();
  CoTouchlabSqueakyTableTableUtils_addCreateTableStatementsWithCoTouchlabSqueakyTableGeneratedTableMapper_withJavaUtilList_withBoolean_(tableInfo, statements, ifNotExists);
  return statements;
}

void CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *name) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'`'])) appendWithNSString:name])) appendWithChar:'`'];
}

void CoTouchlabSqueakyTableTableUtils_appendDefaultValueWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_withId_(JavaLangStringBuilder *sb, CoTouchlabSqueakyFieldFieldType *fieldType, id defaultValue) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  if ([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) isEscapedDefaultValue]) {
    CoTouchlabSqueakyTableTableUtils_appendEscapedWordWithJavaLangStringBuilder_withNSString_(sb, [nil_chk(defaultValue) description]);
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithId:defaultValue];
  }
}

void CoTouchlabSqueakyTableTableUtils_addPrimaryKeySqlWithCoTouchlabSqueakyFieldFieldTypeArray_withJavaUtilList_(IOSObjectArray *fieldTypes, id<JavaUtilList> additionalArgs) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  JavaLangStringBuilder *sb = nil;
  {
    IOSObjectArray *a__ = fieldTypes;
    CoTouchlabSqueakyFieldFieldType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    CoTouchlabSqueakyFieldFieldType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CoTouchlabSqueakyFieldFieldType *fieldType = *b__++;
      if ([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) isGeneratedId]) {
      }
      else if ([fieldType isId]) {
        if (sb == nil) {
          sb = create_JavaLangStringBuilder_initWithInt_(48);
          [sb appendWithNSString:@"PRIMARY KEY ("];
        }
        else {
          [sb appendWithChar:','];
        }
        CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, [fieldType getColumnName]);
      }
    }
  }
  if (sb != nil) {
    [sb appendWithNSString:@") "];
    [((id<JavaUtilList>) nil_chk(additionalArgs)) addWithId:[sb description]];
  }
}

void CoTouchlabSqueakyTableTableUtils_addUniqueComboSqlWithCoTouchlabSqueakyFieldFieldTypeArray_withJavaUtilList_(IOSObjectArray *fieldTypes, id<JavaUtilList> additionalArgs) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  JavaLangStringBuilder *sb = nil;
  {
    IOSObjectArray *a__ = fieldTypes;
    CoTouchlabSqueakyFieldFieldType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    CoTouchlabSqueakyFieldFieldType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CoTouchlabSqueakyFieldFieldType *fieldType = *b__++;
      if ([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) isUniqueCombo]) {
        if (sb == nil) {
          sb = create_JavaLangStringBuilder_initWithInt_(48);
          [sb appendWithNSString:@"UNIQUE ("];
        }
        else {
          [sb appendWithChar:','];
        }
        CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, [fieldType getColumnName]);
      }
    }
  }
  if (sb != nil) {
    [sb appendWithNSString:@") "];
    [((id<JavaUtilList>) nil_chk(additionalArgs)) addWithId:[sb description]];
  }
}

void CoTouchlabSqueakyTableTableUtils_appendEscapedWordWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *word) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'\''])) appendWithNSString:word])) appendWithChar:'\''];
}

void CoTouchlabSqueakyTableTableUtils_addSingleUniqueWithCoTouchlabSqueakyFieldFieldType_withJavaUtilList_(CoTouchlabSqueakyFieldFieldType *fieldType, id<JavaUtilList> additionalArgs) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  JavaLangStringBuilder *alterSb = create_JavaLangStringBuilder_init();
  [alterSb appendWithNSString:@" UNIQUE ("];
  CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(alterSb, [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getColumnName]);
  [alterSb appendWithNSString:@")"];
  [((id<JavaUtilList>) nil_chk(additionalArgs)) addWithId:[alterSb description]];
}

void CoTouchlabSqueakyTableTableUtils_appendColumnArgWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_withJavaUtilList_(JavaLangStringBuilder *sb, CoTouchlabSqueakyFieldFieldType *fieldType, id<JavaUtilList> additionalArgs) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  CoTouchlabSqueakyTableTableUtils_appendEscapedEntityNameWithJavaLangStringBuilder_withNSString_(sb, [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getColumnName]);
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:' '];
  id<CoTouchlabSqueakyFieldDataPersister> dataPersister = [fieldType getDataPersister];
  switch ([[((id<CoTouchlabSqueakyFieldDataPersister>) nil_chk(dataPersister)) getSqlType] ordinal]) {
    case CoTouchlabSqueakyFieldSqlType_Enum_STRING:
    CoTouchlabSqueakyTableTableUtils_appendStringTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_LONG_STRING:
    CoTouchlabSqueakyTableTableUtils_appendLongStringTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_BOOLEAN:
    CoTouchlabSqueakyTableTableUtils_appendBooleanTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_DATE:
    CoTouchlabSqueakyTableTableUtils_appendDateTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_CHAR:
    CoTouchlabSqueakyTableTableUtils_appendCharTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_BYTE:
    CoTouchlabSqueakyTableTableUtils_appendByteTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_BYTE_ARRAY:
    CoTouchlabSqueakyTableTableUtils_appendByteArrayTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_SHORT:
    CoTouchlabSqueakyTableTableUtils_appendShortTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_INTEGER:
    CoTouchlabSqueakyTableTableUtils_appendIntegerTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_LONG:
    CoTouchlabSqueakyTableTableUtils_appendLongTypeWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_(sb, fieldType);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_FLOAT:
    CoTouchlabSqueakyTableTableUtils_appendFloatTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_DOUBLE:
    CoTouchlabSqueakyTableTableUtils_appendDoubleTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_SERIALIZABLE:
    CoTouchlabSqueakyTableTableUtils_appendSerializableTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_BIG_DECIMAL:
    CoTouchlabSqueakyTableTableUtils_appendBigDecimalNumericTypeWithJavaLangStringBuilder_(sb);
    break;
    case CoTouchlabSqueakyFieldSqlType_Enum_UNKNOWN:
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown SQL-type ", [dataPersister getSqlType]));
  }
  [sb appendWithChar:' '];
  if ([fieldType isGeneratedId]) {
    CoTouchlabSqueakyTableTableUtils_configureGeneratedIdWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_(sb, fieldType);
  }
  if (![fieldType isGeneratedId]) {
    id defaultValue = [fieldType getDefaultValue];
    if (defaultValue != nil) {
      [sb appendWithNSString:@"DEFAULT "];
      CoTouchlabSqueakyTableTableUtils_appendDefaultValueWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_withId_(sb, fieldType, defaultValue);
      [sb appendWithChar:' '];
    }
    if (![fieldType isCanBeNull]) {
      [sb appendWithNSString:@"NOT NULL "];
    }
    if ([fieldType isUnique]) {
      CoTouchlabSqueakyTableTableUtils_addSingleUniqueWithCoTouchlabSqueakyFieldFieldType_withJavaUtilList_(fieldType, additionalArgs);
    }
  }
}

void CoTouchlabSqueakyTableTableUtils_appendStringTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"VARCHAR"];
}

void CoTouchlabSqueakyTableTableUtils_appendLongStringTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"TEXT"];
}

void CoTouchlabSqueakyTableTableUtils_appendDateTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"TIMESTAMP"];
}

void CoTouchlabSqueakyTableTableUtils_appendBooleanTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"BOOLEAN"];
}

void CoTouchlabSqueakyTableTableUtils_appendCharTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"CHAR"];
}

void CoTouchlabSqueakyTableTableUtils_appendByteTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"TINYINT"];
}

void CoTouchlabSqueakyTableTableUtils_appendShortTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"SMALLINT"];
}

void CoTouchlabSqueakyTableTableUtils_appendIntegerTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"INTEGER"];
}

void CoTouchlabSqueakyTableTableUtils_appendFloatTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"FLOAT"];
}

void CoTouchlabSqueakyTableTableUtils_appendDoubleTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"DOUBLE PRECISION"];
}

void CoTouchlabSqueakyTableTableUtils_appendByteArrayTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"BLOB"];
}

void CoTouchlabSqueakyTableTableUtils_appendSerializableTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"BLOB"];
}

void CoTouchlabSqueakyTableTableUtils_appendBigDecimalNumericTypeWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"NUMERIC"];
}

void CoTouchlabSqueakyTableTableUtils_appendLongTypeWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_(JavaLangStringBuilder *sb, CoTouchlabSqueakyFieldFieldType *fieldType) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  if ([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getSqlType] == JreLoadEnum(CoTouchlabSqueakyFieldSqlType, LONG) && [fieldType isGeneratedId]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"INTEGER"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"BIGINT"];
  }
}

void CoTouchlabSqueakyTableTableUtils_configureGeneratedIdWithJavaLangStringBuilder_withCoTouchlabSqueakyFieldFieldType_(JavaLangStringBuilder *sb, CoTouchlabSqueakyFieldFieldType *fieldType) {
  CoTouchlabSqueakyTableTableUtils_initialize();
  if ([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getSqlType] != JreLoadEnum(CoTouchlabSqueakyFieldSqlType, INTEGER) && [fieldType getSqlType] != JreLoadEnum(CoTouchlabSqueakyFieldSqlType, LONG)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Sqlite requires that auto-increment generated-id be integer or long type");
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"PRIMARY KEY AUTOINCREMENT "];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyTableTableUtils)
