//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalUtilBlockingUtils.h"
#include "RxSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/CountDownLatch.h"

@interface RxInternalUtilBlockingUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalUtilBlockingUtils_init(RxInternalUtilBlockingUtils *self);

__attribute__((unused)) static RxInternalUtilBlockingUtils *new_RxInternalUtilBlockingUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilBlockingUtils *create_RxInternalUtilBlockingUtils_init();

@implementation RxInternalUtilBlockingUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilBlockingUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)awaitForCompleteWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
                                          withRxSubscription:(id<RxSubscription>)subscription {
  RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(latch, subscription);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(awaitForCompleteWithJavaUtilConcurrentCountDownLatch:withRxSubscription:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "awaitForComplete", "LJavaUtilConcurrentCountDownLatch;LRxSubscription;" };
  static const J2ObjcClassInfo _RxInternalUtilBlockingUtils = { "BlockingUtils", "rx.internal.util", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilBlockingUtils;
}

@end

void RxInternalUtilBlockingUtils_init(RxInternalUtilBlockingUtils *self) {
  NSObject_init(self);
}

RxInternalUtilBlockingUtils *new_RxInternalUtilBlockingUtils_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilBlockingUtils, init)
}

RxInternalUtilBlockingUtils *create_RxInternalUtilBlockingUtils_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilBlockingUtils, init)
}

void RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(JavaUtilConcurrentCountDownLatch *latch, id<RxSubscription> subscription) {
  RxInternalUtilBlockingUtils_initialize();
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(latch)) getCount] == 0) {
    return;
  }
  @try {
    [latch await];
  }
  @catch (JavaLangInterruptedException *e) {
    [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Interrupted while waiting for subscription to complete.", e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilBlockingUtils)
