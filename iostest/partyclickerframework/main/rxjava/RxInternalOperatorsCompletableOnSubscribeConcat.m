//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxCompletableSubscriber.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxInternalOperatorsCompletableOnSubscribeConcat.h"
#include "RxInternalUtilUnsafeSpscArrayQueue.h"
#include "RxObservable.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSerialSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber () {
 @public
  RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *this$0_;
}

@end

@implementation RxInternalOperatorsCompletableOnSubscribeConcat

- (instancetype)initWithRxObservable:(RxObservable *)sources
                             withInt:(jint)prefetch {
  RxInternalOperatorsCompletableOnSubscribeConcat_initWithRxObservable_withInt_(self, sources, prefetch);
  return self;
}

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *parent = create_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_initWithRxCompletableSubscriber_withInt_(s, prefetch_);
  [((id<RxCompletableSubscriber>) nil_chk(s)) onSubscribeWithRxSubscription:parent];
  [((RxObservable *) nil_chk(sources_)) subscribeWithRxSubscriber:parent];
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObservable:withInt:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "LRxObservable;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservable;I", "(Lrx/Observable<+Lrx/Completable;>;I)V", "call", "LRxCompletableSubscriber;", "Lrx/Observable<Lrx/Completable;>;", "LRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeConcat = { "CompletableOnSubscribeConcat", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 5, -1, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeConcat;
}

@end

void RxInternalOperatorsCompletableOnSubscribeConcat_initWithRxObservable_withInt_(RxInternalOperatorsCompletableOnSubscribeConcat *self, RxObservable *sources, jint prefetch) {
  NSObject_init(self);
  JreStrongAssign(&self->sources_, sources);
  self->prefetch_ = prefetch;
}

RxInternalOperatorsCompletableOnSubscribeConcat *new_RxInternalOperatorsCompletableOnSubscribeConcat_initWithRxObservable_withInt_(RxObservable *sources, jint prefetch) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeConcat, initWithRxObservable_withInt_, sources, prefetch)
}

RxInternalOperatorsCompletableOnSubscribeConcat *create_RxInternalOperatorsCompletableOnSubscribeConcat_initWithRxObservable_withInt_(RxObservable *sources, jint prefetch) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeConcat, initWithRxObservable_withInt_, sources, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableOnSubscribeConcat)

@implementation RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber

- (instancetype)initWithRxCompletableSubscriber:(id<RxCompletableSubscriber>)actual
                                        withInt:(jint)prefetch {
  RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_initWithRxCompletableSubscriber_withInt_(self, actual, prefetch);
  return self;
}

- (void)onNextWithId:(RxCompletable *)t {
  if (![((RxInternalUtilUnsafeSpscArrayQueue *) nil_chk(queue_)) offerWithId:t]) {
    [self onErrorWithNSException:create_RxExceptionsMissingBackpressureException_init()];
    return;
  }
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    [self next];
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<RxCompletableSubscriber>) nil_chk(actual_)) onErrorWithNSException:t];
    return;
  }
  RxPluginsRxJavaHooks_onErrorWithNSException_(t);
}

- (void)onCompleted {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    [self next];
  }
}

- (void)innerErrorWithNSException:(NSException *)e {
  [self unsubscribe];
  [self onErrorWithNSException:e];
}

- (void)innerComplete {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) decrementAndGet] != 0) {
    [self next];
  }
  if (!JreLoadVolatileBoolean(&done_)) {
    [self requestWithLong:1];
  }
}

- (void)next {
  jboolean d = JreLoadVolatileBoolean(&done_);
  RxCompletable *c = [((RxInternalUtilUnsafeSpscArrayQueue *) nil_chk(queue_)) poll];
  if (c == nil) {
    if (d) {
      if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
        [((id<RxCompletableSubscriber>) nil_chk(actual_)) onCompleted];
      }
      return;
    }
    RxPluginsRxJavaHooks_onErrorWithNSException_(create_JavaLangIllegalStateException_initWithNSString_(@"Queue is empty?!"));
    return;
  }
  [c unsafeSubscribeWithRxCompletableSubscriber:inner_];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(sr_);
  RELEASE_(queue_);
  RELEASE_(once_);
  RELEASE_(inner_);
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxCompletableSubscriber:withInt:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(innerErrorWithNSException:);
  methods[5].selector = @selector(innerComplete);
  methods[6].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LRxCompletableSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sr_", "LRxSubscriptionsSerialSubscription;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LRxInternalUtilUnsafeSpscArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "inner_", "LRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableSubscriber;I", "onNext", "LRxCompletable;", "onError", "LNSException;", "innerError", "Lrx/internal/util/unsafe/SpscArrayQueue<Lrx/Completable;>;", "LRxInternalOperatorsCompletableOnSubscribeConcat;", "LRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber;", "Lrx/Subscriber<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber = { "CompletableConcatSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 7, 7, 7, 8, -1, 9, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber;
}

@end

void RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_initWithRxCompletableSubscriber_withInt_(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *self, id<RxCompletableSubscriber> actual, jint prefetch) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->queue_, new_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(prefetch));
  JreStrongAssignAndConsume(&self->sr_, new_RxSubscriptionsSerialSubscription_init());
  JreStrongAssignAndConsume(&self->inner_, new_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_(self));
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  [self addWithRxSubscription:self->sr_];
  [self requestWithLong:prefetch];
}

RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *new_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_initWithRxCompletableSubscriber_withInt_(id<RxCompletableSubscriber> actual, jint prefetch) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber, initWithRxCompletableSubscriber_withInt_, actual, prefetch)
}

RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *create_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_initWithRxCompletableSubscriber_withInt_(id<RxCompletableSubscriber> actual, jint prefetch) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber, initWithRxCompletableSubscriber_withInt_, actual, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber)

@implementation RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber

- (instancetype)initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber:(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *)outer$ {
  RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_(self, outer$);
  return self;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((RxSubscriptionsSerialSubscription *) nil_chk(this$0_->sr_)) setWithRxSubscription:d];
}

- (void)onErrorWithNSException:(NSException *)e {
  [this$0_ innerErrorWithNSException:e];
}

- (void)onCompleted {
  [this$0_ innerComplete];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber:);
  methods[1].selector = @selector(onSubscribeWithRxSubscription:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber = { "ConcatInnerSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x10, 4, 1, 4, -1, -1, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber;
}

@end

void RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber *self, RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber *new_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber, initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_, outer$)
}

RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber *create_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber, initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber)
