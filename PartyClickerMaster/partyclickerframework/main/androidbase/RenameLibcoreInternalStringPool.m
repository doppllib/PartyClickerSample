//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbase/src/main/java/rename/libcore/internal/StringPool.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RenameLibcoreInternalStringPool.h"

@interface RenameLibcoreInternalStringPool () {
 @public
  IOSObjectArray *pool_;
}

+ (jboolean)contentEqualsWithNSString:(NSString *)s
                        withCharArray:(IOSCharArray *)chars
                              withInt:(jint)start
                              withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(RenameLibcoreInternalStringPool, pool_, IOSObjectArray *)

__attribute__((unused)) static jboolean RenameLibcoreInternalStringPool_contentEqualsWithNSString_withCharArray_withInt_withInt_(NSString *s, IOSCharArray *chars, jint start, jint length);

@implementation RenameLibcoreInternalStringPool

+ (jboolean)contentEqualsWithNSString:(NSString *)s
                        withCharArray:(IOSCharArray *)chars
                              withInt:(jint)start
                              withInt:(jint)length {
  return RenameLibcoreInternalStringPool_contentEqualsWithNSString_withCharArray_withInt_withInt_(s, chars, start, length);
}

- (NSString *)getWithCharArray:(IOSCharArray *)array
                       withInt:(jint)start
                       withInt:(jint)length {
  jint hashCode = 0;
  for (jint i = start; i < start + length; i++) {
    hashCode = (hashCode * 31) + IOSCharArray_Get(nil_chk(array), i);
  }
  hashCode ^= (JreURShift32(hashCode, 20)) ^ (JreURShift32(hashCode, 12));
  hashCode ^= (JreURShift32(hashCode, 7)) ^ (JreURShift32(hashCode, 4));
  jint index = hashCode & (((IOSObjectArray *) nil_chk(pool_))->size_ - 1);
  NSString *pooled = IOSObjectArray_Get(pool_, index);
  if (pooled != nil && RenameLibcoreInternalStringPool_contentEqualsWithNSString_withCharArray_withInt_withInt_(pooled, array, start, length)) {
    return pooled;
  }
  NSString *result = [NSString stringWithCharacters:array offset:start length:length];
  IOSObjectArray_Set(pool_, index, result);
  return result;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RenameLibcoreInternalStringPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(pool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(contentEqualsWithNSString:withCharArray:withInt:withInt:);
  methods[1].selector = @selector(getWithCharArray:withInt:withInt:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pool_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "contentEquals", "LNSString;[CII", "get", "[CII" };
  static const J2ObjcClassInfo _RenameLibcoreInternalStringPool = { "StringPool", "rename.libcore.internal", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_RenameLibcoreInternalStringPool;
}

@end

jboolean RenameLibcoreInternalStringPool_contentEqualsWithNSString_withCharArray_withInt_withInt_(NSString *s, IOSCharArray *chars, jint start, jint length) {
  RenameLibcoreInternalStringPool_initialize();
  if (((jint) [((NSString *) nil_chk(s)) length]) != length) {
    return false;
  }
  for (jint i = 0; i < length; i++) {
    if (IOSCharArray_Get(nil_chk(chars), start + i) != [s charAtWithInt:i]) {
      return false;
    }
  }
  return true;
}

void RenameLibcoreInternalStringPool_init(RenameLibcoreInternalStringPool *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->pool_, [IOSObjectArray newArrayWithLength:512 type:NSString_class_()]);
}

RenameLibcoreInternalStringPool *new_RenameLibcoreInternalStringPool_init() {
  J2OBJC_NEW_IMPL(RenameLibcoreInternalStringPool, init)
}

RenameLibcoreInternalStringPool *create_RenameLibcoreInternalStringPool_init() {
  J2OBJC_CREATE_IMPL(RenameLibcoreInternalStringPool, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RenameLibcoreInternalStringPool)
