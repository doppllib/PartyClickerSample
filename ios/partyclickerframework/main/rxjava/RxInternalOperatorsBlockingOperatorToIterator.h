//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator")
#ifdef RESTRICT_RxInternalOperatorsBlockingOperatorToIterator
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator 0
#else
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator 1
#endif
#undef RESTRICT_RxInternalOperatorsBlockingOperatorToIterator

#if !defined (RxInternalOperatorsBlockingOperatorToIterator_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator || defined(INCLUDE_RxInternalOperatorsBlockingOperatorToIterator))
#define RxInternalOperatorsBlockingOperatorToIterator_

@class RxObservable;
@protocol JavaUtilIterator;

@interface RxInternalOperatorsBlockingOperatorToIterator : NSObject

#pragma mark Public

+ (id<JavaUtilIterator>)toIteratorWithRxObservable:(RxObservable *)source;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorToIterator)

FOUNDATION_EXPORT id<JavaUtilIterator> RxInternalOperatorsBlockingOperatorToIterator_toIteratorWithRxObservable_(RxObservable *source);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorToIterator)

#endif

#if !defined (RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator || defined(INCLUDE_RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator))
#define RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "RxSubscriber.h"

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class RxNotification;
@protocol JavaUtilFunctionConsumer;

@interface RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator : RxSubscriber < JavaUtilIterator >

#pragma mark Public

- (instancetype)init;

- (jboolean)hasNext;

- (id)next;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(RxNotification *)args;

- (void)onStart;

- (void)remove;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator)

inline jint RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_get_LIMIT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_LIMIT;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator, LIMIT, jint)

FOUNDATION_EXPORT void RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_init(RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator *self);

FOUNDATION_EXPORT RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator *new_RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator *create_RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator")
