//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsExceptions.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxExceptionsOnErrorThrowable.h"
#include "RxInternalOperatorsBackpressureUtils.h"
#include "RxInternalOperatorsNotificationLite.h"
#include "RxInternalOperatorsOperatorMerge.h"
#include "RxInternalUtilAtomicSpscAtomicArrayQueue.h"
#include "RxInternalUtilAtomicSpscExactAtomicArrayQueue.h"
#include "RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxInternalUtilScalarSynchronousObservable.h"
#include "RxInternalUtilUnsafePow2.h"
#include "RxInternalUtilUnsafeSpscArrayQueue.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "RxObservable.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong RxInternalOperatorsOperatorMerge_MergeProducer_get_serialVersionUID();
#define RxInternalOperatorsOperatorMerge_MergeProducer_serialVersionUID -1214379189873595503LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsOperatorMerge_MergeProducer, serialVersionUID, jlong)

@interface RxInternalOperatorsOperatorMerge_MergeSubscriber ()

- (void)reportError;

@end

__attribute__((unused)) static void RxInternalOperatorsOperatorMerge_MergeSubscriber_reportError(RxInternalOperatorsOperatorMerge_MergeSubscriber *self);

@implementation RxInternalOperatorsOperatorMerge

+ (RxInternalOperatorsOperatorMerge *)instanceWithBoolean:(jboolean)delayErrors {
  return RxInternalOperatorsOperatorMerge_instanceWithBoolean_(delayErrors);
}

+ (RxInternalOperatorsOperatorMerge *)instanceWithBoolean:(jboolean)delayErrors
                                                  withInt:(jint)maxConcurrent {
  return RxInternalOperatorsOperatorMerge_instanceWithBoolean_withInt_(delayErrors, maxConcurrent);
}

- (instancetype)initWithBoolean:(jboolean)delayErrors
                        withInt:(jint)maxConcurrent {
  RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(self, delayErrors, maxConcurrent);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxInternalOperatorsOperatorMerge_MergeSubscriber *subscriber = create_RxInternalOperatorsOperatorMerge_MergeSubscriber_initWithRxSubscriber_withBoolean_withInt_(child, delayErrors_, maxConcurrent_);
  RxInternalOperatorsOperatorMerge_MergeProducer *producer = create_RxInternalOperatorsOperatorMerge_MergeProducer_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_(subscriber);
  JreStrongAssign(&subscriber->producer_MergeSubscriber_, producer);
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:subscriber];
  [child setProducerWithRxProducer:producer];
  return subscriber;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalOperatorsOperatorMerge;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LRxInternalOperatorsOperatorMerge;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, "LRxSubscriber;", 0x1, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instanceWithBoolean:);
  methods[1].selector = @selector(instanceWithBoolean:withInt:);
  methods[2].selector = @selector(initWithBoolean:withInt:);
  methods[3].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrent_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "instance", "Z", "<T:Ljava/lang/Object;>(Z)Lrx/internal/operators/OperatorMerge<TT;>;", "ZI", "<T:Ljava/lang/Object;>(ZI)Lrx/internal/operators/OperatorMerge<TT;>;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<Lrx/Observable<+TT;>;>;", "LRxInternalOperatorsOperatorMerge_HolderNoDelay;LRxInternalOperatorsOperatorMerge_HolderDelayErrors;LRxInternalOperatorsOperatorMerge_MergeProducer;LRxInternalOperatorsOperatorMerge_MergeSubscriber;LRxInternalOperatorsOperatorMerge_InnerSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;Lrx/Observable<+TT;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMerge = { "OperatorMerge", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, 8, -1, 9, -1 };
  return &_RxInternalOperatorsOperatorMerge;
}

@end

RxInternalOperatorsOperatorMerge *RxInternalOperatorsOperatorMerge_instanceWithBoolean_(jboolean delayErrors) {
  RxInternalOperatorsOperatorMerge_initialize();
  if (delayErrors) {
    return JreLoadStatic(RxInternalOperatorsOperatorMerge_HolderDelayErrors, INSTANCE);
  }
  return JreLoadStatic(RxInternalOperatorsOperatorMerge_HolderNoDelay, INSTANCE);
}

RxInternalOperatorsOperatorMerge *RxInternalOperatorsOperatorMerge_instanceWithBoolean_withInt_(jboolean delayErrors, jint maxConcurrent) {
  RxInternalOperatorsOperatorMerge_initialize();
  if (maxConcurrent <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"maxConcurrent > 0 required but it was ", maxConcurrent));
  }
  if (maxConcurrent == JavaLangInteger_MAX_VALUE) {
    return RxInternalOperatorsOperatorMerge_instanceWithBoolean_(delayErrors);
  }
  return create_RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(delayErrors, maxConcurrent);
}

void RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(RxInternalOperatorsOperatorMerge *self, jboolean delayErrors, jint maxConcurrent) {
  NSObject_init(self);
  self->delayErrors_ = delayErrors;
  self->maxConcurrent_ = maxConcurrent;
}

RxInternalOperatorsOperatorMerge *new_RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(jboolean delayErrors, jint maxConcurrent) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMerge, initWithBoolean_withInt_, delayErrors, maxConcurrent)
}

RxInternalOperatorsOperatorMerge *create_RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(jboolean delayErrors, jint maxConcurrent) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMerge, initWithBoolean_withInt_, delayErrors, maxConcurrent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMerge)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorMerge_HolderNoDelay)

RxInternalOperatorsOperatorMerge *RxInternalOperatorsOperatorMerge_HolderNoDelay_INSTANCE;

@implementation RxInternalOperatorsOperatorMerge_HolderNoDelay

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorMerge_HolderNoDelay_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalOperatorsOperatorMerge;", .constantValue.asLong = 0, 0x18, -1, 0, 1, -1 },
  };
  static const void *ptrTable[] = { &RxInternalOperatorsOperatorMerge_HolderNoDelay_INSTANCE, "Lrx/internal/operators/OperatorMerge<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorMerge;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMerge_HolderNoDelay = { "HolderNoDelay", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 1, 1, 2, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorMerge_HolderNoDelay;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorMerge_HolderNoDelay class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorMerge_HolderNoDelay_INSTANCE, new_RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(false, JavaLangInteger_MAX_VALUE));
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorMerge_HolderNoDelay)
  }
}

@end

void RxInternalOperatorsOperatorMerge_HolderNoDelay_init(RxInternalOperatorsOperatorMerge_HolderNoDelay *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorMerge_HolderNoDelay *new_RxInternalOperatorsOperatorMerge_HolderNoDelay_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMerge_HolderNoDelay, init)
}

RxInternalOperatorsOperatorMerge_HolderNoDelay *create_RxInternalOperatorsOperatorMerge_HolderNoDelay_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMerge_HolderNoDelay, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMerge_HolderNoDelay)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorMerge_HolderDelayErrors)

RxInternalOperatorsOperatorMerge *RxInternalOperatorsOperatorMerge_HolderDelayErrors_INSTANCE;

@implementation RxInternalOperatorsOperatorMerge_HolderDelayErrors

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorMerge_HolderDelayErrors_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalOperatorsOperatorMerge;", .constantValue.asLong = 0, 0x18, -1, 0, 1, -1 },
  };
  static const void *ptrTable[] = { &RxInternalOperatorsOperatorMerge_HolderDelayErrors_INSTANCE, "Lrx/internal/operators/OperatorMerge<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorMerge;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMerge_HolderDelayErrors = { "HolderDelayErrors", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 1, 1, 2, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorMerge_HolderDelayErrors;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorMerge_HolderDelayErrors class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorMerge_HolderDelayErrors_INSTANCE, new_RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(true, JavaLangInteger_MAX_VALUE));
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorMerge_HolderDelayErrors)
  }
}

@end

void RxInternalOperatorsOperatorMerge_HolderDelayErrors_init(RxInternalOperatorsOperatorMerge_HolderDelayErrors *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorMerge_HolderDelayErrors *new_RxInternalOperatorsOperatorMerge_HolderDelayErrors_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMerge_HolderDelayErrors, init)
}

RxInternalOperatorsOperatorMerge_HolderDelayErrors *create_RxInternalOperatorsOperatorMerge_HolderDelayErrors_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMerge_HolderDelayErrors, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMerge_HolderDelayErrors)

@implementation RxInternalOperatorsOperatorMerge_MergeProducer

- (instancetype)initWithRxInternalOperatorsOperatorMerge_MergeSubscriber:(RxInternalOperatorsOperatorMerge_MergeSubscriber *)subscriber {
  RxInternalOperatorsOperatorMerge_MergeProducer_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_(self, subscriber);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (n > 0) {
    if ([self get] == JavaLangLong_MAX_VALUE) {
      return;
    }
    RxInternalOperatorsBackpressureUtils_getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
    [((RxInternalOperatorsOperatorMerge_MergeSubscriber *) nil_chk(subscriber_)) emit];
  }
  else if (n < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"n >= 0 required");
  }
}

- (jlong)producedWithInt:(jint)n {
  return [self addAndGetWithLong:-n];
}

- (void)__javaClone:(RxInternalOperatorsOperatorMerge_MergeProducer *)original {
  [super __javaClone:original];
  [subscriber_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorMerge_MergeSubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(producedWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalOperatorsOperatorMerge_MergeProducer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "subscriber_", "LRxInternalOperatorsOperatorMerge_MergeSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorMerge_MergeSubscriber;", "(Lrx/internal/operators/OperatorMerge$MergeSubscriber<TT;>;)V", "request", "J", "produced", "I", "Lrx/internal/operators/OperatorMerge$MergeSubscriber<TT;>;", "LRxInternalOperatorsOperatorMerge;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicLong;Lrx/Producer;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMerge_MergeProducer = { "MergeProducer", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 3, 2, 7, -1, -1, 8, -1 };
  return &_RxInternalOperatorsOperatorMerge_MergeProducer;
}

@end

void RxInternalOperatorsOperatorMerge_MergeProducer_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_(RxInternalOperatorsOperatorMerge_MergeProducer *self, RxInternalOperatorsOperatorMerge_MergeSubscriber *subscriber) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  self->subscriber_ = subscriber;
}

RxInternalOperatorsOperatorMerge_MergeProducer *new_RxInternalOperatorsOperatorMerge_MergeProducer_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_(RxInternalOperatorsOperatorMerge_MergeSubscriber *subscriber) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMerge_MergeProducer, initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_, subscriber)
}

RxInternalOperatorsOperatorMerge_MergeProducer *create_RxInternalOperatorsOperatorMerge_MergeProducer_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_(RxInternalOperatorsOperatorMerge_MergeSubscriber *subscriber) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMerge_MergeProducer, initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_, subscriber)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMerge_MergeProducer)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorMerge_MergeSubscriber)

IOSObjectArray *RxInternalOperatorsOperatorMerge_MergeSubscriber_EMPTY;

@implementation RxInternalOperatorsOperatorMerge_MergeSubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
                         withBoolean:(jboolean)delayErrors
                             withInt:(jint)maxConcurrent {
  RxInternalOperatorsOperatorMerge_MergeSubscriber_initWithRxSubscriber_withBoolean_withInt_(self, child, delayErrors, maxConcurrent);
  return self;
}

- (id<JavaUtilQueue>)getOrCreateErrorQueue {
  JavaUtilConcurrentConcurrentLinkedQueue *q = JreLoadVolatileId(&errors_);
  if (q == nil) {
    @synchronized(self) {
      q = JreLoadVolatileId(&errors_);
      if (q == nil) {
        q = create_JavaUtilConcurrentConcurrentLinkedQueue_init();
        JreVolatileStrongAssign(&errors_, q);
      }
    }
  }
  return q;
}

- (RxSubscriptionsCompositeSubscription *)getOrCreateComposite {
  RxSubscriptionsCompositeSubscription *c = JreLoadVolatileId(&subscriptions_MergeSubscriber_);
  if (c == nil) {
    jboolean shouldAdd = false;
    @synchronized(self) {
      c = JreLoadVolatileId(&subscriptions_MergeSubscriber_);
      if (c == nil) {
        c = create_RxSubscriptionsCompositeSubscription_init();
        JreVolatileStrongAssign(&subscriptions_MergeSubscriber_, c);
        shouldAdd = true;
      }
    }
    if (shouldAdd) {
      [self addWithRxSubscription:c];
    }
  }
  return c;
}

- (void)onNextWithId:(RxObservable *)t {
  if (t == nil) {
    return;
  }
  if (t == RxObservable_empty()) {
    [self emitEmpty];
  }
  else if ([t isKindOfClass:[RxInternalUtilScalarSynchronousObservable class]]) {
    [self tryEmitWithId:[((RxInternalUtilScalarSynchronousObservable *) cast_chk(t, [RxInternalUtilScalarSynchronousObservable class])) get]];
  }
  else {
    RxInternalOperatorsOperatorMerge_InnerSubscriber *inner = create_RxInternalOperatorsOperatorMerge_InnerSubscriber_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_(self, uniqueId_++);
    [self addInnerWithRxInternalOperatorsOperatorMerge_InnerSubscriber:inner];
    [t unsafeSubscribeWithRxSubscriber:inner];
    [self emit];
  }
}

- (void)emitEmpty {
  jint produced = scalarEmissionCount_ + 1;
  if (produced == scalarEmissionLimit_) {
    scalarEmissionCount_ = 0;
    [self requestMoreWithLong:produced];
  }
  else {
    scalarEmissionCount_ = produced;
  }
}

- (void)reportError {
  RxInternalOperatorsOperatorMerge_MergeSubscriber_reportError(self);
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilQueue>) nil_chk([self getOrCreateErrorQueue])) offerWithId:e];
  JreAssignVolatileBoolean(&done_, true);
  [self emit];
}

- (void)onCompleted {
  JreAssignVolatileBoolean(&done_, true);
  [self emit];
}

- (void)addInnerWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)inner {
  [((RxSubscriptionsCompositeSubscription *) nil_chk([self getOrCreateComposite])) addWithRxSubscription:inner];
  @synchronized(innerGuard_) {
    IOSObjectArray *a = JreLoadVolatileId(&innerSubscribers_);
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:RxInternalOperatorsOperatorMerge_InnerSubscriber_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, inner);
    JreVolatileStrongAssign(&innerSubscribers_, b);
  }
}

- (void)removeInnerWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)inner {
  RxInternalUtilRxRingBuffer *q = JreLoadVolatileId(&((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(inner))->queue_);
  if (q != nil) {
    [q release__];
  }
  [((RxSubscriptionsCompositeSubscription *) nil_chk(JreLoadVolatileId(&subscriptions_MergeSubscriber_))) removeWithRxSubscription:inner];
  @synchronized(innerGuard_) {
    IOSObjectArray *a = JreLoadVolatileId(&innerSubscribers_);
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if ([inner isEqual:IOSObjectArray_Get(a, i)]) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    if (n == 1) {
      JreVolatileStrongAssign(&innerSubscribers_, RxInternalOperatorsOperatorMerge_MergeSubscriber_EMPTY);
      return;
    }
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n - 1 type:RxInternalOperatorsOperatorMerge_InnerSubscriber_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    JreVolatileStrongAssign(&innerSubscribers_, b);
  }
}

- (void)tryEmitWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)subscriber
                                                             withId:(id)value {
  jboolean success = false;
  jlong r = [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) get];
  if (r != 0LL) {
    @synchronized(self) {
      r = [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) get];
      if (!emitting_ && r != 0LL) {
        emitting_ = true;
        success = true;
      }
    }
  }
  if (success) {
    RxInternalUtilRxRingBuffer *subscriberQueue = JreLoadVolatileId(&((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(subscriber))->queue_);
    if (subscriberQueue == nil || [subscriberQueue isEmpty]) {
      [self emitScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:subscriber withId:value withLong:r];
    }
    else {
      [self queueScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:subscriber withId:value];
      [self emitLoop];
    }
  }
  else {
    [self queueScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:subscriber withId:value];
    [self emit];
  }
}

- (void)queueScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)subscriber
                                                                 withId:(id)value {
  RxInternalUtilRxRingBuffer *q = JreLoadVolatileId(&((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(subscriber))->queue_);
  if (q == nil) {
    q = RxInternalUtilRxRingBuffer_getSpscInstance();
    [subscriber addWithRxSubscription:q];
    JreVolatileStrongAssign(&subscriber->queue_, q);
  }
  @try {
    [((RxInternalUtilRxRingBuffer *) nil_chk(q)) onNextWithId:RxInternalOperatorsNotificationLite_nextWithId_(value)];
  }
  @catch (RxExceptionsMissingBackpressureException *ex) {
    [subscriber unsubscribe];
    [subscriber onErrorWithNSException:ex];
  }
  @catch (JavaLangIllegalStateException *ex) {
    if (![subscriber isUnsubscribed]) {
      [subscriber unsubscribe];
      [subscriber onErrorWithNSException:ex];
    }
  }
}

- (void)emitScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)subscriber
                                                                withId:(id)value
                                                              withLong:(jlong)r {
  jboolean skipFinal = false;
  @try {
    @try {
      [((RxSubscriber *) nil_chk(child_)) onNextWithId:value];
    }
    @catch (NSException *t) {
      if (!delayErrors_) {
        RxExceptionsExceptions_throwIfFatalWithNSException_(t);
        skipFinal = true;
        [((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(subscriber)) unsubscribe];
        [subscriber onErrorWithNSException:t];
        return;
      }
      [((id<JavaUtilQueue>) nil_chk([self getOrCreateErrorQueue])) offerWithId:t];
    }
    if (r != JavaLangLong_MAX_VALUE) {
      [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) producedWithInt:1];
    }
    [((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(subscriber)) requestMoreWithLong:1];
    @synchronized(self) {
      skipFinal = true;
      if (!missed_) {
        emitting_ = false;
        return;
      }
      missed_ = false;
    }
  }
  @finally {
    if (!skipFinal) {
      @synchronized(self) {
        emitting_ = false;
      }
    }
  }
  [self emitLoop];
}

- (void)requestMoreWithLong:(jlong)n {
  [self requestWithLong:n];
}

- (void)tryEmitWithId:(id)value {
  jboolean success = false;
  jlong r = [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) get];
  if (r != 0LL) {
    @synchronized(self) {
      r = [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) get];
      if (!emitting_ && r != 0LL) {
        emitting_ = true;
        success = true;
      }
    }
  }
  if (success) {
    id<JavaUtilQueue> mainQueue = JreLoadVolatileId(&queue_);
    if (mainQueue == nil || [mainQueue isEmpty]) {
      [self emitScalarWithId:value withLong:r];
    }
    else {
      [self queueScalarWithId:value];
      [self emitLoop];
    }
  }
  else {
    [self queueScalarWithId:value];
    [self emit];
  }
}

- (void)queueScalarWithId:(id)value {
  id<JavaUtilQueue> q = JreLoadVolatileId(&self->queue_);
  if (q == nil) {
    jint mc = maxConcurrent_;
    if (mc == JavaLangInteger_MAX_VALUE) {
      q = create_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
    }
    else {
      if (RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(mc)) {
        if (RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
          q = create_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(mc);
        }
        else {
          q = create_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(mc);
        }
      }
      else {
        q = create_RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(mc);
      }
    }
    JreVolatileStrongAssign(&self->queue_, q);
  }
  if (![q offerWithId:RxInternalOperatorsNotificationLite_nextWithId_(value)]) {
    [self unsubscribe];
    [self onErrorWithNSException:RxExceptionsOnErrorThrowable_addValueAsLastCauseWithNSException_withId_(create_RxExceptionsMissingBackpressureException_init(), value)];
  }
}

- (void)emitScalarWithId:(id)value
                withLong:(jlong)r {
  jboolean skipFinal = false;
  @try {
    @try {
      [((RxSubscriber *) nil_chk(child_)) onNextWithId:value];
    }
    @catch (NSException *t) {
      if (!delayErrors_) {
        RxExceptionsExceptions_throwIfFatalWithNSException_(t);
        skipFinal = true;
        [self unsubscribe];
        [self onErrorWithNSException:t];
        return;
      }
      [((id<JavaUtilQueue>) nil_chk([self getOrCreateErrorQueue])) offerWithId:t];
    }
    if (r != JavaLangLong_MAX_VALUE) {
      [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) producedWithInt:1];
    }
    jint produced = scalarEmissionCount_ + 1;
    if (produced == scalarEmissionLimit_) {
      scalarEmissionCount_ = 0;
      [self requestMoreWithLong:produced];
    }
    else {
      scalarEmissionCount_ = produced;
    }
    @synchronized(self) {
      skipFinal = true;
      if (!missed_) {
        emitting_ = false;
        return;
      }
      missed_ = false;
    }
  }
  @finally {
    if (!skipFinal) {
      @synchronized(self) {
        emitting_ = false;
      }
    }
  }
  [self emitLoop];
}

- (void)emit {
  @synchronized(self) {
    if (emitting_) {
      missed_ = true;
      return;
    }
    emitting_ = true;
  }
  [self emitLoop];
}

- (void)emitLoop {
  jboolean skipFinal = false;
  @try {
    RxSubscriber *child = self->child_;
    for (; ; ) {
      if ([self checkTerminate]) {
        skipFinal = true;
        return;
      }
      id<JavaUtilQueue> svq = JreLoadVolatileId(&queue_);
      jlong r = [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) get];
      jboolean unbounded = r == JavaLangLong_MAX_VALUE;
      jint replenishMain = 0;
      if (svq != nil) {
        for (; ; ) {
          jint scalarEmission = 0;
          id o = nil;
          while (r > 0) {
            o = [svq poll];
            if ([self checkTerminate]) {
              skipFinal = true;
              return;
            }
            if (o == nil) {
              break;
            }
            id v = RxInternalOperatorsNotificationLite_getValueWithId_(o);
            @try {
              [((RxSubscriber *) nil_chk(child)) onNextWithId:v];
            }
            @catch (NSException *t) {
              if (!delayErrors_) {
                RxExceptionsExceptions_throwIfFatalWithNSException_(t);
                skipFinal = true;
                [self unsubscribe];
                [child onErrorWithNSException:t];
                return;
              }
              [((id<JavaUtilQueue>) nil_chk([self getOrCreateErrorQueue])) offerWithId:t];
            }
            replenishMain++;
            scalarEmission++;
            r--;
          }
          if (scalarEmission > 0) {
            if (unbounded) {
              r = JavaLangLong_MAX_VALUE;
            }
            else {
              r = [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) producedWithInt:scalarEmission];
            }
          }
          if (r == 0LL || o == nil) {
            break;
          }
        }
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      svq = JreLoadVolatileId(&queue_);
      IOSObjectArray *inner = JreLoadVolatileId(&innerSubscribers_);
      jint n = ((IOSObjectArray *) nil_chk(inner))->size_;
      if (d && (svq == nil || [svq isEmpty]) && n == 0) {
        id<JavaUtilQueue> e = JreLoadVolatileId(&errors_);
        if (e == nil || [e isEmpty]) {
          [((RxSubscriber *) nil_chk(child)) onCompleted];
        }
        else {
          RxInternalOperatorsOperatorMerge_MergeSubscriber_reportError(self);
        }
        skipFinal = true;
        return;
      }
      jboolean innerCompleted = false;
      if (n > 0) {
        jlong startId = lastId_;
        jint index = lastIndex_;
        if (n <= index || ((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(IOSObjectArray_Get(inner, index)))->id__ != startId) {
          if (n <= index) {
            index = 0;
          }
          jint j = index;
          for (jint i = 0; i < n; i++) {
            if (((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(IOSObjectArray_Get(inner, j)))->id__ == startId) {
              break;
            }
            j++;
            if (j == n) {
              j = 0;
            }
          }
          index = j;
          lastIndex_ = j;
          lastId_ = ((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(IOSObjectArray_Get(inner, j)))->id__;
        }
        jint j = index;
        for (jint i = 0; i < n; i++) {
          if ([self checkTerminate]) {
            skipFinal = true;
            return;
          }
          RxInternalOperatorsOperatorMerge_InnerSubscriber *is = IOSObjectArray_Get(inner, j);
          id o = nil;
          for (; ; ) {
            jint produced = 0;
            while (r > 0) {
              if ([self checkTerminate]) {
                skipFinal = true;
                return;
              }
              RxInternalUtilRxRingBuffer *q = JreLoadVolatileId(&((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(is))->queue_);
              if (q == nil) {
                break;
              }
              o = [q poll];
              if (o == nil) {
                break;
              }
              id v = RxInternalOperatorsNotificationLite_getValueWithId_(o);
              @try {
                [((RxSubscriber *) nil_chk(child)) onNextWithId:v];
              }
              @catch (NSException *t) {
                skipFinal = true;
                RxExceptionsExceptions_throwIfFatalWithNSException_(t);
                @try {
                  [child onErrorWithNSException:t];
                }
                @finally {
                  [self unsubscribe];
                }
                return;
              }
              r--;
              produced++;
            }
            if (produced > 0) {
              if (!unbounded) {
                r = [((RxInternalOperatorsOperatorMerge_MergeProducer *) nil_chk(producer_MergeSubscriber_)) producedWithInt:produced];
              }
              else {
                r = JavaLangLong_MAX_VALUE;
              }
              [((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(is)) requestMoreWithLong:produced];
            }
            if (r == 0 || o == nil) {
              break;
            }
          }
          jboolean innerDone = JreLoadVolatileBoolean(&((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(is))->done_);
          RxInternalUtilRxRingBuffer *innerQueue = JreLoadVolatileId(&is->queue_);
          if (innerDone && (innerQueue == nil || [innerQueue isEmpty])) {
            [self removeInnerWithRxInternalOperatorsOperatorMerge_InnerSubscriber:is];
            if ([self checkTerminate]) {
              skipFinal = true;
              return;
            }
            replenishMain++;
            innerCompleted = true;
          }
          if (r == 0) {
            break;
          }
          j++;
          if (j == n) {
            j = 0;
          }
        }
        lastIndex_ = j;
        lastId_ = ((RxInternalOperatorsOperatorMerge_InnerSubscriber *) nil_chk(IOSObjectArray_Get(inner, j)))->id__;
      }
      if (replenishMain > 0) {
        [self requestWithLong:replenishMain];
      }
      if (innerCompleted) {
        continue;
      }
      @synchronized(self) {
        if (!missed_) {
          skipFinal = true;
          emitting_ = false;
          break;
        }
        missed_ = false;
      }
    }
  }
  @finally {
    if (!skipFinal) {
      @synchronized(self) {
        emitting_ = false;
      }
    }
  }
}

- (jboolean)checkTerminate {
  if ([((RxSubscriber *) nil_chk(child_)) isUnsubscribed]) {
    return true;
  }
  id<JavaUtilQueue> e = JreLoadVolatileId(&errors_);
  if (!delayErrors_ && (e != nil && ![e isEmpty])) {
    @try {
      RxInternalOperatorsOperatorMerge_MergeSubscriber_reportError(self);
    }
    @finally {
      [self unsubscribe];
    }
    return true;
  }
  return false;
}

- (void)__javaClone:(RxInternalOperatorsOperatorMerge_MergeSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
  JreCloneVolatileStrong(&subscriptions_MergeSubscriber_, &original->subscriptions_MergeSubscriber_);
  JreCloneVolatileStrong(&errors_, &original->errors_);
  JreCloneVolatileStrong(&innerSubscribers_, &original->innerSubscribers_);
}

- (void)dealloc {
  RELEASE_(child_);
  RELEASE_(producer_MergeSubscriber_);
  JreReleaseVolatile(&queue_);
  JreReleaseVolatile(&subscriptions_MergeSubscriber_);
  JreReleaseVolatile(&errors_);
  RELEASE_(innerGuard_);
  JreReleaseVolatile(&innerSubscribers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilQueue;", 0x0, -1, -1, -1, 2, -1, -1 },
    { NULL, "LRxSubscriptionsCompositeSubscription;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x0, 11, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x4, 15, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x4, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x4, 15, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x4, 16, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:withBoolean:withInt:);
  methods[1].selector = @selector(getOrCreateErrorQueue);
  methods[2].selector = @selector(getOrCreateComposite);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(emitEmpty);
  methods[5].selector = @selector(reportError);
  methods[6].selector = @selector(onErrorWithNSException:);
  methods[7].selector = @selector(onCompleted);
  methods[8].selector = @selector(addInnerWithRxInternalOperatorsOperatorMerge_InnerSubscriber:);
  methods[9].selector = @selector(removeInnerWithRxInternalOperatorsOperatorMerge_InnerSubscriber:);
  methods[10].selector = @selector(tryEmitWithRxInternalOperatorsOperatorMerge_InnerSubscriber:withId:);
  methods[11].selector = @selector(queueScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:withId:);
  methods[12].selector = @selector(emitScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:withId:withLong:);
  methods[13].selector = @selector(requestMoreWithLong:);
  methods[14].selector = @selector(tryEmitWithId:);
  methods[15].selector = @selector(queueScalarWithId:);
  methods[16].selector = @selector(emitScalarWithId:withLong:);
  methods[17].selector = @selector(emit);
  methods[18].selector = @selector(emitLoop);
  methods[19].selector = @selector(checkTerminate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 25, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrent_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "producer_MergeSubscriber_", "LRxInternalOperatorsOperatorMerge_MergeProducer;", .constantValue.asLong = 0, 0x0, 26, -1, 27, -1 },
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 28, -1 },
    { "subscriptions_MergeSubscriber_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x40, 29, -1, -1, -1 },
    { "errors_", "LJavaUtilConcurrentConcurrentLinkedQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 30, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "missed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "innerGuard_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "innerSubscribers_", "[LRxInternalOperatorsOperatorMerge_InnerSubscriber;", .constantValue.asLong = 0, 0x40, -1, -1, 31, -1 },
    { "uniqueId_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastId_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EMPTY", "[LRxInternalOperatorsOperatorMerge_InnerSubscriber;", .constantValue.asLong = 0, 0x18, -1, 32, 31, -1 },
    { "scalarEmissionLimit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scalarEmissionCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;ZI", "(Lrx/Subscriber<-TT;>;ZI)V", "()Ljava/util/Queue<Ljava/lang/Throwable;>;", "onNext", "LRxObservable;", "(Lrx/Observable<+TT;>;)V", "onError", "LNSException;", "addInner", "LRxInternalOperatorsOperatorMerge_InnerSubscriber;", "(Lrx/internal/operators/OperatorMerge$InnerSubscriber<TT;>;)V", "removeInner", "tryEmit", "LRxInternalOperatorsOperatorMerge_InnerSubscriber;LNSObject;", "(Lrx/internal/operators/OperatorMerge$InnerSubscriber<TT;>;TT;)V", "queueScalar", "emitScalar", "LRxInternalOperatorsOperatorMerge_InnerSubscriber;LNSObject;J", "(Lrx/internal/operators/OperatorMerge$InnerSubscriber<TT;>;TT;J)V", "requestMore", "J", "LNSObject;", "(TT;)V", "LNSObject;J", "(TT;J)V", "Lrx/Subscriber<-TT;>;", "producer", "Lrx/internal/operators/OperatorMerge$MergeProducer<TT;>;", "Ljava/util/Queue<Ljava/lang/Object;>;", "subscriptions", "Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Throwable;>;", "[Lrx/internal/operators/OperatorMerge$InnerSubscriber<*>;", &RxInternalOperatorsOperatorMerge_MergeSubscriber_EMPTY, "LRxInternalOperatorsOperatorMerge;", "<T:Ljava/lang/Object;>Lrx/Subscriber<Lrx/Observable<+TT;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMerge_MergeSubscriber = { "MergeSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 20, 18, 33, -1, -1, 34, -1 };
  return &_RxInternalOperatorsOperatorMerge_MergeSubscriber;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorMerge_MergeSubscriber class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorMerge_MergeSubscriber_EMPTY, [IOSObjectArray newArrayWithLength:0 type:RxInternalOperatorsOperatorMerge_InnerSubscriber_class_()]);
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorMerge_MergeSubscriber)
  }
}

@end

void RxInternalOperatorsOperatorMerge_MergeSubscriber_initWithRxSubscriber_withBoolean_withInt_(RxInternalOperatorsOperatorMerge_MergeSubscriber *self, RxSubscriber *child, jboolean delayErrors, jint maxConcurrent) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->child_, child);
  self->delayErrors_ = delayErrors;
  self->maxConcurrent_ = maxConcurrent;
  JreStrongAssignAndConsume(&self->innerGuard_, new_NSObject_init());
  JreVolatileStrongAssign(&self->innerSubscribers_, RxInternalOperatorsOperatorMerge_MergeSubscriber_EMPTY);
  if (maxConcurrent == JavaLangInteger_MAX_VALUE) {
    self->scalarEmissionLimit_ = JavaLangInteger_MAX_VALUE;
    [self requestWithLong:JavaLangLong_MAX_VALUE];
  }
  else {
    self->scalarEmissionLimit_ = JavaLangMath_maxWithInt_withInt_(1, JreRShift32(maxConcurrent, 1));
    [self requestWithLong:maxConcurrent];
  }
}

RxInternalOperatorsOperatorMerge_MergeSubscriber *new_RxInternalOperatorsOperatorMerge_MergeSubscriber_initWithRxSubscriber_withBoolean_withInt_(RxSubscriber *child, jboolean delayErrors, jint maxConcurrent) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMerge_MergeSubscriber, initWithRxSubscriber_withBoolean_withInt_, child, delayErrors, maxConcurrent)
}

RxInternalOperatorsOperatorMerge_MergeSubscriber *create_RxInternalOperatorsOperatorMerge_MergeSubscriber_initWithRxSubscriber_withBoolean_withInt_(RxSubscriber *child, jboolean delayErrors, jint maxConcurrent) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMerge_MergeSubscriber, initWithRxSubscriber_withBoolean_withInt_, child, delayErrors, maxConcurrent)
}

void RxInternalOperatorsOperatorMerge_MergeSubscriber_reportError(RxInternalOperatorsOperatorMerge_MergeSubscriber *self) {
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithJavaUtilCollection_(JreLoadVolatileId(&self->errors_));
  if ([list size] == 1) {
    [((RxSubscriber *) nil_chk(self->child_)) onErrorWithNSException:[list getWithInt:0]];
  }
  else {
    [((RxSubscriber *) nil_chk(self->child_)) onErrorWithNSException:create_RxExceptionsCompositeException_initWithJavaUtilCollection_(list)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMerge_MergeSubscriber)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorMerge_InnerSubscriber)

jint RxInternalOperatorsOperatorMerge_InnerSubscriber_LIMIT;

@implementation RxInternalOperatorsOperatorMerge_InnerSubscriber

- (instancetype)initWithRxInternalOperatorsOperatorMerge_MergeSubscriber:(RxInternalOperatorsOperatorMerge_MergeSubscriber *)parent
                                                                withLong:(jlong)id_ {
  RxInternalOperatorsOperatorMerge_InnerSubscriber_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_(self, parent, id_);
  return self;
}

- (void)onStart {
  outstanding_ = JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE);
  [self requestWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
}

- (void)onNextWithId:(id)t {
  [((RxInternalOperatorsOperatorMerge_MergeSubscriber *) nil_chk(parent_)) tryEmitWithRxInternalOperatorsOperatorMerge_InnerSubscriber:self withId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  JreAssignVolatileBoolean(&done_, true);
  [((id<JavaUtilQueue>) nil_chk([((RxInternalOperatorsOperatorMerge_MergeSubscriber *) nil_chk(parent_)) getOrCreateErrorQueue])) offerWithId:e];
  [parent_ emit];
}

- (void)onCompleted {
  JreAssignVolatileBoolean(&done_, true);
  [((RxInternalOperatorsOperatorMerge_MergeSubscriber *) nil_chk(parent_)) emit];
}

- (void)requestMoreWithLong:(jlong)n {
  jint r = outstanding_ - (jint) n;
  if (r > RxInternalOperatorsOperatorMerge_InnerSubscriber_LIMIT) {
    outstanding_ = r;
    return;
  }
  outstanding_ = JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE);
  jint k = JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) - r;
  if (k > 0) {
    [self requestWithLong:k];
  }
}

- (void)__javaClone:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(parent_);
  JreReleaseVolatile(&queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorMerge_MergeSubscriber:withLong:);
  methods[1].selector = @selector(onStart);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onCompleted);
  methods[5].selector = @selector(requestMoreWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LRxInternalOperatorsOperatorMerge_MergeSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "id__", "J", .constantValue.asLong = 0, 0x10, 10, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "queue_", "LRxInternalUtilRxRingBuffer;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "outstanding_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "LIMIT", "I", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorMerge_MergeSubscriber;J", "(Lrx/internal/operators/OperatorMerge$MergeSubscriber<TT;>;J)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "requestMore", "J", "Lrx/internal/operators/OperatorMerge$MergeSubscriber<TT;>;", "id", &RxInternalOperatorsOperatorMerge_InnerSubscriber_LIMIT, "LRxInternalOperatorsOperatorMerge;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMerge_InnerSubscriber = { "InnerSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 6, 6, 12, -1, -1, 13, -1 };
  return &_RxInternalOperatorsOperatorMerge_InnerSubscriber;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorMerge_InnerSubscriber class]) {
    RxInternalOperatorsOperatorMerge_InnerSubscriber_LIMIT = JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) / 4;
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorMerge_InnerSubscriber)
  }
}

@end

void RxInternalOperatorsOperatorMerge_InnerSubscriber_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_(RxInternalOperatorsOperatorMerge_InnerSubscriber *self, RxInternalOperatorsOperatorMerge_MergeSubscriber *parent, jlong id_) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->id__ = id_;
}

RxInternalOperatorsOperatorMerge_InnerSubscriber *new_RxInternalOperatorsOperatorMerge_InnerSubscriber_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_(RxInternalOperatorsOperatorMerge_MergeSubscriber *parent, jlong id_) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMerge_InnerSubscriber, initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_, parent, id_)
}

RxInternalOperatorsOperatorMerge_InnerSubscriber *create_RxInternalOperatorsOperatorMerge_InnerSubscriber_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_(RxInternalOperatorsOperatorMerge_MergeSubscriber *parent, jlong id_) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMerge_InnerSubscriber, initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_, parent, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMerge_InnerSubscriber)
