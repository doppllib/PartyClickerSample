//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxSubscription.h"
#include "RxSubscriptionsBooleanSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/concurrent/Future.h"

@interface RxSubscriptionsSubscriptions ()

- (instancetype)init;

@end

inline RxSubscriptionsSubscriptions_Unsubscribed *RxSubscriptionsSubscriptions_get_UNSUBSCRIBED();
static RxSubscriptionsSubscriptions_Unsubscribed *RxSubscriptionsSubscriptions_UNSUBSCRIBED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubscriptionsSubscriptions, UNSUBSCRIBED, RxSubscriptionsSubscriptions_Unsubscribed *)

__attribute__((unused)) static void RxSubscriptionsSubscriptions_init(RxSubscriptionsSubscriptions *self);

__attribute__((unused)) static RxSubscriptionsSubscriptions *new_RxSubscriptionsSubscriptions_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsSubscriptions *create_RxSubscriptionsSubscriptions_init();

J2OBJC_INITIALIZED_DEFN(RxSubscriptionsSubscriptions)

@implementation RxSubscriptionsSubscriptions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsSubscriptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<RxSubscription>)empty {
  return RxSubscriptionsSubscriptions_empty();
}

+ (id<RxSubscription>)unsubscribed {
  return RxSubscriptionsSubscriptions_unsubscribed();
}

+ (id<RxSubscription>)createWithRxFunctionsAction0:(id<RxFunctionsAction0>)unsubscribe {
  return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(unsubscribe);
}

+ (id<RxSubscription>)fromWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f {
  return RxSubscriptionsSubscriptions_fromWithJavaUtilConcurrentFuture_(f);
}

+ (RxSubscriptionsCompositeSubscription *)fromWithRxSubscriptionArray:(IOSObjectArray *)subscriptions {
  return RxSubscriptionsSubscriptions_fromWithRxSubscriptionArray_(subscriptions);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "LRxSubscriptionsCompositeSubscription;", 0x89, 2, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(empty);
  methods[2].selector = @selector(unsubscribed);
  methods[3].selector = @selector(createWithRxFunctionsAction0:);
  methods[4].selector = @selector(fromWithJavaUtilConcurrentFuture:);
  methods[5].selector = @selector(fromWithRxSubscriptionArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNSUBSCRIBED", "LRxSubscriptionsSubscriptions_Unsubscribed;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LRxFunctionsAction0;", "from", "LJavaUtilConcurrentFuture;", "(Ljava/util/concurrent/Future<*>;)Lrx/Subscription;", "[LRxSubscription;", &RxSubscriptionsSubscriptions_UNSUBSCRIBED, "LRxSubscriptionsSubscriptions_FutureSubscription;LRxSubscriptionsSubscriptions_Unsubscribed;" };
  static const J2ObjcClassInfo _RxSubscriptionsSubscriptions = { "Subscriptions", "rx.subscriptions", ptrTable, methods, fields, 7, 0x11, 6, 1, -1, 7, -1, -1, -1 };
  return &_RxSubscriptionsSubscriptions;
}

+ (void)initialize {
  if (self == [RxSubscriptionsSubscriptions class]) {
    JreStrongAssignAndConsume(&RxSubscriptionsSubscriptions_UNSUBSCRIBED, new_RxSubscriptionsSubscriptions_Unsubscribed_init());
    J2OBJC_SET_INITIALIZED(RxSubscriptionsSubscriptions)
  }
}

@end

void RxSubscriptionsSubscriptions_init(RxSubscriptionsSubscriptions *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxSubscriptionsSubscriptions *new_RxSubscriptionsSubscriptions_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsSubscriptions, init)
}

RxSubscriptionsSubscriptions *create_RxSubscriptionsSubscriptions_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsSubscriptions, init)
}

id<RxSubscription> RxSubscriptionsSubscriptions_empty() {
  RxSubscriptionsSubscriptions_initialize();
  return RxSubscriptionsBooleanSubscription_create();
}

id<RxSubscription> RxSubscriptionsSubscriptions_unsubscribed() {
  RxSubscriptionsSubscriptions_initialize();
  return RxSubscriptionsSubscriptions_UNSUBSCRIBED;
}

id<RxSubscription> RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(id<RxFunctionsAction0> unsubscribe) {
  RxSubscriptionsSubscriptions_initialize();
  return RxSubscriptionsBooleanSubscription_createWithRxFunctionsAction0_(unsubscribe);
}

id<RxSubscription> RxSubscriptionsSubscriptions_fromWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> f) {
  RxSubscriptionsSubscriptions_initialize();
  return create_RxSubscriptionsSubscriptions_FutureSubscription_initWithJavaUtilConcurrentFuture_(f);
}

RxSubscriptionsCompositeSubscription *RxSubscriptionsSubscriptions_fromWithRxSubscriptionArray_(IOSObjectArray *subscriptions) {
  RxSubscriptionsSubscriptions_initialize();
  return create_RxSubscriptionsCompositeSubscription_initWithRxSubscriptionArray_(subscriptions);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsSubscriptions)

@implementation RxSubscriptionsSubscriptions_FutureSubscription

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f {
  RxSubscriptionsSubscriptions_FutureSubscription_initWithJavaUtilConcurrentFuture_(self, f);
  return self;
}

- (void)unsubscribe {
  [((id<JavaUtilConcurrentFuture>) nil_chk(f_)) cancelWithBoolean:true];
}

- (jboolean)isUnsubscribed {
  return [((id<JavaUtilConcurrentFuture>) nil_chk(f_)) isCancelled];
}

- (void)dealloc {
  RELEASE_(f_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentFuture:);
  methods[1].selector = @selector(unsubscribe);
  methods[2].selector = @selector(isUnsubscribed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "f_", "LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentFuture;", "(Ljava/util/concurrent/Future<*>;)V", "Ljava/util/concurrent/Future<*>;", "LRxSubscriptionsSubscriptions;" };
  static const J2ObjcClassInfo _RxSubscriptionsSubscriptions_FutureSubscription = { "FutureSubscription", "rx.subscriptions", ptrTable, methods, fields, 7, 0x18, 3, 1, 3, -1, -1, -1, -1 };
  return &_RxSubscriptionsSubscriptions_FutureSubscription;
}

@end

void RxSubscriptionsSubscriptions_FutureSubscription_initWithJavaUtilConcurrentFuture_(RxSubscriptionsSubscriptions_FutureSubscription *self, id<JavaUtilConcurrentFuture> f) {
  NSObject_init(self);
  JreStrongAssign(&self->f_, f);
}

RxSubscriptionsSubscriptions_FutureSubscription *new_RxSubscriptionsSubscriptions_FutureSubscription_initWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> f) {
  J2OBJC_NEW_IMPL(RxSubscriptionsSubscriptions_FutureSubscription, initWithJavaUtilConcurrentFuture_, f)
}

RxSubscriptionsSubscriptions_FutureSubscription *create_RxSubscriptionsSubscriptions_FutureSubscription_initWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> f) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsSubscriptions_FutureSubscription, initWithJavaUtilConcurrentFuture_, f)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsSubscriptions_FutureSubscription)

@implementation RxSubscriptionsSubscriptions_Unsubscribed

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsSubscriptions_Unsubscribed_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)unsubscribe {
}

- (jboolean)isUnsubscribed {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(unsubscribe);
  methods[2].selector = @selector(isUnsubscribed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxSubscriptionsSubscriptions;" };
  static const J2ObjcClassInfo _RxSubscriptionsSubscriptions_Unsubscribed = { "Unsubscribed", "rx.subscriptions", ptrTable, methods, NULL, 7, 0x18, 3, 0, 0, -1, -1, -1, -1 };
  return &_RxSubscriptionsSubscriptions_Unsubscribed;
}

@end

void RxSubscriptionsSubscriptions_Unsubscribed_init(RxSubscriptionsSubscriptions_Unsubscribed *self) {
  NSObject_init(self);
}

RxSubscriptionsSubscriptions_Unsubscribed *new_RxSubscriptionsSubscriptions_Unsubscribed_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsSubscriptions_Unsubscribed, init)
}

RxSubscriptionsSubscriptions_Unsubscribed *create_RxSubscriptionsSubscriptions_Unsubscribed_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsSubscriptions_Unsubscribed, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsSubscriptions_Unsubscribed)
