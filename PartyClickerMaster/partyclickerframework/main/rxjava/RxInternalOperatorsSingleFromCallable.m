//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxInternalOperatorsSingleFromCallable.h"
#include "RxSingleSubscriber.h"
#include "java/util/concurrent/Callable.h"

@implementation RxInternalOperatorsSingleFromCallable

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  RxInternalOperatorsSingleFromCallable_initWithJavaUtilConcurrentCallable_(self, callable);
  return self;
}

- (void)callWithId:(RxSingleSubscriber *)t {
  id v;
  @try {
    v = [((id<JavaUtilConcurrentCallable>) nil_chk(callable_)) call];
  }
  @catch (NSException *ex) {
    RxExceptionsExceptions_throwIfFatalWithNSException_(ex);
    [((RxSingleSubscriber *) nil_chk(t)) onErrorWithNSException:ex];
    return;
  }
  [((RxSingleSubscriber *) nil_chk(t)) onSuccessWithId:v];
}

- (void)dealloc {
  RELEASE_(callable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "callable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<+TT;>;)V", "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-TT;>;)V", "Ljava/util/concurrent/Callable<+TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Single$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleFromCallable = { "SingleFromCallable", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 6, -1 };
  return &_RxInternalOperatorsSingleFromCallable;
}

@end

void RxInternalOperatorsSingleFromCallable_initWithJavaUtilConcurrentCallable_(RxInternalOperatorsSingleFromCallable *self, id<JavaUtilConcurrentCallable> callable) {
  NSObject_init(self);
  JreStrongAssign(&self->callable_, callable);
}

RxInternalOperatorsSingleFromCallable *new_RxInternalOperatorsSingleFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleFromCallable, initWithJavaUtilConcurrentCallable_, callable)
}

RxInternalOperatorsSingleFromCallable *create_RxInternalOperatorsSingleFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleFromCallable, initWithJavaUtilConcurrentCallable_, callable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsSingleFromCallable)
