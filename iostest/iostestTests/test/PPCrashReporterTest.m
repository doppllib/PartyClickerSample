//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "PDParty.h"
#include "PPCrashReporter.h"
#include "PPCrashReporterTest.h"
#include "PPPartyListPresenter.h"
#include "PTDaggerTestNoContextComponent.h"
#include "PTMemoryDataProvider.h"
#include "PTTestNoContextComponent.h"
#include "PTTestNoContextModule.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"

@interface PPCrashReporterTest () {
 @public
  id<PPCrashReporter> crashReporter_;
  PPPartyListPresenter *presenter_;
}

@end

J2OBJC_FIELD_SETTER(PPCrashReporterTest, crashReporter_, id<PPCrashReporter>)
J2OBJC_FIELD_SETTER(PPCrashReporterTest, presenter_, PPPartyListPresenter *)

__attribute__((unused)) static IOSObjectArray *PPCrashReporterTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *PPCrashReporterTest__Annotations$1();

@interface PPCrashReporterTest_1 : PTMemoryDataProvider

- (instancetype)init;

- (PDParty *)createPartyWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(PPCrashReporterTest_1)

__attribute__((unused)) static void PPCrashReporterTest_1_init(PPCrashReporterTest_1 *self);

__attribute__((unused)) static PPCrashReporterTest_1 *new_PPCrashReporterTest_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static PPCrashReporterTest_1 *create_PPCrashReporterTest_1_init();

@implementation PPCrashReporterTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PPCrashReporterTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  JreStrongAssign(&crashReporter_, OrgMockitoMockito_mockWithIOSClass_(PPCrashReporter_class_()));
  id<PTTestNoContextComponent> component = [((PTDaggerTestNoContextComponent_Builder *) nil_chk([((PTDaggerTestNoContextComponent_Builder *) nil_chk(PTDaggerTestNoContextComponent_builder())) testNoContextModuleWithPTTestNoContextModule:create_PTTestNoContextModule_initWithPDDataProvider_withPPCrashReporter_(create_PPCrashReporterTest_1_init(), crashReporter_)])) build];
  JreStrongAssignAndConsume(&presenter_, new_PPPartyListPresenter_init());
  [((id<PTTestNoContextComponent>) nil_chk(component)) injectWithPPPartyListPresenter:presenter_];
}

- (void)reportTest {
  [((PPPartyListPresenter *) nil_chk(presenter_)) createPartyWithNSString:@"Fyre Festival"];
  [((id<PPCrashReporter>) nil_chk(OrgMockitoMockito_verifyWithId_(crashReporter_))) reportWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
}

- (void)logTest {
  [((PPPartyListPresenter *) nil_chk(presenter_)) createPartyWithNSString:@"Coachella"];
  [((id<PPCrashReporter>) nil_chk(OrgMockitoMockito_verifyWithId_(crashReporter_))) logWithNSString:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
}

- (void)dealloc {
  RELEASE_(crashReporter_);
  RELEASE_(presenter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(reportTest);
  methods[3].selector = @selector(logTest);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "crashReporter_", "LPPCrashReporter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "presenter_", "LPPPartyListPresenter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&PPCrashReporterTest__Annotations$0, (void *)&PPCrashReporterTest__Annotations$1 };
  static const J2ObjcClassInfo _PPCrashReporterTest = { "CrashReporterTest", "com.kgalligan.partyclicker.presenter", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_PPCrashReporterTest;
}

@end

void PPCrashReporterTest_init(PPCrashReporterTest *self) {
  NSObject_init(self);
}

PPCrashReporterTest *new_PPCrashReporterTest_init() {
  J2OBJC_NEW_IMPL(PPCrashReporterTest, init)
}

PPCrashReporterTest *create_PPCrashReporterTest_init() {
  J2OBJC_CREATE_IMPL(PPCrashReporterTest, init)
}

IOSObjectArray *PPCrashReporterTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *PPCrashReporterTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PPCrashReporterTest)

@implementation PPCrashReporterTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PPCrashReporterTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (PDParty *)createPartyWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) java_contains:@"Fyre"]) @throw create_JavaLangRuntimeException_initWithNSString_(@"#dumpsterfyre");
  else {
    return [super createPartyWithNSString:name];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LPDParty;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createPartyWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createParty", "LNSString;", "LPPCrashReporterTest;", "setUp" };
  static const J2ObjcClassInfo _PPCrashReporterTest_1 = { "", "com.kgalligan.partyclicker.presenter", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, -1, -1 };
  return &_PPCrashReporterTest_1;
}

@end

void PPCrashReporterTest_1_init(PPCrashReporterTest_1 *self) {
  PTMemoryDataProvider_init(self);
}

PPCrashReporterTest_1 *new_PPCrashReporterTest_1_init() {
  J2OBJC_NEW_IMPL(PPCrashReporterTest_1, init)
}

PPCrashReporterTest_1 *create_PPCrashReporterTest_1_init() {
  J2OBJC_CREATE_IMPL(PPCrashReporterTest_1, init)
}
