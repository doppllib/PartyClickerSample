//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribePublishMulticast
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribePublishMulticast

#if !defined (RxInternalOperatorsOnSubscribePublishMulticast_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast || defined(INCLUDE_RxInternalOperatorsOnSubscribePublishMulticast))
#define RxInternalOperatorsOnSubscribePublishMulticast_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "RxObserver.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "RxSubscription.h"

@class IOSObjectArray;
@class RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber;
@class RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;
@class RxSubscriber;
@protocol JavaUtilQueue;
@protocol RxProducer;

@interface RxInternalOperatorsOnSubscribePublishMulticast : JavaUtilConcurrentAtomicAtomicInteger < RxObservable_OnSubscribe, RxObserver, RxSubscription > {
 @public
  id<JavaUtilQueue> queue_;
  jint prefetch_;
  jboolean delayError_;
  RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *parent_;
  volatile_jboolean done_;
  NSException *error_;
  volatile_id producer_;
  volatile_id subscribers_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)prefetch
                withBoolean:(jboolean)delayError;

- (void)callWithId:(RxSubscriber *)t;

- (jboolean)isUnsubscribed;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (RxSubscriber *)subscriber;

- (void)unsubscribe;

#pragma mark Package-Private

- (jboolean)addWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *)inner;

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty;

- (void)drain;

- (void)removeWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *)inner;

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

- (IOSObjectArray *)terminate;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOnSubscribePublishMulticast)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, queue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, parent_, RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, error_, NSException *)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, producer_, id<RxProducer>)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, subscribers_, IOSObjectArray *)

inline IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOnSubscribePublishMulticast, EMPTY, IOSObjectArray *)

inline IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOnSubscribePublishMulticast, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(RxInternalOperatorsOnSubscribePublishMulticast *self, jint prefetch, jboolean delayError);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast *new_RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(jint prefetch, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast *create_RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(jint prefetch, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribePublishMulticast)

#endif

#if !defined (RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast || defined(INCLUDE_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber))
#define RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "RxSubscriber.h"

@class RxInternalOperatorsOnSubscribePublishMulticast;
@protocol RxProducer;

@interface RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber : RxSubscriber {
 @public
  RxInternalOperatorsOnSubscribePublishMulticast *state_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOnSubscribePublishMulticast:(RxInternalOperatorsOnSubscribePublishMulticast *)state;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber, state_, RxInternalOperatorsOnSubscribePublishMulticast *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *self, RxInternalOperatorsOnSubscribePublishMulticast *state);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *new_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *create_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast *state);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber)

#endif

#if !defined (RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast || defined(INCLUDE_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer))
#define RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "RxProducer.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "RxSubscription.h"

@class JavaUtilConcurrentAtomicAtomicBoolean;
@class RxInternalOperatorsOnSubscribePublishMulticast;
@class RxSubscriber;

@interface RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer : JavaUtilConcurrentAtomicAtomicLong < RxProducer, RxSubscription > {
 @public
  RxSubscriber *actual_;
  RxInternalOperatorsOnSubscribePublishMulticast *parent_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
withRxInternalOperatorsOnSubscribePublishMulticast:(RxInternalOperatorsOnSubscribePublishMulticast *)parent;

- (jboolean)isUnsubscribed;

- (void)requestWithLong:(jlong)n;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, actual_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, parent_, RxInternalOperatorsOnSubscribePublishMulticast *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, once_, JavaUtilConcurrentAtomicAtomicBoolean *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *self, RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *new_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *create_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast")
