//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSupportSQLiteDatabase.h"
#include "AndroidArchPersistenceDbSupportSQLiteOpenHelper.h"
#include "AndroidArchPersistenceRoomDatabaseConfiguration.h"
#include "AndroidArchPersistenceRoomMigrationMigration.h"
#include "AndroidArchPersistenceRoomRoomDatabase.h"
#include "AndroidArchPersistenceRoomRoomMasterTable.h"
#include "AndroidArchPersistenceRoomRoomOpenHelper.h"
#include "AndroidArchPersistenceRoomUtilStringUtil.h"
#include "AndroidDatabaseCursor.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/List.h"

@interface AndroidArchPersistenceRoomRoomOpenHelper () {
 @public
  AndroidArchPersistenceRoomDatabaseConfiguration *mConfiguration_;
  AndroidArchPersistenceRoomRoomOpenHelper_Delegate *mDelegate_;
  NSString *mIdentityHash_;
}

- (void)checkIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db;

- (void)updateIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db;

- (void)createMasterTableIfNotExistsWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomOpenHelper, mConfiguration_, AndroidArchPersistenceRoomDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomOpenHelper, mDelegate_, AndroidArchPersistenceRoomRoomOpenHelper_Delegate *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomOpenHelper, mIdentityHash_, NSString *)

__attribute__((unused)) static void AndroidArchPersistenceRoomRoomOpenHelper_checkIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(AndroidArchPersistenceRoomRoomOpenHelper *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> db);

__attribute__((unused)) static void AndroidArchPersistenceRoomRoomOpenHelper_updateIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(AndroidArchPersistenceRoomRoomOpenHelper *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> db);

__attribute__((unused)) static void AndroidArchPersistenceRoomRoomOpenHelper_createMasterTableIfNotExistsWithAndroidArchPersistenceDbSupportSQLiteDatabase_(AndroidArchPersistenceRoomRoomOpenHelper *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> db);

@implementation AndroidArchPersistenceRoomRoomOpenHelper

- (instancetype)initWithAndroidArchPersistenceRoomDatabaseConfiguration:(AndroidArchPersistenceRoomDatabaseConfiguration *)configuration
                  withAndroidArchPersistenceRoomRoomOpenHelper_Delegate:(AndroidArchPersistenceRoomRoomOpenHelper_Delegate *)delegate
                                                           withNSString:(NSString *)identityHash {
  AndroidArchPersistenceRoomRoomOpenHelper_initWithAndroidArchPersistenceRoomDatabaseConfiguration_withAndroidArchPersistenceRoomRoomOpenHelper_Delegate_withNSString_(self, configuration, delegate, identityHash);
  return self;
}

- (void)onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  [super onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
}

- (void)onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  AndroidArchPersistenceRoomRoomOpenHelper_updateIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(self, db);
  [((AndroidArchPersistenceRoomRoomOpenHelper_Delegate *) nil_chk(mDelegate_)) createAllTablesWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
}

- (void)onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db
                                                           withInt:(jint)oldVersion
                                                           withInt:(jint)newVersion {
  __unused jboolean migrated = false;
  if (mConfiguration_ != nil) {
    __unused id<JavaUtilList> migrations = [((AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *) nil_chk(mConfiguration_->migrationContainer_)) findMigrationPathWithInt:oldVersion withInt:newVersion];
    if (migrations != nil) {
      for (AndroidArchPersistenceRoomMigrationMigration * __strong migration in migrations) {
        [((AndroidArchPersistenceRoomMigrationMigration *) nil_chk(migration)) migrateWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
      }
      [((AndroidArchPersistenceRoomRoomOpenHelper_Delegate *) nil_chk(mDelegate_)) validateMigrationWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
      AndroidArchPersistenceRoomRoomOpenHelper_updateIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(self, db);
      migrated = true;
    }
  }
  if (!migrated) {
    [((AndroidArchPersistenceRoomRoomOpenHelper_Delegate *) nil_chk(mDelegate_)) dropAllTablesWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
    [mDelegate_ createAllTablesWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
  }
}

- (void)onDowngradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db
                                                             withInt:(jint)oldVersion
                                                             withInt:(jint)newVersion {
  [self onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:db withInt:oldVersion withInt:newVersion];
}

- (void)onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  [super onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
  AndroidArchPersistenceRoomRoomOpenHelper_checkIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(self, db);
  [((AndroidArchPersistenceRoomRoomOpenHelper_Delegate *) nil_chk(mDelegate_)) onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
  JreStrongAssign(&mConfiguration_, nil);
}

- (void)checkIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  AndroidArchPersistenceRoomRoomOpenHelper_checkIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(self, db);
}

- (void)updateIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  AndroidArchPersistenceRoomRoomOpenHelper_updateIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(self, db);
}

- (void)createMasterTableIfNotExistsWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  AndroidArchPersistenceRoomRoomOpenHelper_createMasterTableIfNotExistsWithAndroidArchPersistenceDbSupportSQLiteDatabase_(self, db);
}

- (void)dealloc {
  RELEASE_(mConfiguration_);
  RELEASE_(mDelegate_);
  RELEASE_(mIdentityHash_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomDatabaseConfiguration:withAndroidArchPersistenceRoomRoomOpenHelper_Delegate:withNSString:);
  methods[1].selector = @selector(onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[2].selector = @selector(onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[3].selector = @selector(onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:withInt:withInt:);
  methods[4].selector = @selector(onDowngradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:withInt:withInt:);
  methods[5].selector = @selector(onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[6].selector = @selector(checkIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[7].selector = @selector(updateIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[8].selector = @selector(createMasterTableIfNotExistsWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mConfiguration_", "LAndroidArchPersistenceRoomDatabaseConfiguration;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDelegate_", "LAndroidArchPersistenceRoomRoomOpenHelper_Delegate;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIdentityHash_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomDatabaseConfiguration;LAndroidArchPersistenceRoomRoomOpenHelper_Delegate;LNSString;", "onConfigure", "LAndroidArchPersistenceDbSupportSQLiteDatabase;", "onCreate", "onUpgrade", "LAndroidArchPersistenceDbSupportSQLiteDatabase;II", "onDowngrade", "onOpen", "checkIdentity", "updateIdentity", "createMasterTableIfNotExists", "LAndroidArchPersistenceRoomRoomOpenHelper_Delegate;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRoomOpenHelper = { "RoomOpenHelper", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, 11, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRoomOpenHelper;
}

@end

void AndroidArchPersistenceRoomRoomOpenHelper_initWithAndroidArchPersistenceRoomDatabaseConfiguration_withAndroidArchPersistenceRoomRoomOpenHelper_Delegate_withNSString_(AndroidArchPersistenceRoomRoomOpenHelper *self, AndroidArchPersistenceRoomDatabaseConfiguration *configuration, AndroidArchPersistenceRoomRoomOpenHelper_Delegate *delegate, NSString *identityHash) {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_init(self);
  JreStrongAssign(&self->mConfiguration_, configuration);
  JreStrongAssign(&self->mDelegate_, delegate);
  JreStrongAssign(&self->mIdentityHash_, identityHash);
}

AndroidArchPersistenceRoomRoomOpenHelper *new_AndroidArchPersistenceRoomRoomOpenHelper_initWithAndroidArchPersistenceRoomDatabaseConfiguration_withAndroidArchPersistenceRoomRoomOpenHelper_Delegate_withNSString_(AndroidArchPersistenceRoomDatabaseConfiguration *configuration, AndroidArchPersistenceRoomRoomOpenHelper_Delegate *delegate, NSString *identityHash) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRoomOpenHelper, initWithAndroidArchPersistenceRoomDatabaseConfiguration_withAndroidArchPersistenceRoomRoomOpenHelper_Delegate_withNSString_, configuration, delegate, identityHash)
}

AndroidArchPersistenceRoomRoomOpenHelper *create_AndroidArchPersistenceRoomRoomOpenHelper_initWithAndroidArchPersistenceRoomDatabaseConfiguration_withAndroidArchPersistenceRoomRoomOpenHelper_Delegate_withNSString_(AndroidArchPersistenceRoomDatabaseConfiguration *configuration, AndroidArchPersistenceRoomRoomOpenHelper_Delegate *delegate, NSString *identityHash) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRoomOpenHelper, initWithAndroidArchPersistenceRoomDatabaseConfiguration_withAndroidArchPersistenceRoomRoomOpenHelper_Delegate_withNSString_, configuration, delegate, identityHash)
}

void AndroidArchPersistenceRoomRoomOpenHelper_checkIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(AndroidArchPersistenceRoomRoomOpenHelper *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> db) {
  AndroidArchPersistenceRoomRoomOpenHelper_createMasterTableIfNotExistsWithAndroidArchPersistenceDbSupportSQLiteDatabase_(self, db);
  __unused NSString *identityHash = @"";
  __unused id<AndroidDatabaseCursor> cursor = [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(db)) rawQueryWithNSString:AndroidArchPersistenceRoomRoomMasterTable_READ_QUERY withNSStringArray:JreLoadStatic(AndroidArchPersistenceRoomUtilStringUtil, EMPTY_STRING_ARRAY)];
  @try {
    if ([((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToFirst]) {
      identityHash = [cursor getStringWithInt:0];
    }
  }
  @finally {
    [cursor close];
  }
  if (![((NSString *) nil_chk(self->mIdentityHash_)) isEqual:identityHash]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Room cannot verify the data integrity. Looks like you've changed schema but forgot to update the version number. You can simply fix this by increasing the version number.");
  }
}

void AndroidArchPersistenceRoomRoomOpenHelper_updateIdentityWithAndroidArchPersistenceDbSupportSQLiteDatabase_(AndroidArchPersistenceRoomRoomOpenHelper *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> db) {
  AndroidArchPersistenceRoomRoomOpenHelper_createMasterTableIfNotExistsWithAndroidArchPersistenceDbSupportSQLiteDatabase_(self, db);
  [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(db)) execSQLWithNSString:AndroidArchPersistenceRoomRoomMasterTable_createInsertQueryWithNSString_(self->mIdentityHash_)];
}

void AndroidArchPersistenceRoomRoomOpenHelper_createMasterTableIfNotExistsWithAndroidArchPersistenceDbSupportSQLiteDatabase_(AndroidArchPersistenceRoomRoomOpenHelper *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> db) {
  [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(db)) execSQLWithNSString:AndroidArchPersistenceRoomRoomMasterTable_CREATE_QUERY];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRoomOpenHelper)

@implementation AndroidArchPersistenceRoomRoomOpenHelper_Delegate

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceRoomRoomOpenHelper_Delegate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dropAllTablesWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)createAllTablesWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)validateMigrationWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 4, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(dropAllTablesWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[2].selector = @selector(createAllTablesWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[3].selector = @selector(onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[4].selector = @selector(validateMigrationWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "dropAllTables", "LAndroidArchPersistenceDbSupportSQLiteDatabase;", "createAllTables", "onOpen", "validateMigration", "LAndroidArchPersistenceRoomRoomOpenHelper;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRoomOpenHelper_Delegate = { "Delegate", "android.arch.persistence.room", ptrTable, methods, NULL, 7, 0x409, 5, 0, 5, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRoomOpenHelper_Delegate;
}

@end

void AndroidArchPersistenceRoomRoomOpenHelper_Delegate_init(AndroidArchPersistenceRoomRoomOpenHelper_Delegate *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRoomOpenHelper_Delegate)
