//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxInternalOperatorsSingleTakeUntilCompletable.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxSingle.h"
#include "RxSingleSubscriber.h"
#include "RxSubscription.h"
#include "java/util/concurrent/CancellationException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@implementation RxInternalOperatorsSingleTakeUntilCompletable

- (instancetype)initWithRxSingle_OnSubscribe:(id<RxSingle_OnSubscribe>)source
                           withRxCompletable:(RxCompletable *)other {
  RxInternalOperatorsSingleTakeUntilCompletable_initWithRxSingle_OnSubscribe_withRxCompletable_(self, source, other);
  return self;
}

- (void)callWithId:(RxSingleSubscriber *)t {
  RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber *parent = create_RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber_initWithRxSingleSubscriber_(t);
  [((RxSingleSubscriber *) nil_chk(t)) addWithRxSubscription:parent];
  [((RxCompletable *) nil_chk(other_)) subscribeWithRxCompletableSubscriber:parent];
  [((id<RxSingle_OnSubscribe>) nil_chk(source_)) callWithId:parent];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSingle_OnSubscribe:withRxCompletable:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxSingle_OnSubscribe;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "other_", "LRxCompletable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSingle_OnSubscribe;LRxCompletable;", "(Lrx/Single$OnSubscribe<TT;>;Lrx/Completable;)V", "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-TT;>;)V", "Lrx/Single$OnSubscribe<TT;>;", "LRxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Single$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleTakeUntilCompletable = { "SingleTakeUntilCompletable", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 6, -1, 7, -1 };
  return &_RxInternalOperatorsSingleTakeUntilCompletable;
}

@end

void RxInternalOperatorsSingleTakeUntilCompletable_initWithRxSingle_OnSubscribe_withRxCompletable_(RxInternalOperatorsSingleTakeUntilCompletable *self, id<RxSingle_OnSubscribe> source, RxCompletable *other) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->other_, other);
}

RxInternalOperatorsSingleTakeUntilCompletable *new_RxInternalOperatorsSingleTakeUntilCompletable_initWithRxSingle_OnSubscribe_withRxCompletable_(id<RxSingle_OnSubscribe> source, RxCompletable *other) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleTakeUntilCompletable, initWithRxSingle_OnSubscribe_withRxCompletable_, source, other)
}

RxInternalOperatorsSingleTakeUntilCompletable *create_RxInternalOperatorsSingleTakeUntilCompletable_initWithRxSingle_OnSubscribe_withRxCompletable_(id<RxSingle_OnSubscribe> source, RxCompletable *other) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleTakeUntilCompletable, initWithRxSingle_OnSubscribe_withRxCompletable_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsSingleTakeUntilCompletable)

@implementation RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber

- (instancetype)initWithRxSingleSubscriber:(RxSingleSubscriber *)actual {
  RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber_initWithRxSingleSubscriber_(self, actual);
  return self;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [self addWithRxSubscription:d];
}

- (void)onSuccessWithId:(id)value {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [self unsubscribe];
    [((RxSingleSubscriber *) nil_chk(actual_)) onSuccessWithId:value];
  }
}

- (void)onErrorWithNSException:(NSException *)error {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [self unsubscribe];
    [((RxSingleSubscriber *) nil_chk(actual_)) onErrorWithNSException:error];
  }
  else {
    RxPluginsRxJavaHooks_onErrorWithNSException_(error);
  }
}

- (void)onCompleted {
  [self onErrorWithNSException:create_JavaUtilConcurrentCancellationException_initWithNSString_(@"Stream was canceled before emitting a terminal event.")];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(once_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSingleSubscriber:);
  methods[1].selector = @selector(onSubscribeWithRxSubscription:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LRxSingleSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-TT;>;)V", "onSubscribe", "LRxSubscription;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/SingleSubscriber<-TT;>;", "LRxInternalOperatorsSingleTakeUntilCompletable;", "<T:Ljava/lang/Object;>Lrx/SingleSubscriber<TT;>;Lrx/CompletableSubscriber;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber = { "TakeUntilSourceSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 5, 2, 10, -1, -1, 11, -1 };
  return &_RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber;
}

@end

void RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber_initWithRxSingleSubscriber_(RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber *self, RxSingleSubscriber *actual) {
  RxSingleSubscriber_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber *new_RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber_initWithRxSingleSubscriber_(RxSingleSubscriber *actual) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber, initWithRxSingleSubscriber_, actual)
}

RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber *create_RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber_initWithRxSingleSubscriber_(RxSingleSubscriber *actual) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber, initWithRxSingleSubscriber_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsSingleTakeUntilCompletable_TakeUntilSourceSubscriber)
