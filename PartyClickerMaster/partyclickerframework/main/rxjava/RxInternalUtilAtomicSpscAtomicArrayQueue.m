//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalUtilAtomicAtomicReferenceArrayQueue.h"
#include "RxInternalUtilAtomicSpscAtomicArrayQueue.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

@interface RxInternalUtilAtomicSpscAtomicArrayQueue ()

- (void)soProducerIndexWithLong:(jlong)newIndex;

- (void)soConsumerIndexWithLong:(jlong)newIndex;

- (jlong)lvConsumerIndex;

- (jlong)lvProducerIndex;

@end

inline JavaLangInteger *RxInternalUtilAtomicSpscAtomicArrayQueue_get_MAX_LOOK_AHEAD_STEP();
static JavaLangInteger *RxInternalUtilAtomicSpscAtomicArrayQueue_MAX_LOOK_AHEAD_STEP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalUtilAtomicSpscAtomicArrayQueue, MAX_LOOK_AHEAD_STEP, JavaLangInteger *)

__attribute__((unused)) static void RxInternalUtilAtomicSpscAtomicArrayQueue_soProducerIndexWithLong_(RxInternalUtilAtomicSpscAtomicArrayQueue *self, jlong newIndex);

__attribute__((unused)) static void RxInternalUtilAtomicSpscAtomicArrayQueue_soConsumerIndexWithLong_(RxInternalUtilAtomicSpscAtomicArrayQueue *self, jlong newIndex);

__attribute__((unused)) static jlong RxInternalUtilAtomicSpscAtomicArrayQueue_lvConsumerIndex(RxInternalUtilAtomicSpscAtomicArrayQueue *self);

__attribute__((unused)) static jlong RxInternalUtilAtomicSpscAtomicArrayQueue_lvProducerIndex(RxInternalUtilAtomicSpscAtomicArrayQueue *self);

J2OBJC_INITIALIZED_DEFN(RxInternalUtilAtomicSpscAtomicArrayQueue)

@implementation RxInternalUtilAtomicSpscAtomicArrayQueue

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(self, capacity);
  return self;
}

- (jboolean)offerWithId:(id)e {
  if (nil == e) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Null is not a valid element");
  }
  JavaUtilConcurrentAtomicAtomicReferenceArray *buffer = self->buffer_;
  jint mask = self->mask_;
  jlong index = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(producerIndex_)) get];
  jint offset = [self calcElementOffsetWithLong:index withInt:mask];
  if (index >= producerLookAhead_) {
    jint step = lookAheadStep_;
    if (nil == [self lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:buffer withInt:[self calcElementOffsetWithLong:index + step withInt:mask]]) {
      producerLookAhead_ = index + step;
    }
    else if (nil != [self lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:buffer withInt:offset]) {
      return false;
    }
  }
  [self soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:buffer withInt:offset withId:e];
  RxInternalUtilAtomicSpscAtomicArrayQueue_soProducerIndexWithLong_(self, index + 1);
  return true;
}

- (id)poll {
  jlong index = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(consumerIndex_)) get];
  jint offset = [self calcElementOffsetWithLong:index];
  JavaUtilConcurrentAtomicAtomicReferenceArray *lElementBuffer = buffer_;
  id e = [self lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:lElementBuffer withInt:offset];
  if (nil == e) {
    return nil;
  }
  [self soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:lElementBuffer withInt:offset withId:nil];
  RxInternalUtilAtomicSpscAtomicArrayQueue_soConsumerIndexWithLong_(self, index + 1);
  return e;
}

- (id)peek {
  return [self lvElementWithInt:[self calcElementOffsetWithLong:[((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(consumerIndex_)) get]]];
}

- (jint)size {
  jlong after = RxInternalUtilAtomicSpscAtomicArrayQueue_lvConsumerIndex(self);
  while (true) {
    jlong before = after;
    jlong currentProducerIndex = RxInternalUtilAtomicSpscAtomicArrayQueue_lvProducerIndex(self);
    after = RxInternalUtilAtomicSpscAtomicArrayQueue_lvConsumerIndex(self);
    if (before == after) {
      return (jint) (currentProducerIndex - after);
    }
  }
}

- (jboolean)isEmpty {
  return RxInternalUtilAtomicSpscAtomicArrayQueue_lvProducerIndex(self) == RxInternalUtilAtomicSpscAtomicArrayQueue_lvConsumerIndex(self);
}

- (void)soProducerIndexWithLong:(jlong)newIndex {
  RxInternalUtilAtomicSpscAtomicArrayQueue_soProducerIndexWithLong_(self, newIndex);
}

- (void)soConsumerIndexWithLong:(jlong)newIndex {
  RxInternalUtilAtomicSpscAtomicArrayQueue_soConsumerIndexWithLong_(self, newIndex);
}

- (jlong)lvConsumerIndex {
  return RxInternalUtilAtomicSpscAtomicArrayQueue_lvConsumerIndex(self);
}

- (jlong)lvProducerIndex {
  return RxInternalUtilAtomicSpscAtomicArrayQueue_lvProducerIndex(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(producerIndex_);
  RELEASE_(consumerIndex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(offerWithId:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(peek);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(isEmpty);
  methods[6].selector = @selector(soProducerIndexWithLong:);
  methods[7].selector = @selector(soConsumerIndexWithLong:);
  methods[8].selector = @selector(lvConsumerIndex);
  methods[9].selector = @selector(lvProducerIndex);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_LOOK_AHEAD_STEP", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "producerIndex_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "producerLookAhead_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "consumerIndex_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lookAheadStep_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "offer", "LNSObject;", "(TE;)Z", "()TE;", "soProducerIndex", "J", "soConsumerIndex", &RxInternalUtilAtomicSpscAtomicArrayQueue_MAX_LOOK_AHEAD_STEP, "<E:Ljava/lang/Object;>Lrx/internal/util/atomic/AtomicReferenceArrayQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilAtomicSpscAtomicArrayQueue = { "SpscAtomicArrayQueue", "rx.internal.util.atomic", ptrTable, methods, fields, 7, 0x11, 10, 5, -1, -1, -1, 9, -1 };
  return &_RxInternalUtilAtomicSpscAtomicArrayQueue;
}

+ (void)initialize {
  if (self == [RxInternalUtilAtomicSpscAtomicArrayQueue class]) {
    JreStrongAssign(&RxInternalUtilAtomicSpscAtomicArrayQueue_MAX_LOOK_AHEAD_STEP, JavaLangInteger_getIntegerWithNSString_withInt_(@"jctools.spsc.max.lookahead.step", 4096));
    J2OBJC_SET_INITIALIZED(RxInternalUtilAtomicSpscAtomicArrayQueue)
  }
}

@end

void RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(RxInternalUtilAtomicSpscAtomicArrayQueue *self, jint capacity) {
  RxInternalUtilAtomicAtomicReferenceArrayQueue_initWithInt_(self, capacity);
  JreStrongAssignAndConsume(&self->producerIndex_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->consumerIndex_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  self->lookAheadStep_ = JavaLangMath_minWithInt_withInt_(capacity / 4, [((JavaLangInteger *) nil_chk(RxInternalUtilAtomicSpscAtomicArrayQueue_MAX_LOOK_AHEAD_STEP)) intValue]);
}

RxInternalUtilAtomicSpscAtomicArrayQueue *new_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(RxInternalUtilAtomicSpscAtomicArrayQueue, initWithInt_, capacity)
}

RxInternalUtilAtomicSpscAtomicArrayQueue *create_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(RxInternalUtilAtomicSpscAtomicArrayQueue, initWithInt_, capacity)
}

void RxInternalUtilAtomicSpscAtomicArrayQueue_soProducerIndexWithLong_(RxInternalUtilAtomicSpscAtomicArrayQueue *self, jlong newIndex) {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->producerIndex_)) lazySetWithLong:newIndex];
}

void RxInternalUtilAtomicSpscAtomicArrayQueue_soConsumerIndexWithLong_(RxInternalUtilAtomicSpscAtomicArrayQueue *self, jlong newIndex) {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->consumerIndex_)) lazySetWithLong:newIndex];
}

jlong RxInternalUtilAtomicSpscAtomicArrayQueue_lvConsumerIndex(RxInternalUtilAtomicSpscAtomicArrayQueue *self) {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->consumerIndex_)) get];
}

jlong RxInternalUtilAtomicSpscAtomicArrayQueue_lvProducerIndex(RxInternalUtilAtomicSpscAtomicArrayQueue *self) {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->producerIndex_)) get];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilAtomicSpscAtomicArrayQueue)
