//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsSingleFromCallable")
#ifdef RESTRICT_RxInternalOperatorsSingleFromCallable
#define INCLUDE_ALL_RxInternalOperatorsSingleFromCallable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsSingleFromCallable 1
#endif
#undef RESTRICT_RxInternalOperatorsSingleFromCallable

#if !defined (RxInternalOperatorsSingleFromCallable_) && (INCLUDE_ALL_RxInternalOperatorsSingleFromCallable || defined(INCLUDE_RxInternalOperatorsSingleFromCallable))
#define RxInternalOperatorsSingleFromCallable_

#define RESTRICT_RxSingle 1
#define INCLUDE_RxSingle_OnSubscribe 1
#include "RxSingle.h"

@class RxSingleSubscriber;
@protocol JavaUtilConcurrentCallable;

@interface RxInternalOperatorsSingleFromCallable : NSObject < RxSingle_OnSubscribe > {
 @public
  id<JavaUtilConcurrentCallable> callable_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

- (void)callWithId:(RxSingleSubscriber *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsSingleFromCallable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleFromCallable, callable_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void RxInternalOperatorsSingleFromCallable_initWithJavaUtilConcurrentCallable_(RxInternalOperatorsSingleFromCallable *self, id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT RxInternalOperatorsSingleFromCallable *new_RxInternalOperatorsSingleFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsSingleFromCallable *create_RxInternalOperatorsSingleFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsSingleFromCallable)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsSingleFromCallable")
