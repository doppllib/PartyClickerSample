//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxExceptionsOnCompletedFailedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"

inline jlong RxExceptionsOnCompletedFailedException_get_serialVersionUID();
#define RxExceptionsOnCompletedFailedException_serialVersionUID 8622579378868820554LL
J2OBJC_STATIC_FIELD_CONSTANT(RxExceptionsOnCompletedFailedException, serialVersionUID, jlong)

@implementation RxExceptionsOnCompletedFailedException

- (instancetype)initWithNSException:(NSException *)throwable {
  RxExceptionsOnCompletedFailedException_initWithNSException_(self, throwable);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)throwable {
  RxExceptionsOnCompletedFailedException_initWithNSString_withNSException_(self, message, throwable);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSException:);
  methods[1].selector = @selector(initWithNSString:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxExceptionsOnCompletedFailedException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "LNSString;LNSException;" };
  static const J2ObjcClassInfo _RxExceptionsOnCompletedFailedException = { "OnCompletedFailedException", "rx.exceptions", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_RxExceptionsOnCompletedFailedException;
}

@end

void RxExceptionsOnCompletedFailedException_initWithNSException_(RxExceptionsOnCompletedFailedException *self, NSException *throwable) {
  JavaLangRuntimeException_initWithNSException_(self, throwable != nil ? throwable : create_JavaLangNullPointerException_init());
}

RxExceptionsOnCompletedFailedException *new_RxExceptionsOnCompletedFailedException_initWithNSException_(NSException *throwable) {
  J2OBJC_NEW_IMPL(RxExceptionsOnCompletedFailedException, initWithNSException_, throwable)
}

RxExceptionsOnCompletedFailedException *create_RxExceptionsOnCompletedFailedException_initWithNSException_(NSException *throwable) {
  J2OBJC_CREATE_IMPL(RxExceptionsOnCompletedFailedException, initWithNSException_, throwable)
}

void RxExceptionsOnCompletedFailedException_initWithNSString_withNSException_(RxExceptionsOnCompletedFailedException *self, NSString *message, NSException *throwable) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, message, throwable != nil ? throwable : create_JavaLangNullPointerException_init());
}

RxExceptionsOnCompletedFailedException *new_RxExceptionsOnCompletedFailedException_initWithNSString_withNSException_(NSString *message, NSException *throwable) {
  J2OBJC_NEW_IMPL(RxExceptionsOnCompletedFailedException, initWithNSString_withNSException_, message, throwable)
}

RxExceptionsOnCompletedFailedException *create_RxExceptionsOnCompletedFailedException_initWithNSString_withNSException_(NSString *message, NSException *throwable) {
  J2OBJC_CREATE_IMPL(RxExceptionsOnCompletedFailedException, initWithNSString_withNSException_, message, throwable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsOnCompletedFailedException)
