//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase.h"
#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteProgram.h"
#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement.h"
#include "AndroidArchPersistenceDbSupportSQLiteQuery.h"
#include "AndroidArchPersistenceDbSupportSQLiteStatement.h"
#include "AndroidContentContentValues.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseSqliteSQLiteCursor.h"
#include "AndroidDatabaseSqliteSQLiteCursorDriver.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteQuery.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "AndroidDatabaseSqliteSQLiteTransactionListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *mDelegate_;
}

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, mDelegate_, AndroidDatabaseSqliteSQLiteDatabase *)

inline IOSObjectArray *AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_get_EMPTY_STRING_ARRAY();
static IOSObjectArray *AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, EMPTY_STRING_ARRAY, IOSObjectArray *)

@interface AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 : NSObject < AndroidDatabaseSqliteSQLiteDatabase_CursorFactory > {
 @public
  id<AndroidArchPersistenceDbSupportSQLiteQuery> val$supportQuery_;
}

- (instancetype)initWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)capture$0;

- (id<AndroidDatabaseCursor>)newCursorWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                  withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                 withNSString:(NSString *)editTable
                                         withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1)

__attribute__((unused)) static void AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *self, id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0);

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0);

J2OBJC_INITIALIZED_DEFN(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase)

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)delegate {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, delegate);
  return self;
}

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)compileStatementWithNSString:(NSString *)sql {
  return create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteStatement_([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) compileStatementWithNSString:sql]);
}

- (void)beginTransaction {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) beginTransaction];
}

- (void)beginTransactionNonExclusive {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) beginTransactionNonExclusive];
}

- (void)beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:transactionListener];
}

- (void)beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:transactionListener];
}

- (void)endTransaction {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) endTransaction];
}

- (void)setTransactionSuccessful {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setTransactionSuccessful];
}

- (jboolean)inTransaction {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) inTransaction];
}

- (jboolean)isDbLockedByCurrentThread {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isDbLockedByCurrentThread];
}

- (jboolean)yieldIfContendedSafely {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) yieldIfContendedSafely];
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) yieldIfContendedSafelyWithLong:sleepAfterYieldDelay];
}

- (jint)getVersion {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getVersion];
}

- (void)setVersionWithInt:(jint)version_ {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setVersionWithInt:version_];
}

- (jlong)getMaximumSize {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getMaximumSize];
}

- (jlong)setMaximumSizeWithLong:(jlong)numBytes {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setMaximumSizeWithLong:numBytes];
}

- (jlong)getPageSize {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getPageSize];
}

- (void)setPageSizeWithLong:(jlong)numBytes {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setPageSizeWithLong:numBytes];
}

- (id<AndroidDatabaseCursor>)queryWithBoolean:(jboolean)distinct
                                 withNSString:(NSString *)table
                            withNSStringArray:(IOSObjectArray *)columns
                                 withNSString:(NSString *)selection
                            withNSStringArray:(IOSObjectArray *)selectionArgs
                                 withNSString:(NSString *)groupBy
                                 withNSString:(NSString *)having
                                 withNSString:(NSString *)orderBy
                                 withNSString:(NSString *)limit {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) queryWithBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<AndroidDatabaseCursor>)queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                       withBoolean:(jboolean)distinct
                                                                                      withNSString:(NSString *)table
                                                                                 withNSStringArray:(IOSObjectArray *)columns
                                                                                      withNSString:(NSString *)selection
                                                                                 withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                      withNSString:(NSString *)groupBy
                                                                                      withNSString:(NSString *)having
                                                                                      withNSString:(NSString *)orderBy
                                                                                      withNSString:(NSString *)limit {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) queryWithNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy];
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy
                                  withNSString:(NSString *)limit {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) queryWithNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)selectionArgs {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) rawQueryWithNSString:sql withNSStringArray:selectionArgs];
}

- (id<AndroidDatabaseCursor>)rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                         withNSString:(NSString *)sql
                                                                                    withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                         withNSString:(NSString *)editTable {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withNSString:sql withNSStringArray:selectionArgs withNSString:editTable];
}

- (id<AndroidDatabaseCursor>)rawQueryWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)supportQuery {
  return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(supportQuery) withNSString:[((id<AndroidArchPersistenceDbSupportSQLiteQuery>) nil_chk(supportQuery)) getSql] withNSStringArray:AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY withNSString:nil];
}

- (jlong)insertWithNSString:(NSString *)table
               withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)values {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) insertWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values];
}

- (jlong)insertOrThrowWithNSString:(NSString *)table
                      withNSString:(NSString *)nullColumnHack
   withAndroidContentContentValues:(AndroidContentContentValues *)values {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) insertOrThrowWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values];
}

- (jlong)replaceWithNSString:(NSString *)table
                withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) replaceWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues];
}

- (jlong)replaceOrThrowWithNSString:(NSString *)table
                       withNSString:(NSString *)nullColumnHack
    withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) replaceOrThrowWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues];
}

- (jlong)insertWithOnConflictWithNSString:(NSString *)table
                             withNSString:(NSString *)nullColumnHack
          withAndroidContentContentValues:(AndroidContentContentValues *)initialValues
                                  withInt:(jint)conflictAlgorithm {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:conflictAlgorithm];
}

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSStringArray:(IOSObjectArray *)whereArgs {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) delete__WithNSString:table withNSString:whereClause withNSStringArray:whereArgs];
}

- (jint)updateWithNSString:(NSString *)table
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) updateWithNSString:table withAndroidContentContentValues:values withNSString:whereClause withNSStringArray:whereArgs];
}

- (jint)updateWithOnConflictWithNSString:(NSString *)table
         withAndroidContentContentValues:(AndroidContentContentValues *)values
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                                 withInt:(jint)conflictAlgorithm {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) updateWithOnConflictWithNSString:table withAndroidContentContentValues:values withNSString:whereClause withNSStringArray:whereArgs withInt:conflictAlgorithm];
}

- (void)execSQLWithNSString:(NSString *)sql {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) execSQLWithNSString:sql];
}

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) execSQLWithNSString:sql withNSObjectArray:bindArgs];
}

- (jboolean)isReadOnly {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isReadOnly];
}

- (jboolean)isOpen {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isOpen];
}

- (jboolean)needUpgradeWithInt:(jint)newVersion {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) needUpgradeWithInt:newVersion];
}

- (NSString *)getPath {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getPath];
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setLocaleWithJavaUtilLocale:locale];
}

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setMaxSqlCacheSizeWithInt:cacheSize];
}

- (void)setForeignKeyConstraintsEnabledWithBoolean:(jboolean)enable {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setForeignKeyConstraintsEnabledWithBoolean:enable];
}

- (jboolean)enableWriteAheadLogging {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) enableWriteAheadLogging];
}

- (void)disableWriteAheadLogging {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) disableWriteAheadLogging];
}

- (jboolean)isWriteAheadLoggingEnabled {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isWriteAheadLoggingEnabled];
}

- (id<JavaUtilList>)getAttachedDbs {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getAttachedDbs];
}

- (jboolean)isDatabaseIntegrityOk {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isDatabaseIntegrityOk];
}

- (void)close {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) close];
}

- (void)dealloc {
  RELEASE_(mDelegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteStatement;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 12, 16, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 12, 17, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 18, 22, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 25, 24, 26, -1, -1, -1 },
    { NULL, "J", 0x1, 27, 24, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 28, 24, 26, -1, -1, -1 },
    { NULL, "J", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 2, 26, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, 26, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 39, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 45, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 46, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[1].selector = @selector(compileStatementWithNSString:);
  methods[2].selector = @selector(beginTransaction);
  methods[3].selector = @selector(beginTransactionNonExclusive);
  methods[4].selector = @selector(beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[5].selector = @selector(beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[6].selector = @selector(endTransaction);
  methods[7].selector = @selector(setTransactionSuccessful);
  methods[8].selector = @selector(inTransaction);
  methods[9].selector = @selector(isDbLockedByCurrentThread);
  methods[10].selector = @selector(yieldIfContendedSafely);
  methods[11].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[12].selector = @selector(getVersion);
  methods[13].selector = @selector(setVersionWithInt:);
  methods[14].selector = @selector(getMaximumSize);
  methods[15].selector = @selector(setMaximumSizeWithLong:);
  methods[16].selector = @selector(getPageSize);
  methods[17].selector = @selector(setPageSizeWithLong:);
  methods[18].selector = @selector(queryWithBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[19].selector = @selector(queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[20].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:);
  methods[21].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[22].selector = @selector(rawQueryWithNSString:withNSStringArray:);
  methods[23].selector = @selector(rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withNSString:withNSStringArray:withNSString:);
  methods[24].selector = @selector(rawQueryWithAndroidArchPersistenceDbSupportSQLiteQuery:);
  methods[25].selector = @selector(insertWithNSString:withNSString:withAndroidContentContentValues:);
  methods[26].selector = @selector(insertOrThrowWithNSString:withNSString:withAndroidContentContentValues:);
  methods[27].selector = @selector(replaceWithNSString:withNSString:withAndroidContentContentValues:);
  methods[28].selector = @selector(replaceOrThrowWithNSString:withNSString:withAndroidContentContentValues:);
  methods[29].selector = @selector(insertWithOnConflictWithNSString:withNSString:withAndroidContentContentValues:withInt:);
  methods[30].selector = @selector(delete__WithNSString:withNSString:withNSStringArray:);
  methods[31].selector = @selector(updateWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:);
  methods[32].selector = @selector(updateWithOnConflictWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:withInt:);
  methods[33].selector = @selector(execSQLWithNSString:);
  methods[34].selector = @selector(execSQLWithNSString:withNSObjectArray:);
  methods[35].selector = @selector(isReadOnly);
  methods[36].selector = @selector(isOpen);
  methods[37].selector = @selector(needUpgradeWithInt:);
  methods[38].selector = @selector(getPath);
  methods[39].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[40].selector = @selector(setMaxSqlCacheSizeWithInt:);
  methods[41].selector = @selector(setForeignKeyConstraintsEnabledWithBoolean:);
  methods[42].selector = @selector(enableWriteAheadLogging);
  methods[43].selector = @selector(disableWriteAheadLogging);
  methods[44].selector = @selector(isWriteAheadLoggingEnabled);
  methods[45].selector = @selector(getAttachedDbs);
  methods[46].selector = @selector(isDatabaseIntegrityOk);
  methods[47].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "mDelegate_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;", "compileStatement", "LNSString;", "beginTransactionWithListener", "LAndroidDatabaseSqliteSQLiteTransactionListener;", "beginTransactionWithListenerNonExclusive", "yieldIfContendedSafely", "J", "setVersion", "I", "setMaximumSize", "setPageSize", "query", "ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "queryWithFactory", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "rawQuery", "LNSString;[LNSString;", "rawQueryWithFactory", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LNSString;[LNSString;LNSString;", "LAndroidArchPersistenceDbSupportSQLiteQuery;", "insert", "LNSString;LNSString;LAndroidContentContentValues;", "insertOrThrow", "LAndroidDatabaseSQLException;", "replace", "replaceOrThrow", "insertWithOnConflict", "LNSString;LNSString;LAndroidContentContentValues;I", "delete", "LNSString;LNSString;[LNSString;", "update", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;", "updateWithOnConflict", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;I", "execSQL", "LNSString;[LNSObject;", "needUpgrade", "setLocale", "LJavaUtilLocale;", "setMaxSqlCacheSize", "setForeignKeyConstraintsEnabled", "Z", "()Ljava/util/List<Landroid/util/Pair<Ljava/lang/String;Ljava/lang/String;>;>;", "LJavaIoIOException;", &AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase = { "FrameworkSQLiteDatabase", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x1, 48, 2, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase;
}

+ (void)initialize {
  if (self == [AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase class]) {
    JreStrongAssignAndConsume(&AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase)
  }
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase *self, AndroidDatabaseSqliteSQLiteDatabase *delegate) {
  NSObject_init(self);
  JreStrongAssign(&self->mDelegate_, delegate);
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *delegate) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, initWithAndroidDatabaseSqliteSQLiteDatabase_, delegate)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *delegate) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, initWithAndroidDatabaseSqliteSQLiteDatabase_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase)

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1

- (instancetype)initWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)capture$0 {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(self, capture$0);
  return self;
}

- (id<AndroidDatabaseCursor>)newCursorWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                  withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                 withNSString:(NSString *)editTable
                                         withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query {
  [((id<AndroidArchPersistenceDbSupportSQLiteQuery>) nil_chk(val$supportQuery_)) bindToWithAndroidArchPersistenceDbSupportSQLiteProgram:create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteProgram_(query)];
  return create_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(masterQuery, editTable, query);
}

- (void)dealloc {
  RELEASE_(val$supportQuery_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceDbSupportSQLiteQuery:);
  methods[1].selector = @selector(newCursorWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$supportQuery_", "LAndroidArchPersistenceDbSupportSQLiteQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newCursor", "LAndroidDatabaseSqliteSQLiteDatabase;LAndroidDatabaseSqliteSQLiteCursorDriver;LNSString;LAndroidDatabaseSqliteSQLiteQuery;", "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase;", "rawQueryWithAndroidArchPersistenceDbSupportSQLiteQuery:" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 = { "", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1;
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *self, id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  JreStrongAssign(&self->val$supportQuery_, capture$0);
  NSObject_init(self);
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1, initWithAndroidArchPersistenceDbSupportSQLiteQuery_, capture$0)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1, initWithAndroidArchPersistenceDbSupportSQLiteQuery_, capture$0)
}
