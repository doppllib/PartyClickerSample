//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeTimerPeriodically
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeTimerPeriodically

#if !defined (RxInternalOperatorsOnSubscribeTimerPeriodically_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically || defined(INCLUDE_RxInternalOperatorsOnSubscribeTimerPeriodically))
#define RxInternalOperatorsOnSubscribeTimerPeriodically_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubscriber;

@interface RxInternalOperatorsOnSubscribeTimerPeriodically : NSObject < RxObservable_OnSubscribe > {
 @public
  jlong initialDelay_;
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)initialDelay
                    withLong:(jlong)period
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler;

- (void)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeTimerPeriodically)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeTimerPeriodically, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeTimerPeriodically, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOnSubscribeTimerPeriodically *self, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeTimerPeriodically *new_RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeTimerPeriodically *create_RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeTimerPeriodically)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically")
