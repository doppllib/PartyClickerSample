//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxEmitter.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

@interface RxEmitter : NSObject

@end

__attribute__((unused)) static void RxEmitter_BackpressureMode_initWithNSString_withInt_(RxEmitter_BackpressureMode *self, NSString *__name, jint __ordinal);

@implementation RxEmitter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setSubscriptionWithRxSubscription:);
  methods[1].selector = @selector(setCancellationWithRxFunctionsCancellable:);
  methods[2].selector = @selector(requested);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setSubscription", "LRxSubscription;", "setCancellation", "LRxFunctionsCancellable;", "LRxEmitter_BackpressureMode;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observer<TT;>;" };
  static const J2ObjcClassInfo _RxEmitter = { "Emitter", "rx", ptrTable, methods, NULL, 7, 0x609, 3, 0, -1, 4, -1, 5, -1 };
  return &_RxEmitter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RxEmitter)

J2OBJC_INITIALIZED_DEFN(RxEmitter_BackpressureMode)

RxEmitter_BackpressureMode *RxEmitter_BackpressureMode_values_[5];

@implementation RxEmitter_BackpressureMode

+ (IOSObjectArray *)values {
  return RxEmitter_BackpressureMode_values();
}

+ (RxEmitter_BackpressureMode *)valueOfWithNSString:(NSString *)name {
  return RxEmitter_BackpressureMode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LRxEmitter_BackpressureMode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxEmitter_BackpressureMode;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LRxEmitter_BackpressureMode;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "ERROR", "LRxEmitter_BackpressureMode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "BUFFER", "LRxEmitter_BackpressureMode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "DROP", "LRxEmitter_BackpressureMode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "LATEST", "LRxEmitter_BackpressureMode;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(RxEmitter_BackpressureMode, NONE), &JreEnum(RxEmitter_BackpressureMode, ERROR), &JreEnum(RxEmitter_BackpressureMode, BUFFER), &JreEnum(RxEmitter_BackpressureMode, DROP), &JreEnum(RxEmitter_BackpressureMode, LATEST), "LRxEmitter;", "Ljava/lang/Enum<Lrx/Emitter$BackpressureMode;>;" };
  static const J2ObjcClassInfo _RxEmitter_BackpressureMode = { "BackpressureMode", "rx", ptrTable, methods, fields, 7, 0x4019, 2, 5, 7, -1, -1, 8, -1 };
  return &_RxEmitter_BackpressureMode;
}

+ (void)initialize {
  if (self == [RxEmitter_BackpressureMode class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"NONE", @"ERROR", @"BUFFER", @"DROP", @"LATEST",
    };
    for (jint i = 0; i < 5; i++) {
      (RxEmitter_BackpressureMode_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RxEmitter_BackpressureMode_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RxEmitter_BackpressureMode)
  }
}

@end

void RxEmitter_BackpressureMode_initWithNSString_withInt_(RxEmitter_BackpressureMode *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RxEmitter_BackpressureMode_values() {
  RxEmitter_BackpressureMode_initialize();
  return [IOSObjectArray arrayWithObjects:RxEmitter_BackpressureMode_values_ count:5 type:RxEmitter_BackpressureMode_class_()];
}

RxEmitter_BackpressureMode *RxEmitter_BackpressureMode_valueOfWithNSString_(NSString *name) {
  RxEmitter_BackpressureMode_initialize();
  for (int i = 0; i < 5; i++) {
    RxEmitter_BackpressureMode *e = RxEmitter_BackpressureMode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RxEmitter_BackpressureMode *RxEmitter_BackpressureMode_fromOrdinal(NSUInteger ordinal) {
  RxEmitter_BackpressureMode_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return RxEmitter_BackpressureMode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxEmitter_BackpressureMode)
