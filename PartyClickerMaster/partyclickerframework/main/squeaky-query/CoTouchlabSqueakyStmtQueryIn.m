//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "CoTouchlabSqueakyDaoSqueakyContext.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakySqlSqlHelper.h"
#include "CoTouchlabSqueakyStmtJoinAlias.h"
#include "CoTouchlabSqueakyStmtQueryBaseComparison.h"
#include "CoTouchlabSqueakyStmtQueryIn.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface CoTouchlabSqueakyStmtQueryIn () {
 @public
  id<JavaUtilCollection> objects_;
  jboolean in_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyStmtQueryIn, objects_, id<JavaUtilCollection>)

@implementation CoTouchlabSqueakyStmtQueryIn

- (instancetype)initWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                 withJavaUtilCollection:(id<JavaUtilCollection>)objects
                                            withBoolean:(jboolean)inArg
                     withCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias {
  CoTouchlabSqueakyStmtQueryIn_initWithCoTouchlabSqueakyFieldFieldType_withJavaUtilCollection_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, objects, inArg, joinAlias);
  return self;
}

- (instancetype)initWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                      withNSObjectArray:(IOSObjectArray *)objects
                                            withBoolean:(jboolean)inArg
                     withCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias {
  CoTouchlabSqueakyStmtQueryIn_initWithCoTouchlabSqueakyFieldFieldType_withNSObjectArray_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, objects, inArg, joinAlias);
  return self;
}

- (NSString *)getOperation {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  if (in_) {
    [sb appendWithNSString:@"IN ("];
  }
  else {
    [sb appendWithNSString:@"NOT IN ("];
  }
  for (jint i = 0; i < [((id<JavaUtilCollection>) nil_chk(objects_)) size]; i++) {
    if (i > 0) [sb appendWithChar:','];
    [sb appendWithChar:'?'];
  }
  [sb appendWithChar:')'];
  return [sb description];
}

- (void)appendValueWithCoTouchlabSqueakyDaoSqueakyContext:(CoTouchlabSqueakyDaoSqueakyContext *)squeakyContext
                                         withJavaUtilList:(id<JavaUtilList>)params {
  for (id __strong value in nil_chk(objects_)) {
    if (value == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"one of the IN values for '", [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType_)) getColumnName], @"' is null"));
    }
    CoTouchlabSqueakySqlSqlHelper_appendArgOrValueWithCoTouchlabSqueakyDaoSqueakyContext_withCoTouchlabSqueakyFieldFieldType_withJavaUtilList_withId_(squeakyContext, fieldType_, params, value);
  }
}

- (void)dealloc {
  RELEASE_(objects_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCoTouchlabSqueakyFieldFieldType:withJavaUtilCollection:withBoolean:withCoTouchlabSqueakyStmtJoinAlias:);
  methods[1].selector = @selector(initWithCoTouchlabSqueakyFieldFieldType:withNSObjectArray:withBoolean:withCoTouchlabSqueakyStmtJoinAlias:);
  methods[2].selector = @selector(getOperation);
  methods[3].selector = @selector(appendValueWithCoTouchlabSqueakyDaoSqueakyContext:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "objects_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "in_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldFieldType;LJavaUtilCollection;ZLCoTouchlabSqueakyStmtJoinAlias;", "LJavaSqlSQLException;", "(Lco/touchlab/squeaky/field/FieldType;Ljava/util/Collection<*>;ZLco/touchlab/squeaky/stmt/JoinAlias;)V", "LCoTouchlabSqueakyFieldFieldType;[LNSObject;ZLCoTouchlabSqueakyStmtJoinAlias;", "appendValue", "LCoTouchlabSqueakyDaoSqueakyContext;LJavaUtilList;", "(Lco/touchlab/squeaky/dao/SqueakyContext;Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/Collection<*>;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyStmtQueryIn = { "In", "co.touchlab.squeaky.stmt.query", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyStmtQueryIn;
}

@end

void CoTouchlabSqueakyStmtQueryIn_initWithCoTouchlabSqueakyFieldFieldType_withJavaUtilCollection_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyStmtQueryIn *self, CoTouchlabSqueakyFieldFieldType *fieldType, id<JavaUtilCollection> objects, jboolean inArg, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  CoTouchlabSqueakyStmtQueryBaseComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, nil, true, joinAlias);
  JreStrongAssign(&self->objects_, objects);
  self->in_ = inArg;
}

CoTouchlabSqueakyStmtQueryIn *new_CoTouchlabSqueakyStmtQueryIn_initWithCoTouchlabSqueakyFieldFieldType_withJavaUtilCollection_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, id<JavaUtilCollection> objects, jboolean inArg, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyStmtQueryIn, initWithCoTouchlabSqueakyFieldFieldType_withJavaUtilCollection_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, objects, inArg, joinAlias)
}

CoTouchlabSqueakyStmtQueryIn *create_CoTouchlabSqueakyStmtQueryIn_initWithCoTouchlabSqueakyFieldFieldType_withJavaUtilCollection_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, id<JavaUtilCollection> objects, jboolean inArg, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyStmtQueryIn, initWithCoTouchlabSqueakyFieldFieldType_withJavaUtilCollection_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, objects, inArg, joinAlias)
}

void CoTouchlabSqueakyStmtQueryIn_initWithCoTouchlabSqueakyFieldFieldType_withNSObjectArray_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyStmtQueryIn *self, CoTouchlabSqueakyFieldFieldType *fieldType, IOSObjectArray *objects, jboolean inArg, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  CoTouchlabSqueakyStmtQueryBaseComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, nil, true, joinAlias);
  JreStrongAssign(&self->objects_, JavaUtilArrays_asListWithNSObjectArray_(objects));
  self->in_ = inArg;
}

CoTouchlabSqueakyStmtQueryIn *new_CoTouchlabSqueakyStmtQueryIn_initWithCoTouchlabSqueakyFieldFieldType_withNSObjectArray_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, IOSObjectArray *objects, jboolean inArg, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyStmtQueryIn, initWithCoTouchlabSqueakyFieldFieldType_withNSObjectArray_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, objects, inArg, joinAlias)
}

CoTouchlabSqueakyStmtQueryIn *create_CoTouchlabSqueakyStmtQueryIn_initWithCoTouchlabSqueakyFieldFieldType_withNSObjectArray_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, IOSObjectArray *objects, jboolean inArg, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyStmtQueryIn, initWithCoTouchlabSqueakyFieldFieldType_withNSObjectArray_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, objects, inArg, joinAlias)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyStmtQueryIn)
