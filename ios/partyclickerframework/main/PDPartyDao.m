//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "PDPartyDao.h"

@interface PDPartyDao : NSObject

@end

@implementation PDPartyDao

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 9, 7, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createPartyWithPDParty:);
  methods[1].selector = @selector(deletePartyWithPDParty:);
  methods[2].selector = @selector(createPersonWithPDPerson:);
  methods[3].selector = @selector(allParties);
  methods[4].selector = @selector(allPeopleForPartyWithInt:);
  methods[5].selector = @selector(partyForIdWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createParty", "LPDParty;", "deleteParty", "createPerson", "LPDPerson;", "()Ljava/util/List<Lcom/kgalligan/partyclicker/data/Party;>;", "allPeopleForParty", "I", "(I)Ljava/util/List<Lcom/kgalligan/partyclicker/data/Person;>;", "partyForId", "(I)Ljava/util/List<Lcom/kgalligan/partyclicker/data/Party;>;" };
  static const J2ObjcClassInfo _PDPartyDao = { "PartyDao", "com.kgalligan.partyclicker.data", ptrTable, methods, NULL, 7, 0x609, 6, 0, -1, -1, -1, -1, -1 };
  return &_PDPartyDao;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(PDPartyDao)
