//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContentValues.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseDatabaseUtils.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "CoTouchlabSqueakyDaoQuery.h"
#include "CoTouchlabSqueakyDbSQLiteStatement.h"
#include "CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl.h"
#include "CoTouchlabSqueakyDbSqliteSQLiteStatementImpl.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"

@interface CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *db_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl, db_, AndroidDatabaseSqliteSQLiteDatabase *)

@implementation CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
  CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, db);
  return self;
}

- (id<CoTouchlabSqueakyDbSQLiteStatement>)compileStatementWithNSString:(NSString *)sql {
  return create_CoTouchlabSqueakyDbSqliteSQLiteStatementImpl_initWithAndroidDatabaseSqliteSQLiteStatement_([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) compileStatementWithNSString:sql]);
}

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)args {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) rawQueryWithNSString:sql withNSStringArray:args];
}

- (jint)updateWithNSString:(NSString *)tableName
withAndroidContentContentValues:(AndroidContentContentValues *)vals
              withNSString:(NSString *)where
         withNSStringArray:(IOSObjectArray *)args {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) updateWithNSString:tableName withAndroidContentContentValues:vals withNSString:where withNSStringArray:args];
}

- (jint)delete__WithNSString:(NSString *)tableName
                withNSString:(NSString *)where
           withNSStringArray:(IOSObjectArray *)args {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) delete__WithNSString:tableName withNSString:where withNSStringArray:args];
}

- (jlong)countOfWithNSString:(NSString *)tableName {
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(db_, tableName);
}

- (jlong)countOfWithCoTouchlabSqueakyDaoQuery:(id<CoTouchlabSqueakyDaoQuery>)where {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db_, JreStrcat("$$$$", @"select count(*) from ", [((id<CoTouchlabSqueakyDaoQuery>) nil_chk(where)) getFromStatementWithBoolean:true], @" where ", [where getWhereStatementWithBoolean:true]), [where getParameters]);
}

- (jlong)longForQueryWithNSString:(NSString *)query
                withNSStringArray:(IOSObjectArray *)arguments {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db_, query, arguments);
}

- (void)execSQLWithNSString:(NSString *)sql {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) execSQLWithNSString:sql];
}

- (void)beginTransaction {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) beginTransaction];
}

- (void)setTransactionSuccessful {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) setTransactionSuccessful];
}

- (void)endTransaction {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) endTransaction];
}

- (void)dealloc {
  RELEASE_(db_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabSqueakyDbSQLiteStatement;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "J", 0x81, 13, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[1].selector = @selector(compileStatementWithNSString:);
  methods[2].selector = @selector(rawQueryWithNSString:withNSStringArray:);
  methods[3].selector = @selector(updateWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:);
  methods[4].selector = @selector(delete__WithNSString:withNSString:withNSStringArray:);
  methods[5].selector = @selector(countOfWithNSString:);
  methods[6].selector = @selector(countOfWithCoTouchlabSqueakyDaoQuery:);
  methods[7].selector = @selector(longForQueryWithNSString:withNSStringArray:);
  methods[8].selector = @selector(execSQLWithNSString:);
  methods[9].selector = @selector(beginTransaction);
  methods[10].selector = @selector(setTransactionSuccessful);
  methods[11].selector = @selector(endTransaction);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "db_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;", "compileStatement", "LNSString;", "LAndroidDatabaseSqliteSQLiteException;", "rawQuery", "LNSString;[LNSString;", "update", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;", "delete", "LNSString;LNSString;[LNSString;", "countOf", "LCoTouchlabSqueakyDaoQuery;", "LJavaSqlSQLException;", "longForQuery", "execSQL" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl = { "SQLiteDatabaseImpl", "co.touchlab.squeaky.db.sqlite", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl;
}

@end

void CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl_initWithAndroidDatabaseSqliteSQLiteDatabase_(CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl *self, AndroidDatabaseSqliteSQLiteDatabase *db) {
  NSObject_init(self);
  JreStrongAssign(&self->db_, db);
}

CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl *new_CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *db) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl, initWithAndroidDatabaseSqliteSQLiteDatabase_, db)
}

CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl *create_CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *db) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl, initWithAndroidDatabaseSqliteSQLiteDatabase_, db)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl)
