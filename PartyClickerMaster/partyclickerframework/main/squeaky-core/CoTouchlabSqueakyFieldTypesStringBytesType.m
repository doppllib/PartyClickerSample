//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/types/StringBytesType.java
//

#include "AndroidDatabaseCursor.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseDataType.h"
#include "CoTouchlabSqueakyFieldTypesStringBytesType.h"
#include "CoTouchlabSqueakyMiscSqlExceptionUtil.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/sql/SQLException.h"

@interface CoTouchlabSqueakyFieldTypesStringBytesType ()

- (instancetype)init;

- (NSString *)getCharsetNameWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType;

@end

inline NSString *CoTouchlabSqueakyFieldTypesStringBytesType_get_DEFAULT_STRING_BYTES_CHARSET_NAME();
static NSString *CoTouchlabSqueakyFieldTypesStringBytesType_DEFAULT_STRING_BYTES_CHARSET_NAME = @"Unicode";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesStringBytesType, DEFAULT_STRING_BYTES_CHARSET_NAME, NSString *)

inline CoTouchlabSqueakyFieldTypesStringBytesType *CoTouchlabSqueakyFieldTypesStringBytesType_get_singleTon();
static CoTouchlabSqueakyFieldTypesStringBytesType *CoTouchlabSqueakyFieldTypesStringBytesType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesStringBytesType, singleTon, CoTouchlabSqueakyFieldTypesStringBytesType *)

__attribute__((unused)) static void CoTouchlabSqueakyFieldTypesStringBytesType_init(CoTouchlabSqueakyFieldTypesStringBytesType *self);

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesStringBytesType *new_CoTouchlabSqueakyFieldTypesStringBytesType_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesStringBytesType *create_CoTouchlabSqueakyFieldTypesStringBytesType_init();

__attribute__((unused)) static NSString *CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(CoTouchlabSqueakyFieldTypesStringBytesType *self, CoTouchlabSqueakyFieldFieldType *fieldType);

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesStringBytesType)

@implementation CoTouchlabSqueakyFieldTypesStringBytesType

+ (CoTouchlabSqueakyFieldTypesStringBytesType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesStringBytesType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesStringBytesType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  @throw create_JavaSqlSQLException_initWithNSString_(@"String-bytes type cannot have default values");
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return [((id<AndroidDatabaseCursor>) nil_chk(results)) getBlobWithInt:columnPos];
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  IOSByteArray *bytes = (IOSByteArray *) cast_chk(sqlArg, [IOSByteArray class]);
  NSString *charsetName = CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(self, fieldType);
  @try {
    return [NSString java_stringWithBytes:bytes charsetName:charsetName];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$$", @"Could not convert string with charset name: ", charsetName), e);
  }
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)javaObject {
  NSString *string = (NSString *) cast_chk(javaObject, [NSString class]);
  NSString *charsetName = CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(self, fieldType);
  @try {
    return [((NSString *) nil_chk(string)) java_getBytesWithCharsetName:charsetName];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$$", @"Could not convert string with charset name: ", charsetName), e);
  }
}

- (NSString *)getCharsetNameWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  return CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(self, fieldType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCoTouchlabSqueakyFieldTypesStringBytesType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getSingleton);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:);
  methods[3].selector = @selector(parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:);
  methods[4].selector = @selector(resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  methods[5].selector = @selector(sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:);
  methods[6].selector = @selector(javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:);
  methods[7].selector = @selector(getCharsetNameWithCoTouchlabSqueakyFieldFieldType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_STRING_BYTES_CHARSET_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "singleTon", "LCoTouchlabSqueakyFieldTypesStringBytesType;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldSqlType;[LIOSClass;", "(Lco/touchlab/squeaky/field/SqlType;[Ljava/lang/Class<*>;)V", "parseDefaultString", "LCoTouchlabSqueakyFieldFieldType;LNSString;", "LJavaSqlSQLException;", "resultToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LAndroidDatabaseCursor;I", "sqlArgToJava", "LCoTouchlabSqueakyFieldFieldType;LNSObject;I", "javaToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LNSObject;", "getCharsetName", "LCoTouchlabSqueakyFieldFieldType;", &CoTouchlabSqueakyFieldTypesStringBytesType_DEFAULT_STRING_BYTES_CHARSET_NAME, &CoTouchlabSqueakyFieldTypesStringBytesType_singleTon };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesStringBytesType = { "StringBytesType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesStringBytesType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesStringBytesType class]) {
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesStringBytesType_singleTon, new_CoTouchlabSqueakyFieldTypesStringBytesType_init());
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesStringBytesType)
  }
}

@end

CoTouchlabSqueakyFieldTypesStringBytesType *CoTouchlabSqueakyFieldTypesStringBytesType_getSingleton() {
  CoTouchlabSqueakyFieldTypesStringBytesType_initialize();
  return CoTouchlabSqueakyFieldTypesStringBytesType_singleTon;
}

void CoTouchlabSqueakyFieldTypesStringBytesType_init(CoTouchlabSqueakyFieldTypesStringBytesType *self) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, BYTE_ARRAY));
}

CoTouchlabSqueakyFieldTypesStringBytesType *new_CoTouchlabSqueakyFieldTypesStringBytesType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesStringBytesType, init)
}

CoTouchlabSqueakyFieldTypesStringBytesType *create_CoTouchlabSqueakyFieldTypesStringBytesType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesStringBytesType, init)
}

void CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesStringBytesType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
}

CoTouchlabSqueakyFieldTypesStringBytesType *new_CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesStringBytesType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

CoTouchlabSqueakyFieldTypesStringBytesType *create_CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesStringBytesType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

NSString *CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(CoTouchlabSqueakyFieldTypesStringBytesType *self, CoTouchlabSqueakyFieldFieldType *fieldType) {
  if (fieldType == nil || [fieldType getFormat] == nil) {
    return CoTouchlabSqueakyFieldTypesStringBytesType_DEFAULT_STRING_BYTES_CHARSET_NAME;
  }
  else {
    return [fieldType getFormat];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesStringBytesType)
