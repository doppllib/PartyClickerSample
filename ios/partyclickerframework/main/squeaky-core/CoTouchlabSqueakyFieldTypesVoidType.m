//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCursor.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldTypesBaseDataType.h"
#include "CoTouchlabSqueakyFieldTypesVoidType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"

@implementation CoTouchlabSqueakyFieldTypesVoidType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesVoidType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  return nil;
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:);
  methods[2].selector = @selector(resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parseDefaultString", "LCoTouchlabSqueakyFieldFieldType;LNSString;", "resultToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LAndroidDatabaseCursor;I" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesVoidType = { "VoidType", "co.touchlab.squeaky.field.types", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesVoidType;
}

@end

void CoTouchlabSqueakyFieldTypesVoidType_init(CoTouchlabSqueakyFieldTypesVoidType *self) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, nil, [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]);
}

CoTouchlabSqueakyFieldTypesVoidType *new_CoTouchlabSqueakyFieldTypesVoidType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesVoidType, init)
}

CoTouchlabSqueakyFieldTypesVoidType *create_CoTouchlabSqueakyFieldTypesVoidType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesVoidType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesVoidType)
