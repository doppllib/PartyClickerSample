//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCursor.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseDateType.h"
#include "CoTouchlabSqueakyFieldTypesDateStringType.h"
#include "CoTouchlabSqueakyMiscSqlExceptionUtil.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/sql/SQLException.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/util/Date.h"

@interface CoTouchlabSqueakyFieldTypesDateStringType ()

- (instancetype)init;

@end

inline CoTouchlabSqueakyFieldTypesDateStringType *CoTouchlabSqueakyFieldTypesDateStringType_get_singleTon();
static CoTouchlabSqueakyFieldTypesDateStringType *CoTouchlabSqueakyFieldTypesDateStringType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesDateStringType, singleTon, CoTouchlabSqueakyFieldTypesDateStringType *)

__attribute__((unused)) static void CoTouchlabSqueakyFieldTypesDateStringType_init(CoTouchlabSqueakyFieldTypesDateStringType *self);

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesDateStringType *new_CoTouchlabSqueakyFieldTypesDateStringType_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesDateStringType *create_CoTouchlabSqueakyFieldTypesDateStringType_init();

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesDateStringType)

jint CoTouchlabSqueakyFieldTypesDateStringType_DEFAULT_WIDTH = 50;

@implementation CoTouchlabSqueakyFieldTypesDateStringType

+ (CoTouchlabSqueakyFieldTypesDateStringType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesDateStringType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesDateStringType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesDateStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType {
  CoTouchlabSqueakyFieldTypesDateStringType_initWithCoTouchlabSqueakyFieldSqlType_(self, sqlType);
  return self;
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  CoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig *formatConfig = CoTouchlabSqueakyFieldTypesBaseDateType_convertDateStringConfigWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig_(fieldType, JreLoadStatic(CoTouchlabSqueakyFieldTypesBaseDateType, defaultDateFormatConfig));
  @try {
    return CoTouchlabSqueakyFieldTypesBaseDateType_normalizeDateStringWithCoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig_withNSString_(formatConfig, defaultStr);
  }
  @catch (JavaTextParseException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$@$$$@C", @"Problems with field ", fieldType, @" parsing default date-string '", defaultStr, @"' using '", formatConfig, '\''), e);
  }
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return [((id<AndroidDatabaseCursor>) nil_chk(results)) getStringWithInt:columnPos];
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  NSString *value = (NSString *) cast_chk(sqlArg, [NSString class]);
  CoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig *formatConfig = CoTouchlabSqueakyFieldTypesBaseDateType_convertDateStringConfigWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig_(fieldType, JreLoadStatic(CoTouchlabSqueakyFieldTypesBaseDateType, defaultDateFormatConfig));
  @try {
    return CoTouchlabSqueakyFieldTypesBaseDateType_parseDateStringWithCoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig_withNSString_(formatConfig, value);
  }
  @catch (JavaTextParseException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$I$$$@C", @"Problems with column ", columnPos, @" parsing date-string '", value, @"' using '", formatConfig, '\''), e);
  }
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj {
  JavaTextDateFormat *dateFormat = [((CoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig *) nil_chk(CoTouchlabSqueakyFieldTypesBaseDateType_convertDateStringConfigWithCoTouchlabSqueakyFieldFieldType_withCoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig_(fieldType, JreLoadStatic(CoTouchlabSqueakyFieldTypesBaseDateType, defaultDateFormatConfig)))) getDateFormat];
  return [((JavaTextDateFormat *) nil_chk(dateFormat)) formatWithJavaUtilDate:(JavaUtilDate *) cast_chk(obj, [JavaUtilDate class])];
}

- (id)makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  NSString *format = [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getFormat];
  if (format == nil) {
    return JreLoadStatic(CoTouchlabSqueakyFieldTypesBaseDateType, defaultDateFormatConfig);
  }
  else {
    return create_CoTouchlabSqueakyFieldTypesBaseDateType_DateStringFormatConfig_initWithNSString_(format);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCoTouchlabSqueakyFieldTypesDateStringType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getSingleton);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:);
  methods[3].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:);
  methods[4].selector = @selector(parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:);
  methods[5].selector = @selector(resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  methods[6].selector = @selector(sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:);
  methods[7].selector = @selector(javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:);
  methods[8].selector = @selector(makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_WIDTH", "I", .constantValue.asLong = 0, 0x9, -1, 14, -1, -1 },
    { "singleTon", "LCoTouchlabSqueakyFieldTypesDateStringType;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldSqlType;[LIOSClass;", "(Lco/touchlab/squeaky/field/SqlType;[Ljava/lang/Class<*>;)V", "LCoTouchlabSqueakyFieldSqlType;", "parseDefaultString", "LCoTouchlabSqueakyFieldFieldType;LNSString;", "LJavaSqlSQLException;", "resultToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LAndroidDatabaseCursor;I", "sqlArgToJava", "LCoTouchlabSqueakyFieldFieldType;LNSObject;I", "javaToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LNSObject;", "makeConfigObject", "LCoTouchlabSqueakyFieldFieldType;", &CoTouchlabSqueakyFieldTypesDateStringType_DEFAULT_WIDTH, &CoTouchlabSqueakyFieldTypesDateStringType_singleTon };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesDateStringType = { "DateStringType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesDateStringType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesDateStringType class]) {
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesDateStringType_singleTon, new_CoTouchlabSqueakyFieldTypesDateStringType_init());
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesDateStringType)
  }
}

@end

CoTouchlabSqueakyFieldTypesDateStringType *CoTouchlabSqueakyFieldTypesDateStringType_getSingleton() {
  CoTouchlabSqueakyFieldTypesDateStringType_initialize();
  return CoTouchlabSqueakyFieldTypesDateStringType_singleTon;
}

void CoTouchlabSqueakyFieldTypesDateStringType_init(CoTouchlabSqueakyFieldTypesDateStringType *self) {
  CoTouchlabSqueakyFieldTypesBaseDateType_initWithCoTouchlabSqueakyFieldSqlType_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, STRING));
}

CoTouchlabSqueakyFieldTypesDateStringType *new_CoTouchlabSqueakyFieldTypesDateStringType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesDateStringType, init)
}

CoTouchlabSqueakyFieldTypesDateStringType *create_CoTouchlabSqueakyFieldTypesDateStringType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesDateStringType, init)
}

void CoTouchlabSqueakyFieldTypesDateStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesDateStringType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesBaseDateType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
}

CoTouchlabSqueakyFieldTypesDateStringType *new_CoTouchlabSqueakyFieldTypesDateStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesDateStringType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

CoTouchlabSqueakyFieldTypesDateStringType *create_CoTouchlabSqueakyFieldTypesDateStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesDateStringType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

void CoTouchlabSqueakyFieldTypesDateStringType_initWithCoTouchlabSqueakyFieldSqlType_(CoTouchlabSqueakyFieldTypesDateStringType *self, CoTouchlabSqueakyFieldSqlType *sqlType) {
  CoTouchlabSqueakyFieldTypesBaseDateType_initWithCoTouchlabSqueakyFieldSqlType_(self, sqlType);
}

CoTouchlabSqueakyFieldTypesDateStringType *new_CoTouchlabSqueakyFieldTypesDateStringType_initWithCoTouchlabSqueakyFieldSqlType_(CoTouchlabSqueakyFieldSqlType *sqlType) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesDateStringType, initWithCoTouchlabSqueakyFieldSqlType_, sqlType)
}

CoTouchlabSqueakyFieldTypesDateStringType *create_CoTouchlabSqueakyFieldTypesDateStringType_initWithCoTouchlabSqueakyFieldSqlType_(CoTouchlabSqueakyFieldSqlType *sqlType) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesDateStringType, initWithCoTouchlabSqueakyFieldSqlType_, sqlType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesDateStringType)
