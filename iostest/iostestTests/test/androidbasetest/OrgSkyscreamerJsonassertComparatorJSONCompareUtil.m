//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertComparatorJSONCompareUtil.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

@interface OrgSkyscreamerJsonassertComparatorJSONCompareUtil ()

- (instancetype)init;

@end

inline JavaLangInteger *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_get_INTEGER_ONE();
inline JavaLangInteger *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_set_INTEGER_ONE(JavaLangInteger *value);
static JavaLangInteger *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_INTEGER_ONE;
J2OBJC_STATIC_FIELD_OBJ(OrgSkyscreamerJsonassertComparatorJSONCompareUtil, INTEGER_ONE, JavaLangInteger *)

__attribute__((unused)) static void OrgSkyscreamerJsonassertComparatorJSONCompareUtil_init(OrgSkyscreamerJsonassertComparatorJSONCompareUtil *self);

__attribute__((unused)) static OrgSkyscreamerJsonassertComparatorJSONCompareUtil *new_OrgSkyscreamerJsonassertComparatorJSONCompareUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSkyscreamerJsonassertComparatorJSONCompareUtil *create_OrgSkyscreamerJsonassertComparatorJSONCompareUtil_init();

J2OBJC_INITIALIZED_DEFN(OrgSkyscreamerJsonassertComparatorJSONCompareUtil)

@implementation OrgSkyscreamerJsonassertComparatorJSONCompareUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilMap>)arrayOfJsonObjectToMapWithOrgJsonJSONArray:(OrgJsonJSONArray *)array
                                                 withNSString:(NSString *)uniqueKey {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_arrayOfJsonObjectToMapWithOrgJsonJSONArray_withNSString_(array, uniqueKey);
}

+ (NSString *)findUniqueKeyWithOrgJsonJSONArray:(OrgJsonJSONArray *)expected {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_findUniqueKeyWithOrgJsonJSONArray_(expected);
}

+ (jboolean)isUsableAsUniqueKeyWithNSString:(NSString *)candidate
                       withOrgJsonJSONArray:(OrgJsonJSONArray *)array {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isUsableAsUniqueKeyWithNSString_withOrgJsonJSONArray_(candidate, array);
}

+ (id<JavaUtilList>)jsonArrayToListWithOrgJsonJSONArray:(OrgJsonJSONArray *)expected {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_jsonArrayToListWithOrgJsonJSONArray_(expected);
}

+ (jboolean)allSimpleValuesWithOrgJsonJSONArray:(OrgJsonJSONArray *)array {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allSimpleValuesWithOrgJsonJSONArray_(array);
}

+ (jboolean)isSimpleValueWithId:(id)o {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isSimpleValueWithId_(o);
}

+ (jboolean)allJSONObjectsWithOrgJsonJSONArray:(OrgJsonJSONArray *)array {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allJSONObjectsWithOrgJsonJSONArray_(array);
}

+ (jboolean)allJSONArraysWithOrgJsonJSONArray:(OrgJsonJSONArray *)array {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allJSONArraysWithOrgJsonJSONArray_(array);
}

+ (id<JavaUtilSet>)getKeysWithOrgJsonJSONObject:(OrgJsonJSONObject *)jsonObject {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getKeysWithOrgJsonJSONObject_(jsonObject);
}

+ (NSString *)qualifyWithNSString:(NSString *)prefix
                     withNSString:(NSString *)key {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_qualifyWithNSString_withNSString_(prefix, key);
}

+ (NSString *)formatUniqueKeyWithNSString:(NSString *)key
                             withNSString:(NSString *)uniqueKey
                                   withId:(id)value {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_formatUniqueKeyWithNSString_withNSString_withId_(key, uniqueKey, value);
}

+ (id<JavaUtilMap>)getCardinalityMapWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getCardinalityMapWithJavaUtilCollection_(coll);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 0, 1, 2, 3, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 5, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 7, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 8, 5, 2, 9, -1, -1 },
    { NULL, "Z", 0x9, 10, 5, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 13, 5, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 5, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 15, 16, -1, 17, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 22, 23, -1, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(arrayOfJsonObjectToMapWithOrgJsonJSONArray:withNSString:);
  methods[2].selector = @selector(findUniqueKeyWithOrgJsonJSONArray:);
  methods[3].selector = @selector(isUsableAsUniqueKeyWithNSString:withOrgJsonJSONArray:);
  methods[4].selector = @selector(jsonArrayToListWithOrgJsonJSONArray:);
  methods[5].selector = @selector(allSimpleValuesWithOrgJsonJSONArray:);
  methods[6].selector = @selector(isSimpleValueWithId:);
  methods[7].selector = @selector(allJSONObjectsWithOrgJsonJSONArray:);
  methods[8].selector = @selector(allJSONArraysWithOrgJsonJSONArray:);
  methods[9].selector = @selector(getKeysWithOrgJsonJSONObject:);
  methods[10].selector = @selector(qualifyWithNSString:withNSString:);
  methods[11].selector = @selector(formatUniqueKeyWithNSString:withNSString:withId:);
  methods[12].selector = @selector(getCardinalityMapWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INTEGER_ONE", "LJavaLangInteger;", .constantValue.asLong = 0, 0xa, -1, 25, -1, -1 },
  };
  static const void *ptrTable[] = { "arrayOfJsonObjectToMap", "LOrgJsonJSONArray;LNSString;", "LOrgJsonJSONException;", "(Lorg/json/JSONArray;Ljava/lang/String;)Ljava/util/Map<Ljava/lang/Object;Lorg/json/JSONObject;>;", "findUniqueKey", "LOrgJsonJSONArray;", "isUsableAsUniqueKey", "LNSString;LOrgJsonJSONArray;", "jsonArrayToList", "(Lorg/json/JSONArray;)Ljava/util/List<Ljava/lang/Object;>;", "allSimpleValues", "isSimpleValue", "LNSObject;", "allJSONObjects", "allJSONArrays", "getKeys", "LOrgJsonJSONObject;", "(Lorg/json/JSONObject;)Ljava/util/Set<Ljava/lang/String;>;", "qualify", "LNSString;LNSString;", "formatUniqueKey", "LNSString;LNSString;LNSObject;", "getCardinalityMap", "LJavaUtilCollection;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;)Ljava/util/Map<TT;Ljava/lang/Integer;>;", &OrgSkyscreamerJsonassertComparatorJSONCompareUtil_INTEGER_ONE };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertComparatorJSONCompareUtil = { "JSONCompareUtil", "org.skyscreamer.jsonassert.comparator", ptrTable, methods, fields, 7, 0x11, 13, 1, -1, -1, -1, -1, -1 };
  return &_OrgSkyscreamerJsonassertComparatorJSONCompareUtil;
}

+ (void)initialize {
  if (self == [OrgSkyscreamerJsonassertComparatorJSONCompareUtil class]) {
    JreStrongAssignAndConsume(&OrgSkyscreamerJsonassertComparatorJSONCompareUtil_INTEGER_ONE, new_JavaLangInteger_initWithInt_(1));
    J2OBJC_SET_INITIALIZED(OrgSkyscreamerJsonassertComparatorJSONCompareUtil)
  }
}

@end

void OrgSkyscreamerJsonassertComparatorJSONCompareUtil_init(OrgSkyscreamerJsonassertComparatorJSONCompareUtil *self) {
  NSObject_init(self);
}

OrgSkyscreamerJsonassertComparatorJSONCompareUtil *new_OrgSkyscreamerJsonassertComparatorJSONCompareUtil_init() {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertComparatorJSONCompareUtil, init)
}

OrgSkyscreamerJsonassertComparatorJSONCompareUtil *create_OrgSkyscreamerJsonassertComparatorJSONCompareUtil_init() {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertComparatorJSONCompareUtil, init)
}

id<JavaUtilMap> OrgSkyscreamerJsonassertComparatorJSONCompareUtil_arrayOfJsonObjectToMapWithOrgJsonJSONArray_withNSString_(OrgJsonJSONArray *array, NSString *uniqueKey) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  id<JavaUtilMap> valueMap = create_JavaUtilHashMap_init();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(array)) length]; ++i) {
    OrgJsonJSONObject *jsonObject = (OrgJsonJSONObject *) cast_chk([array getWithInt:i], [OrgJsonJSONObject class]);
    id id_ = [((OrgJsonJSONObject *) nil_chk(jsonObject)) getWithNSString:uniqueKey];
    [valueMap putWithId:id_ withId:jsonObject];
  }
  return valueMap;
}

NSString *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_findUniqueKeyWithOrgJsonJSONArray_(OrgJsonJSONArray *expected) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  OrgJsonJSONObject *o = (OrgJsonJSONObject *) cast_chk([((OrgJsonJSONArray *) nil_chk(expected)) getWithInt:0], [OrgJsonJSONObject class]);
  for (NSString * __strong candidate in nil_chk(OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getKeysWithOrgJsonJSONObject_(o))) {
    if (OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isUsableAsUniqueKeyWithNSString_withOrgJsonJSONArray_(candidate, expected)) return candidate;
  }
  return nil;
}

jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isUsableAsUniqueKeyWithNSString_withOrgJsonJSONArray_(NSString *candidate, OrgJsonJSONArray *array) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  id<JavaUtilSet> seenValues = create_JavaUtilHashSet_init();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(array)) length]; i++) {
    id item = [array getWithInt:i];
    if ([item isKindOfClass:[OrgJsonJSONObject class]]) {
      OrgJsonJSONObject *o = (OrgJsonJSONObject *) cast_chk(item, [OrgJsonJSONObject class]);
      if ([((OrgJsonJSONObject *) nil_chk(o)) hasWithNSString:candidate]) {
        id value = [o getWithNSString:candidate];
        if (OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isSimpleValueWithId_(value) && ![seenValues containsWithId:value]) {
          [seenValues addWithId:value];
        }
        else {
          return false;
        }
      }
      else {
        return false;
      }
    }
    else {
      return false;
    }
  }
  return true;
}

id<JavaUtilList> OrgSkyscreamerJsonassertComparatorJSONCompareUtil_jsonArrayToListWithOrgJsonJSONArray_(OrgJsonJSONArray *expected) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  id<JavaUtilList> jsonObjects = create_JavaUtilArrayList_initWithInt_([((OrgJsonJSONArray *) nil_chk(expected)) length]);
  for (jint i = 0; i < [expected length]; ++i) {
    [jsonObjects addWithId:[expected getWithInt:i]];
  }
  return jsonObjects;
}

jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allSimpleValuesWithOrgJsonJSONArray_(OrgJsonJSONArray *array) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(array)) length]; ++i) {
    if (!OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isSimpleValueWithId_([array getWithInt:i])) {
      return false;
    }
  }
  return true;
}

jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isSimpleValueWithId_(id o) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  return !([o isKindOfClass:[OrgJsonJSONObject class]]) && !([o isKindOfClass:[OrgJsonJSONArray class]]);
}

jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allJSONObjectsWithOrgJsonJSONArray_(OrgJsonJSONArray *array) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(array)) length]; ++i) {
    if (!([[array getWithInt:i] isKindOfClass:[OrgJsonJSONObject class]])) {
      return false;
    }
  }
  return true;
}

jboolean OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allJSONArraysWithOrgJsonJSONArray_(OrgJsonJSONArray *array) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(array)) length]; ++i) {
    if (!([[array getWithInt:i] isKindOfClass:[OrgJsonJSONArray class]])) {
      return false;
    }
  }
  return true;
}

id<JavaUtilSet> OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getKeysWithOrgJsonJSONObject_(OrgJsonJSONObject *jsonObject) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  id<JavaUtilSet> keys = create_JavaUtilTreeSet_init();
  id<JavaUtilIterator> iter = [((OrgJsonJSONObject *) nil_chk(jsonObject)) keys];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    [keys addWithId:(NSString *) cast_chk([iter next], [NSString class])];
  }
  return keys;
}

NSString *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_qualifyWithNSString_withNSString_(NSString *prefix, NSString *key) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  return [@"" isEqual:prefix] ? key : JreStrcat("$C$", prefix, '.', key);
}

NSString *OrgSkyscreamerJsonassertComparatorJSONCompareUtil_formatUniqueKeyWithNSString_withNSString_withId_(NSString *key, NSString *uniqueKey, id value) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  return JreStrcat("$C$C@C", key, '[', uniqueKey, '=', value, ']');
}

id<JavaUtilMap> OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getCardinalityMapWithJavaUtilCollection_(id<JavaUtilCollection> coll) {
  OrgSkyscreamerJsonassertComparatorJSONCompareUtil_initialize();
  id<JavaUtilMap> count = create_JavaUtilHashMap_init();
  for (id __strong item in nil_chk(coll)) {
    JavaLangInteger *c = (JavaLangInteger *) cast_chk(([count getWithId:item]), [JavaLangInteger class]);
    if (c == nil) {
      [count putWithId:item withId:OrgSkyscreamerJsonassertComparatorJSONCompareUtil_INTEGER_ONE];
    }
    else {
      [count putWithId:item withId:create_JavaLangInteger_initWithInt_([c intValue] + 1)];
    }
  }
  return count;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertComparatorJSONCompareUtil)
