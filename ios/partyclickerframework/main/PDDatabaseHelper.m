//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "PDDatabaseHelper.h"
#include "PDParty.h"
#include "PDPartyDao.h"
#include "PDPartyDatabase.h"
#include "PDPerson.h"
#include "java/util/Date.h"
#include "java/util/List.h"

@interface PDDatabaseHelper () {
 @public
  PDPartyDatabase *partyDatabase_;
}

@end

J2OBJC_FIELD_SETTER(PDDatabaseHelper, partyDatabase_, PDPartyDatabase *)

@implementation PDDatabaseHelper

- (instancetype)initWithPDPartyDatabase:(PDPartyDatabase *)partyDatabase {
  PDDatabaseHelper_initWithPDPartyDatabase_(self, partyDatabase);
  return self;
}

- (jint)countCurrentPartyWithInt:(jint)partyId {
  id<JavaUtilList> people = [((id<PDPartyDao>) nil_chk([((PDPartyDatabase *) nil_chk(partyDatabase_)) partyDao])) allPeopleForPartyWithInt:partyId];
  jint count = 0;
  for (PDPerson * __strong person in nil_chk(people)) {
    count += [((PDPerson *) nil_chk(person)) getVal];
  }
  return count;
}

- (id<JavaUtilList>)allPeopleForPartyWithPDParty:(PDParty *)party {
  return [((id<PDPartyDao>) nil_chk([((PDPartyDatabase *) nil_chk(partyDatabase_)) partyDao])) allPeopleForPartyWithInt:[((PDParty *) nil_chk(party)) getId]];
}

- (void)addPersonWithPDParty:(PDParty *)party
                 withBoolean:(jboolean)coming {
  PDPerson *person = create_PDPerson_init();
  [person setPartyIdWithInt:[((PDParty *) nil_chk(party)) getId]];
  [person setRecordedWithJavaUtilDate:create_JavaUtilDate_init()];
  [person setValWithShort:(jshort) (coming ? 1 : -1)];
  [((id<PDPartyDao>) nil_chk([((PDPartyDatabase *) nil_chk(partyDatabase_)) partyDao])) createPersonWithPDPerson:person];
}

- (id<JavaUtilList>)allParties {
  return [((id<PDPartyDao>) nil_chk([((PDPartyDatabase *) nil_chk(partyDatabase_)) partyDao])) allParties];
}

- (PDParty *)createPartyWithNSString:(NSString *)name {
  PDParty *party = create_PDParty_init();
  [party setCreatedWithJavaUtilDate:create_JavaUtilDate_init()];
  [party setNameWithNSString:name];
  jlong newPartyId = [((id<PDPartyDao>) nil_chk([((PDPartyDatabase *) nil_chk(partyDatabase_)) partyDao])) createPartyWithPDParty:party];
  [party setIdWithInt:(jint) newPartyId];
  return party;
}

- (void)deletePartyWithPDParty:(PDParty *)party {
  [((id<PDPartyDao>) nil_chk([((PDPartyDatabase *) nil_chk(partyDatabase_)) partyDao])) deletePartyWithPDParty:party];
}

- (PDParty *)loadPartyWithInt:(jint)id_ {
  return [((id<JavaUtilList>) nil_chk([((id<PDPartyDao>) nil_chk([((PDPartyDatabase *) nil_chk(partyDatabase_)) partyDao])) partyForIdWithInt:id_])) getWithInt:0];
}

- (void)dealloc {
  RELEASE_(partyDatabase_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LPDParty;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LPDParty;", 0x1, 12, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithPDPartyDatabase:);
  methods[1].selector = @selector(countCurrentPartyWithInt:);
  methods[2].selector = @selector(allPeopleForPartyWithPDParty:);
  methods[3].selector = @selector(addPersonWithPDParty:withBoolean:);
  methods[4].selector = @selector(allParties);
  methods[5].selector = @selector(createPartyWithNSString:);
  methods[6].selector = @selector(deletePartyWithPDParty:);
  methods[7].selector = @selector(loadPartyWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "partyDatabase_", "LPDPartyDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LPDPartyDatabase;", "countCurrentParty", "I", "allPeopleForParty", "LPDParty;", "(Lcom/kgalligan/partyclicker/data/Party;)Ljava/util/List<Lcom/kgalligan/partyclicker/data/Person;>;", "addPerson", "LPDParty;Z", "()Ljava/util/List<Lcom/kgalligan/partyclicker/data/Party;>;", "createParty", "LNSString;", "deleteParty", "loadParty" };
  static const J2ObjcClassInfo _PDDatabaseHelper = { "DatabaseHelper", "com.kgalligan.partyclicker.data", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_PDDatabaseHelper;
}

@end

void PDDatabaseHelper_initWithPDPartyDatabase_(PDDatabaseHelper *self, PDPartyDatabase *partyDatabase) {
  NSObject_init(self);
  JreStrongAssign(&self->partyDatabase_, partyDatabase);
}

PDDatabaseHelper *new_PDDatabaseHelper_initWithPDPartyDatabase_(PDPartyDatabase *partyDatabase) {
  J2OBJC_NEW_IMPL(PDDatabaseHelper, initWithPDPartyDatabase_, partyDatabase)
}

PDDatabaseHelper *create_PDDatabaseHelper_initWithPDPartyDatabase_(PDPartyDatabase *partyDatabase) {
  J2OBJC_CREATE_IMPL(PDDatabaseHelper, initWithPDPartyDatabase_, partyDatabase)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDDatabaseHelper)
