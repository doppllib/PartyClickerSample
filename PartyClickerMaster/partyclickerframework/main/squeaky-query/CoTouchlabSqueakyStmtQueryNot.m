//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/query/src/main/java/co/touchlab/squeaky/stmt/query/Not.java
//

#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyDaoSqueakyContext.h"
#include "CoTouchlabSqueakyStmtJoinAlias.h"
#include "CoTouchlabSqueakyStmtQueryClause.h"
#include "CoTouchlabSqueakyStmtQueryManyClause.h"
#include "CoTouchlabSqueakyStmtQueryNot.h"
#include "CoTouchlabSqueakyStmtQueryQueryFactory.h"
#include "CoTouchlabSqueakyStmtQueryQueryable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/sql/SQLException.h"
#include "java/util/List.h"

@interface CoTouchlabSqueakyStmtQueryNot () {
 @public
  CoTouchlabSqueakyStmtQueryQueryFactory *queryFactory_;
  id<CoTouchlabSqueakyStmtQueryClause> comparison_;
  id<CoTouchlabSqueakyStmtQueryQueryable> parent_;
  CoTouchlabSqueakyStmtJoinAlias *joinAlias_;
}

- (void)checkClause;

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyStmtQueryNot, queryFactory_, CoTouchlabSqueakyStmtQueryQueryFactory *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyStmtQueryNot, comparison_, id<CoTouchlabSqueakyStmtQueryClause>)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyStmtQueryNot, parent_, id<CoTouchlabSqueakyStmtQueryQueryable>)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyStmtQueryNot, joinAlias_, CoTouchlabSqueakyStmtJoinAlias *)

__attribute__((unused)) static void CoTouchlabSqueakyStmtQueryNot_checkClause(CoTouchlabSqueakyStmtQueryNot *self);

@implementation CoTouchlabSqueakyStmtQueryNot

- (instancetype)initWithCoTouchlabSqueakyStmtQueryQueryable:(id<CoTouchlabSqueakyStmtQueryQueryable>)parent
                 withCoTouchlabSqueakyStmtQueryQueryFactory:(CoTouchlabSqueakyStmtQueryQueryFactory *)queryFactory
                         withCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias {
  CoTouchlabSqueakyStmtQueryNot_initWithCoTouchlabSqueakyStmtQueryQueryable_withCoTouchlabSqueakyStmtQueryQueryFactory_withCoTouchlabSqueakyStmtJoinAlias_(self, parent, queryFactory, joinAlias);
  return self;
}

- (void)appendSqlWithCoTouchlabSqueakyDaoSqueakyContext:(CoTouchlabSqueakyDaoSqueakyContext *)squeakyContext
                              withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                            withBoolean:(jboolean)joinsAllowed {
  if (comparison_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Clause has not been set in NOT operation");
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"(NOT "];
  [((id<CoTouchlabSqueakyStmtQueryClause>) nil_chk(comparison_)) appendSqlWithCoTouchlabSqueakyDaoSqueakyContext:squeakyContext withJavaLangStringBuilder:sb withBoolean:joinsAllowed];
  [sb appendWithNSString:@") "];
}

- (void)appendValueWithCoTouchlabSqueakyDaoSqueakyContext:(CoTouchlabSqueakyDaoSqueakyContext *)squeakyContext
                                         withJavaUtilList:(id<JavaUtilList>)params {
  [((id<CoTouchlabSqueakyStmtQueryClause>) nil_chk(comparison_)) appendValueWithCoTouchlabSqueakyDaoSqueakyContext:squeakyContext withJavaUtilList:params];
}

- (NSString *)description {
  if (comparison_ == nil) {
    return @"NOT without comparison";
  }
  else {
    return JreStrcat("$@", @"NOT comparison ", comparison_);
  }
}

- (NSString *)getWhereStatementWithBoolean:(jboolean)joinsAllowed {
  @throw create_JavaSqlSQLException_initWithNSString_(@"Must complete NOT statement");
}

- (id<CoTouchlabSqueakyDaoDao_QueryModifiers>)query {
  @throw create_JavaSqlSQLException_initWithNSString_(@"Must complete NOT statement");
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)reset {
  return [((id<CoTouchlabSqueakyStmtQueryQueryable>) nil_chk(parent_)) reset];
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)eqWithNSString:(NSString *)columnFieldName
                                                   withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) eqWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)eqWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                   withNSString:(NSString *)columnFieldName
                                                                         withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) eqWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)gtWithNSString:(NSString *)columnFieldName
                                                   withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) gtWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)gtWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                   withNSString:(NSString *)columnFieldName
                                                                         withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) gtWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)geWithNSString:(NSString *)columnFieldName
                                                   withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) geWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)geWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                   withNSString:(NSString *)columnFieldName
                                                                         withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) geWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)ltWithNSString:(NSString *)columnFieldName
                                                   withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) ltWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)ltWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                   withNSString:(NSString *)columnFieldName
                                                                         withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) ltWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)leWithNSString:(NSString *)columnFieldName
                                                   withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) leWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)leWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                   withNSString:(NSString *)columnFieldName
                                                                         withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) leWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)likeWithNSString:(NSString *)columnFieldName
                                                     withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) likeWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)likeWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                     withNSString:(NSString *)columnFieldName
                                                                           withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) likeWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)neWithNSString:(NSString *)columnFieldName
                                                   withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) neWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)neWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                   withNSString:(NSString *)columnFieldName
                                                                         withId:(id)value {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) neWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withId:value]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)inWithNSString:(NSString *)columnFieldName
                                     withJavaLangIterable:(id<JavaLangIterable>)objects {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) inWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ objects } count:1 type:NSObject_class_()]]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)inWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                   withNSString:(NSString *)columnFieldName
                                                           withJavaLangIterable:(id<JavaLangIterable>)objects {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) inWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ objects } count:1 type:NSObject_class_()]]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)notInWithNSString:(NSString *)columnFieldName
                                        withJavaLangIterable:(id<JavaLangIterable>)objects {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) notInWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ objects } count:1 type:NSObject_class_()]]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)notInWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                      withNSString:(NSString *)columnFieldName
                                                              withJavaLangIterable:(id<JavaLangIterable>)objects {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) notInWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ objects } count:1 type:NSObject_class_()]]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)inWithNSString:(NSString *)columnFieldName
                                        withNSObjectArray:(IOSObjectArray *)objects {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) inWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withNSObjectArray:objects]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)inWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                   withNSString:(NSString *)columnFieldName
                                                              withNSObjectArray:(IOSObjectArray *)objects {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) inWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withNSObjectArray:objects]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)notInWithNSString:(NSString *)columnFieldName
                                           withNSObjectArray:(IOSObjectArray *)objects {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) notInWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withNSObjectArray:objects]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)notInWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                      withNSString:(NSString *)columnFieldName
                                                                 withNSObjectArray:(IOSObjectArray *)objects {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) notInWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withNSObjectArray:objects]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)betweenWithNSString:(NSString *)columnFieldName
                                                        withId:(id)low
                                                        withId:(id)high {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) betweenWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName withId:low withId:high]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)betweenWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                        withNSString:(NSString *)columnFieldName
                                                                              withId:(id)low
                                                                              withId:(id)high {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) betweenWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName withId:low withId:high]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)isNullWithNSString:(NSString *)columnFieldName {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) isNullWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)isNullWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                       withNSString:(NSString *)columnFieldName {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) isNullWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)isNotNullWithNSString:(NSString *)columnFieldName {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) isNotNullWithCoTouchlabSqueakyStmtJoinAlias:joinAlias_ withNSString:columnFieldName]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)isNotNullWithCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias
                                                                          withNSString:(NSString *)columnFieldName {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  JreStrongAssign(&comparison_, [((CoTouchlabSqueakyStmtQueryQueryFactory *) nil_chk(queryFactory_)) isNotNullWithCoTouchlabSqueakyStmtJoinAlias:joinAlias withNSString:columnFieldName]);
  return parent_;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)and__ {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  CoTouchlabSqueakyStmtQueryManyClause *manyClause = create_CoTouchlabSqueakyStmtQueryManyClause_initWithCoTouchlabSqueakyStmtQueryQueryable_withCoTouchlabSqueakyStmtQueryQueryFactory_withNSString_withCoTouchlabSqueakyStmtJoinAlias_(parent_, queryFactory_, CoTouchlabSqueakyStmtQueryManyClause_AND_OPERATION, joinAlias_);
  JreStrongAssign(&comparison_, manyClause);
  return manyClause;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)or__ {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
  CoTouchlabSqueakyStmtQueryManyClause *manyClause = create_CoTouchlabSqueakyStmtQueryManyClause_initWithCoTouchlabSqueakyStmtQueryQueryable_withCoTouchlabSqueakyStmtQueryQueryFactory_withNSString_withCoTouchlabSqueakyStmtJoinAlias_(parent_, queryFactory_, CoTouchlabSqueakyStmtQueryManyClause_OR_OPERATION, joinAlias_);
  JreStrongAssign(&comparison_, manyClause);
  return manyClause;
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)not__ {
  @throw create_JavaSqlSQLException_initWithNSString_(@"Double negative? Calling not on not");
}

- (id<CoTouchlabSqueakyStmtQueryQueryable>)end {
  @throw create_JavaSqlSQLException_initWithNSString_(@"Can't end a single entity");
}

- (void)checkClause {
  CoTouchlabSqueakyStmtQueryNot_checkClause(self);
}

- (void)dealloc {
  RELEASE_(queryFactory_);
  RELEASE_(comparison_);
  RELEASE_(parent_);
  RELEASE_(joinAlias_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, 7, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, 4, -1, -1, -1 },
    { NULL, "LCoTouchlabSqueakyDaoDao_QueryModifiers;", 0x1, -1, -1, 4, 11, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 13, 14, 4, 15, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 13, 16, 4, 17, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 18, 14, 4, 15, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 18, 16, 4, 17, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 19, 14, 4, 15, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 19, 16, 4, 17, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 20, 14, 4, 15, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 20, 16, 4, 17, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 21, 14, 4, 15, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 21, 16, 4, 17, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 22, 14, 4, 15, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 22, 16, 4, 17, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 23, 14, 4, 15, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 23, 16, 4, 17, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 24, 25, 4, 26, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 24, 27, 4, 28, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 29, 25, 4, 26, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 29, 27, 4, 28, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x81, 24, 30, 4, 31, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x81, 24, 32, 4, 33, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x81, 29, 30, 4, 31, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x81, 29, 32, 4, 33, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 34, 35, 4, 36, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 34, 37, 4, 38, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 39, 40, 4, 41, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 39, 42, 4, 43, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 44, 40, 4, 41, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 44, 42, 4, 43, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 45, -1, 4, 12, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 46, -1, 4, 12, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, 47, -1, 4, 12, -1, -1 },
    { NULL, "LCoTouchlabSqueakyStmtQueryQueryable;", 0x1, -1, -1, 4, 12, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCoTouchlabSqueakyStmtQueryQueryable:withCoTouchlabSqueakyStmtQueryQueryFactory:withCoTouchlabSqueakyStmtJoinAlias:);
  methods[1].selector = @selector(appendSqlWithCoTouchlabSqueakyDaoSqueakyContext:withJavaLangStringBuilder:withBoolean:);
  methods[2].selector = @selector(appendValueWithCoTouchlabSqueakyDaoSqueakyContext:withJavaUtilList:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(getWhereStatementWithBoolean:);
  methods[5].selector = @selector(query);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(eqWithNSString:withId:);
  methods[8].selector = @selector(eqWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withId:);
  methods[9].selector = @selector(gtWithNSString:withId:);
  methods[10].selector = @selector(gtWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withId:);
  methods[11].selector = @selector(geWithNSString:withId:);
  methods[12].selector = @selector(geWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withId:);
  methods[13].selector = @selector(ltWithNSString:withId:);
  methods[14].selector = @selector(ltWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withId:);
  methods[15].selector = @selector(leWithNSString:withId:);
  methods[16].selector = @selector(leWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withId:);
  methods[17].selector = @selector(likeWithNSString:withId:);
  methods[18].selector = @selector(likeWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withId:);
  methods[19].selector = @selector(neWithNSString:withId:);
  methods[20].selector = @selector(neWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withId:);
  methods[21].selector = @selector(inWithNSString:withJavaLangIterable:);
  methods[22].selector = @selector(inWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withJavaLangIterable:);
  methods[23].selector = @selector(notInWithNSString:withJavaLangIterable:);
  methods[24].selector = @selector(notInWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withJavaLangIterable:);
  methods[25].selector = @selector(inWithNSString:withNSObjectArray:);
  methods[26].selector = @selector(inWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withNSObjectArray:);
  methods[27].selector = @selector(notInWithNSString:withNSObjectArray:);
  methods[28].selector = @selector(notInWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withNSObjectArray:);
  methods[29].selector = @selector(betweenWithNSString:withId:withId:);
  methods[30].selector = @selector(betweenWithCoTouchlabSqueakyStmtJoinAlias:withNSString:withId:withId:);
  methods[31].selector = @selector(isNullWithNSString:);
  methods[32].selector = @selector(isNullWithCoTouchlabSqueakyStmtJoinAlias:withNSString:);
  methods[33].selector = @selector(isNotNullWithNSString:);
  methods[34].selector = @selector(isNotNullWithCoTouchlabSqueakyStmtJoinAlias:withNSString:);
  methods[35].selector = @selector(and__);
  methods[36].selector = @selector(or__);
  methods[37].selector = @selector(not__);
  methods[38].selector = @selector(end);
  methods[39].selector = @selector(checkClause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queryFactory_", "LCoTouchlabSqueakyStmtQueryQueryFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "comparison_", "LCoTouchlabSqueakyStmtQueryClause;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parent_", "LCoTouchlabSqueakyStmtQueryQueryable;", .constantValue.asLong = 0, 0x12, -1, -1, 48, -1 },
    { "joinAlias_", "LCoTouchlabSqueakyStmtJoinAlias;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyStmtQueryQueryable;LCoTouchlabSqueakyStmtQueryQueryFactory;LCoTouchlabSqueakyStmtJoinAlias;", "(Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;Lco/touchlab/squeaky/stmt/query/QueryFactory;Lco/touchlab/squeaky/stmt/JoinAlias;)V", "appendSql", "LCoTouchlabSqueakyDaoSqueakyContext;LJavaLangStringBuilder;Z", "LJavaSqlSQLException;", "appendValue", "LCoTouchlabSqueakyDaoSqueakyContext;LJavaUtilList;", "(Lco/touchlab/squeaky/dao/SqueakyContext;Ljava/util/List<Ljava/lang/String;>;)V", "toString", "getWhereStatement", "Z", "()Lco/touchlab/squeaky/dao/Dao$QueryModifiers<TT;>;", "()Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "eq", "LNSString;LNSObject;", "(Ljava/lang/String;Ljava/lang/Object;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "LCoTouchlabSqueakyStmtJoinAlias;LNSString;LNSObject;", "(Lco/touchlab/squeaky/stmt/JoinAlias;Ljava/lang/String;Ljava/lang/Object;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "gt", "ge", "lt", "le", "like", "ne", "in", "LNSString;LJavaLangIterable;", "(Ljava/lang/String;Ljava/lang/Iterable<*>;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "LCoTouchlabSqueakyStmtJoinAlias;LNSString;LJavaLangIterable;", "(Lco/touchlab/squeaky/stmt/JoinAlias;Ljava/lang/String;Ljava/lang/Iterable<*>;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "notIn", "LNSString;[LNSObject;", "(Ljava/lang/String;[Ljava/lang/Object;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "LCoTouchlabSqueakyStmtJoinAlias;LNSString;[LNSObject;", "(Lco/touchlab/squeaky/stmt/JoinAlias;Ljava/lang/String;[Ljava/lang/Object;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "between", "LNSString;LNSObject;LNSObject;", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "LCoTouchlabSqueakyStmtJoinAlias;LNSString;LNSObject;LNSObject;", "(Lco/touchlab/squeaky/stmt/JoinAlias;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "isNull", "LNSString;", "(Ljava/lang/String;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "LCoTouchlabSqueakyStmtJoinAlias;LNSString;", "(Lco/touchlab/squeaky/stmt/JoinAlias;Ljava/lang/String;)Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "isNotNull", "and", "or", "not", "Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lco/touchlab/squeaky/stmt/query/Clause;Lco/touchlab/squeaky/stmt/query/Queryable<TT;>;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyStmtQueryNot = { "Not", "co.touchlab.squeaky.stmt.query", ptrTable, methods, fields, 7, 0x1, 40, 4, -1, -1, -1, 49, -1 };
  return &_CoTouchlabSqueakyStmtQueryNot;
}

@end

void CoTouchlabSqueakyStmtQueryNot_initWithCoTouchlabSqueakyStmtQueryQueryable_withCoTouchlabSqueakyStmtQueryQueryFactory_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyStmtQueryNot *self, id<CoTouchlabSqueakyStmtQueryQueryable> parent, CoTouchlabSqueakyStmtQueryQueryFactory *queryFactory, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  NSObject_init(self);
  JreStrongAssign(&self->comparison_, nil);
  JreStrongAssign(&self->queryFactory_, queryFactory);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->joinAlias_, joinAlias);
}

CoTouchlabSqueakyStmtQueryNot *new_CoTouchlabSqueakyStmtQueryNot_initWithCoTouchlabSqueakyStmtQueryQueryable_withCoTouchlabSqueakyStmtQueryQueryFactory_withCoTouchlabSqueakyStmtJoinAlias_(id<CoTouchlabSqueakyStmtQueryQueryable> parent, CoTouchlabSqueakyStmtQueryQueryFactory *queryFactory, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyStmtQueryNot, initWithCoTouchlabSqueakyStmtQueryQueryable_withCoTouchlabSqueakyStmtQueryQueryFactory_withCoTouchlabSqueakyStmtJoinAlias_, parent, queryFactory, joinAlias)
}

CoTouchlabSqueakyStmtQueryNot *create_CoTouchlabSqueakyStmtQueryNot_initWithCoTouchlabSqueakyStmtQueryQueryable_withCoTouchlabSqueakyStmtQueryQueryFactory_withCoTouchlabSqueakyStmtJoinAlias_(id<CoTouchlabSqueakyStmtQueryQueryable> parent, CoTouchlabSqueakyStmtQueryQueryFactory *queryFactory, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyStmtQueryNot, initWithCoTouchlabSqueakyStmtQueryQueryable_withCoTouchlabSqueakyStmtQueryQueryFactory_withCoTouchlabSqueakyStmtJoinAlias_, parent, queryFactory, joinAlias)
}

void CoTouchlabSqueakyStmtQueryNot_checkClause(CoTouchlabSqueakyStmtQueryNot *self) {
  if (self->comparison_ != nil) @throw create_JavaSqlSQLException_initWithNSString_(@"Clause already defined. Must use and/or for multiple conditions");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyStmtQueryNot)
