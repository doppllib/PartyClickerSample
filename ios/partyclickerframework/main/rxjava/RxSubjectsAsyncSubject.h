//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsAsyncSubject")
#ifdef RESTRICT_RxSubjectsAsyncSubject
#define INCLUDE_ALL_RxSubjectsAsyncSubject 0
#else
#define INCLUDE_ALL_RxSubjectsAsyncSubject 1
#endif
#undef RESTRICT_RxSubjectsAsyncSubject

#if !defined (RxSubjectsAsyncSubject_) && (INCLUDE_ALL_RxSubjectsAsyncSubject || defined(INCLUDE_RxSubjectsAsyncSubject))
#define RxSubjectsAsyncSubject_

#define RESTRICT_RxSubjectsSubject 1
#define INCLUDE_RxSubjectsSubject 1
#include "RxSubjectsSubject.h"

@class RxSubjectsSubjectSubscriptionManager;
@protocol RxObservable_OnSubscribe;

@interface RxSubjectsAsyncSubject : RxSubjectsSubject {
 @public
  RxSubjectsSubjectSubscriptionManager *state_;
  volatile_id lastValue_;
}

#pragma mark Public

+ (RxSubjectsAsyncSubject *)create;

- (NSException *)getThrowable;

- (id)getValue;

- (jboolean)hasCompleted;

- (jboolean)hasObservers;

- (jboolean)hasThrowable;

- (jboolean)hasValue;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)v;

#pragma mark Protected

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
        withRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)state;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsAsyncSubject)

J2OBJC_FIELD_SETTER(RxSubjectsAsyncSubject, state_, RxSubjectsSubjectSubscriptionManager *)
J2OBJC_VOLATILE_FIELD_SETTER(RxSubjectsAsyncSubject, lastValue_, id)

FOUNDATION_EXPORT RxSubjectsAsyncSubject *RxSubjectsAsyncSubject_create();

FOUNDATION_EXPORT void RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(RxSubjectsAsyncSubject *self, id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state);

FOUNDATION_EXPORT RxSubjectsAsyncSubject *new_RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsAsyncSubject *create_RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsAsyncSubject)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsAsyncSubject")
