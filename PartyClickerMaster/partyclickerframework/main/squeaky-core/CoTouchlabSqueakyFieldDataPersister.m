//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "CoTouchlabSqueakyFieldDataPersister.h"
#include "J2ObjC_source.h"

@interface CoTouchlabSqueakyFieldDataPersister : NSObject

@end

@implementation CoTouchlabSqueakyFieldDataPersister

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LIOSClass;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getAssociatedClasses);
  methods[1].selector = @selector(getAssociatedClassNames);
  methods[2].selector = @selector(makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:);
  methods[3].selector = @selector(isEscapedDefaultValue);
  methods[4].selector = @selector(isEscapedValue);
  methods[5].selector = @selector(isPrimitive);
  methods[6].selector = @selector(isComparable);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()[Ljava/lang/Class<*>;", "makeConfigObject", "LCoTouchlabSqueakyFieldFieldType;", "LJavaSqlSQLException;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldDataPersister = { "DataPersister", "co.touchlab.squeaky.field", ptrTable, methods, NULL, 7, 0x609, 7, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldDataPersister;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldDataPersister)
