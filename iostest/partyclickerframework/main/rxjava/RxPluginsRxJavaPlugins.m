//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxPluginsRxJavaCompletableExecutionHook.h"
#include "RxPluginsRxJavaErrorHandler.h"
#include "RxPluginsRxJavaObservableExecutionHook.h"
#include "RxPluginsRxJavaObservableExecutionHookDefault.h"
#include "RxPluginsRxJavaPlugins.h"
#include "RxPluginsRxJavaSchedulersHook.h"
#include "RxPluginsRxJavaSingleExecutionHook.h"
#include "RxPluginsRxJavaSingleExecutionHookDefault.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface RxPluginsRxJavaPlugins () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *errorHandler_;
  JavaUtilConcurrentAtomicAtomicReference *observableExecutionHook_;
  JavaUtilConcurrentAtomicAtomicReference *singleExecutionHook_;
  JavaUtilConcurrentAtomicAtomicReference *completableExecutionHook_;
  JavaUtilConcurrentAtomicAtomicReference *schedulersHook_;
}

@end

J2OBJC_FIELD_SETTER(RxPluginsRxJavaPlugins, errorHandler_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaPlugins, observableExecutionHook_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaPlugins, singleExecutionHook_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaPlugins, completableExecutionHook_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaPlugins, schedulersHook_, JavaUtilConcurrentAtomicAtomicReference *)

inline RxPluginsRxJavaPlugins *RxPluginsRxJavaPlugins_get_INSTANCE();
static RxPluginsRxJavaPlugins *RxPluginsRxJavaPlugins_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxPluginsRxJavaPlugins, INSTANCE, RxPluginsRxJavaPlugins *)

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPlugins__Annotations$0();

@interface RxPluginsRxJavaPlugins_1 : RxPluginsRxJavaErrorHandler

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaPlugins_1)

__attribute__((unused)) static void RxPluginsRxJavaPlugins_1_init(RxPluginsRxJavaPlugins_1 *self);

__attribute__((unused)) static RxPluginsRxJavaPlugins_1 *new_RxPluginsRxJavaPlugins_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaPlugins_1 *create_RxPluginsRxJavaPlugins_1_init();

@interface RxPluginsRxJavaPlugins_2 : RxPluginsRxJavaCompletableExecutionHook

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaPlugins_2)

__attribute__((unused)) static void RxPluginsRxJavaPlugins_2_init(RxPluginsRxJavaPlugins_2 *self);

__attribute__((unused)) static RxPluginsRxJavaPlugins_2 *new_RxPluginsRxJavaPlugins_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaPlugins_2 *create_RxPluginsRxJavaPlugins_2_init();

J2OBJC_INITIALIZED_DEFN(RxPluginsRxJavaPlugins)

RxPluginsRxJavaErrorHandler *RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER;

@implementation RxPluginsRxJavaPlugins

+ (RxPluginsRxJavaPlugins *)getInstance {
  return RxPluginsRxJavaPlugins_getInstance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPlugins_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_INSTANCE))->errorHandler_)) setWithId:nil];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(RxPluginsRxJavaPlugins_INSTANCE->observableExecutionHook_)) setWithId:nil];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(RxPluginsRxJavaPlugins_INSTANCE->singleExecutionHook_)) setWithId:nil];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(RxPluginsRxJavaPlugins_INSTANCE->completableExecutionHook_)) setWithId:nil];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(RxPluginsRxJavaPlugins_INSTANCE->schedulersHook_)) setWithId:nil];
}

- (RxPluginsRxJavaErrorHandler *)getErrorHandler {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(errorHandler_)) get] == nil) {
    id impl = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(RxPluginsRxJavaErrorHandler_class_(), JavaLangSystem_getProperties());
    if (impl == nil) {
      [errorHandler_ compareAndSetWithId:nil withId:RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER];
    }
    else {
      [errorHandler_ compareAndSetWithId:nil withId:(RxPluginsRxJavaErrorHandler *) cast_chk(impl, [RxPluginsRxJavaErrorHandler class])];
    }
  }
  return [errorHandler_ get];
}

- (void)registerErrorHandlerWithRxPluginsRxJavaErrorHandler:(RxPluginsRxJavaErrorHandler *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(errorHandler_)) compareAndSetWithId:nil withId:impl]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [errorHandler_ get]));
  }
}

- (RxPluginsRxJavaObservableExecutionHook *)getObservableExecutionHook {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observableExecutionHook_)) get] == nil) {
    id impl = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(RxPluginsRxJavaObservableExecutionHook_class_(), JavaLangSystem_getProperties());
    if (impl == nil) {
      [observableExecutionHook_ compareAndSetWithId:nil withId:RxPluginsRxJavaObservableExecutionHookDefault_getInstance()];
    }
    else {
      [observableExecutionHook_ compareAndSetWithId:nil withId:(RxPluginsRxJavaObservableExecutionHook *) cast_chk(impl, [RxPluginsRxJavaObservableExecutionHook class])];
    }
  }
  return [observableExecutionHook_ get];
}

- (void)registerObservableExecutionHookWithRxPluginsRxJavaObservableExecutionHook:(RxPluginsRxJavaObservableExecutionHook *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observableExecutionHook_)) compareAndSetWithId:nil withId:impl]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [observableExecutionHook_ get]));
  }
}

- (RxPluginsRxJavaSingleExecutionHook *)getSingleExecutionHook {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(singleExecutionHook_)) get] == nil) {
    id impl = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(RxPluginsRxJavaSingleExecutionHook_class_(), JavaLangSystem_getProperties());
    if (impl == nil) {
      [singleExecutionHook_ compareAndSetWithId:nil withId:RxPluginsRxJavaSingleExecutionHookDefault_getInstance()];
    }
    else {
      [singleExecutionHook_ compareAndSetWithId:nil withId:(RxPluginsRxJavaSingleExecutionHook *) cast_chk(impl, [RxPluginsRxJavaSingleExecutionHook class])];
    }
  }
  return [singleExecutionHook_ get];
}

- (void)registerSingleExecutionHookWithRxPluginsRxJavaSingleExecutionHook:(RxPluginsRxJavaSingleExecutionHook *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(singleExecutionHook_)) compareAndSetWithId:nil withId:impl]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [singleExecutionHook_ get]));
  }
}

- (RxPluginsRxJavaCompletableExecutionHook *)getCompletableExecutionHook {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(completableExecutionHook_)) get] == nil) {
    id impl = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(RxPluginsRxJavaCompletableExecutionHook_class_(), JavaLangSystem_getProperties());
    if (impl == nil) {
      [completableExecutionHook_ compareAndSetWithId:nil withId:create_RxPluginsRxJavaPlugins_2_init()];
    }
    else {
      [completableExecutionHook_ compareAndSetWithId:nil withId:(RxPluginsRxJavaCompletableExecutionHook *) cast_chk(impl, [RxPluginsRxJavaCompletableExecutionHook class])];
    }
  }
  return [completableExecutionHook_ get];
}

- (void)registerCompletableExecutionHookWithRxPluginsRxJavaCompletableExecutionHook:(RxPluginsRxJavaCompletableExecutionHook *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(completableExecutionHook_)) compareAndSetWithId:nil withId:impl]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(singleExecutionHook_)) get]));
  }
}

+ (id)getPluginImplementationViaPropertyWithIOSClass:(IOSClass *)pluginClass
                              withJavaUtilProperties:(JavaUtilProperties *)propsIn {
  return RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(pluginClass, propsIn);
}

- (RxPluginsRxJavaSchedulersHook *)getSchedulersHook {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(schedulersHook_)) get] == nil) {
    id impl = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(RxPluginsRxJavaSchedulersHook_class_(), JavaLangSystem_getProperties());
    if (impl == nil) {
      [schedulersHook_ compareAndSetWithId:nil withId:RxPluginsRxJavaSchedulersHook_getDefaultInstance()];
    }
    else {
      [schedulersHook_ compareAndSetWithId:nil withId:(RxPluginsRxJavaSchedulersHook *) cast_chk(impl, [RxPluginsRxJavaSchedulersHook class])];
    }
  }
  return [schedulersHook_ get];
}

- (void)registerSchedulersHookWithRxPluginsRxJavaSchedulersHook:(RxPluginsRxJavaSchedulersHook *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(schedulersHook_)) compareAndSetWithId:nil withId:impl]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [schedulersHook_ get]));
  }
}

- (void)dealloc {
  RELEASE_(errorHandler_);
  RELEASE_(observableExecutionHook_);
  RELEASE_(singleExecutionHook_);
  RELEASE_(completableExecutionHook_);
  RELEASE_(schedulersHook_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxPluginsRxJavaPlugins;", 0x9, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxPluginsRxJavaErrorHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LRxPluginsRxJavaObservableExecutionHook;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LRxPluginsRxJavaSingleExecutionHook;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LRxPluginsRxJavaCompletableExecutionHook;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x8, 9, 10, -1, 11, -1, -1 },
    { NULL, "LRxPluginsRxJavaSchedulersHook;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(getErrorHandler);
  methods[4].selector = @selector(registerErrorHandlerWithRxPluginsRxJavaErrorHandler:);
  methods[5].selector = @selector(getObservableExecutionHook);
  methods[6].selector = @selector(registerObservableExecutionHookWithRxPluginsRxJavaObservableExecutionHook:);
  methods[7].selector = @selector(getSingleExecutionHook);
  methods[8].selector = @selector(registerSingleExecutionHookWithRxPluginsRxJavaSingleExecutionHook:);
  methods[9].selector = @selector(getCompletableExecutionHook);
  methods[10].selector = @selector(registerCompletableExecutionHookWithRxPluginsRxJavaCompletableExecutionHook:);
  methods[11].selector = @selector(getPluginImplementationViaPropertyWithIOSClass:withJavaUtilProperties:);
  methods[12].selector = @selector(getSchedulersHook);
  methods[13].selector = @selector(registerSchedulersHookWithRxPluginsRxJavaSchedulersHook:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxPluginsRxJavaPlugins;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "errorHandler_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "observableExecutionHook_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "singleExecutionHook_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "completableExecutionHook_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "schedulersHook_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "DEFAULT_ERROR_HANDLER", "LRxPluginsRxJavaErrorHandler;", .constantValue.asLong = 0, 0x18, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxPluginsRxJavaPlugins__Annotations$0, "registerErrorHandler", "LRxPluginsRxJavaErrorHandler;", "registerObservableExecutionHook", "LRxPluginsRxJavaObservableExecutionHook;", "registerSingleExecutionHook", "LRxPluginsRxJavaSingleExecutionHook;", "registerCompletableExecutionHook", "LRxPluginsRxJavaCompletableExecutionHook;", "getPluginImplementationViaProperty", "LIOSClass;LJavaUtilProperties;", "(Ljava/lang/Class<*>;Ljava/util/Properties;)Ljava/lang/Object;", "registerSchedulersHook", "LRxPluginsRxJavaSchedulersHook;", &RxPluginsRxJavaPlugins_INSTANCE, "Ljava/util/concurrent/atomic/AtomicReference<Lrx/plugins/RxJavaErrorHandler;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/plugins/RxJavaObservableExecutionHook;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/plugins/RxJavaSingleExecutionHook;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/plugins/RxJavaCompletableExecutionHook;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/plugins/RxJavaSchedulersHook;>;", &RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER };
  static const J2ObjcClassInfo _RxPluginsRxJavaPlugins = { "RxJavaPlugins", "rx.plugins", ptrTable, methods, fields, 7, 0x1, 14, 7, -1, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaPlugins;
}

+ (void)initialize {
  if (self == [RxPluginsRxJavaPlugins class]) {
    JreStrongAssignAndConsume(&RxPluginsRxJavaPlugins_INSTANCE, new_RxPluginsRxJavaPlugins_init());
    JreStrongAssignAndConsume(&RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER, new_RxPluginsRxJavaPlugins_1_init());
    J2OBJC_SET_INITIALIZED(RxPluginsRxJavaPlugins)
  }
}

@end

RxPluginsRxJavaPlugins *RxPluginsRxJavaPlugins_getInstance() {
  RxPluginsRxJavaPlugins_initialize();
  return RxPluginsRxJavaPlugins_INSTANCE;
}

void RxPluginsRxJavaPlugins_init(RxPluginsRxJavaPlugins *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->errorHandler_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->observableExecutionHook_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->singleExecutionHook_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->completableExecutionHook_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->schedulersHook_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

RxPluginsRxJavaPlugins *new_RxPluginsRxJavaPlugins_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPlugins, init)
}

RxPluginsRxJavaPlugins *create_RxPluginsRxJavaPlugins_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPlugins, init)
}

id RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(IOSClass *pluginClass, JavaUtilProperties *propsIn) {
  RxPluginsRxJavaPlugins_initialize();
  JavaUtilProperties *props = (JavaUtilProperties *) cast_chk([((JavaUtilProperties *) nil_chk(propsIn)) java_clone], [JavaUtilProperties class]);
  NSString *classSimpleName = [((IOSClass *) nil_chk(pluginClass)) getSimpleName];
  NSString *pluginPrefix = @"rxjava.plugin.";
  NSString *defaultKey = JreStrcat("$$$", pluginPrefix, classSimpleName, @".implementation");
  NSString *implementingClass = [((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:defaultKey];
  if (implementingClass == nil) {
    NSString *classSuffix = @".class";
    NSString *implSuffix = @".impl";
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([props entrySet])) {
      NSString *key = [nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]) description];
      if ([((NSString *) nil_chk(key)) java_hasPrefix:pluginPrefix] && [key java_hasSuffix:classSuffix]) {
        NSString *value = [nil_chk([e getValue]) description];
        if ([((NSString *) nil_chk(classSimpleName)) isEqual:value]) {
          NSString *index = [((NSString *) nil_chk([key java_substring:0 endIndex:[key java_length] - [classSuffix java_length]])) java_substring:[pluginPrefix java_length]];
          NSString *implKey = JreStrcat("$$$", pluginPrefix, index, implSuffix);
          implementingClass = [props getPropertyWithNSString:implKey];
          if (implementingClass == nil) {
            @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$", @"Implementing class declaration for ", classSimpleName, @" missing: ", implKey));
          }
          break;
        }
      }
    }
  }
  if (implementingClass != nil) {
    @try {
      IOSClass *cls = IOSClass_forName_(implementingClass);
      cls = [((IOSClass *) nil_chk(cls)) asSubclass:pluginClass];
      return [((IOSClass *) nil_chk(cls)) newInstance];
    }
    @catch (JavaLangClassCastException *e) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(JreStrcat("$$$$$", classSimpleName, @" implementation is not an instance of ", classSimpleName, @": ", implementingClass), e);
    }
    @catch (JavaLangClassNotFoundException *e) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(JreStrcat("$$$", classSimpleName, @" implementation class not found: ", implementingClass), e);
    }
    @catch (JavaLangInstantiationException *e) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(JreStrcat("$$$", classSimpleName, @" implementation not able to be instantiated: ", implementingClass), e);
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(JreStrcat("$$$", classSimpleName, @" implementation not able to be accessed: ", implementingClass), e);
    }
  }
  return nil;
}

IOSObjectArray *RxPluginsRxJavaPlugins__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPlugins)

@implementation RxPluginsRxJavaPlugins_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPlugins_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxPluginsRxJavaPlugins;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPlugins_1 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaPlugins_1;
}

@end

void RxPluginsRxJavaPlugins_1_init(RxPluginsRxJavaPlugins_1 *self) {
  RxPluginsRxJavaErrorHandler_init(self);
}

RxPluginsRxJavaPlugins_1 *new_RxPluginsRxJavaPlugins_1_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPlugins_1, init)
}

RxPluginsRxJavaPlugins_1 *create_RxPluginsRxJavaPlugins_1_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPlugins_1, init)
}

@implementation RxPluginsRxJavaPlugins_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPlugins_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxPluginsRxJavaPlugins;", "getCompletableExecutionHook" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPlugins_2 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, -1, -1 };
  return &_RxPluginsRxJavaPlugins_2;
}

@end

void RxPluginsRxJavaPlugins_2_init(RxPluginsRxJavaPlugins_2 *self) {
  RxPluginsRxJavaCompletableExecutionHook_init(self);
}

RxPluginsRxJavaPlugins_2 *new_RxPluginsRxJavaPlugins_2_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPlugins_2, init)
}

RxPluginsRxJavaPlugins_2 *create_RxPluginsRxJavaPlugins_2_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPlugins_2, init)
}
