//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc0.h"
#include "RxInternalOperatorsOperatorMulticast.h"
#include "RxObservable.h"
#include "RxObservablesConnectableObservable.h"
#include "RxObserversSubscribers.h"
#include "RxSubjectsSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface RxInternalOperatorsOperatorMulticast ()

- (instancetype)initWithId:(id)guard
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)connectedSubject
          withJavaUtilList:(id<JavaUtilList>)waitingForConnect
          withRxObservable:(RxObservable *)source
      withRxFunctionsFunc0:(id<RxFunctionsFunc0>)subjectFactory;

@end

__attribute__((unused)) static void RxInternalOperatorsOperatorMulticast_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_(RxInternalOperatorsOperatorMulticast *self, id guard, JavaUtilConcurrentAtomicAtomicReference *connectedSubject, id<JavaUtilList> waitingForConnect, RxObservable *source, id<RxFunctionsFunc0> subjectFactory);

__attribute__((unused)) static RxInternalOperatorsOperatorMulticast *new_RxInternalOperatorsOperatorMulticast_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_(id guard, JavaUtilConcurrentAtomicAtomicReference *connectedSubject, id<JavaUtilList> waitingForConnect, RxObservable *source, id<RxFunctionsFunc0> subjectFactory) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorMulticast *create_RxInternalOperatorsOperatorMulticast_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_(id guard, JavaUtilConcurrentAtomicAtomicReference *connectedSubject, id<JavaUtilList> waitingForConnect, RxObservable *source, id<RxFunctionsFunc0> subjectFactory);

@interface RxInternalOperatorsOperatorMulticast_1 : NSObject < RxObservable_OnSubscribe > {
 @public
  id val$guard_;
  JavaUtilConcurrentAtomicAtomicReference *val$connectedSubject_;
  id<JavaUtilList> val$waitingForConnect_;
}

- (instancetype)initWithId:(id)capture$0
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
          withJavaUtilList:(id<JavaUtilList>)capture$2;

- (void)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMulticast_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorMulticast_1_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_(RxInternalOperatorsOperatorMulticast_1 *self, id capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<JavaUtilList> capture$2);

__attribute__((unused)) static RxInternalOperatorsOperatorMulticast_1 *new_RxInternalOperatorsOperatorMulticast_1_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_(id capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<JavaUtilList> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorMulticast_1 *create_RxInternalOperatorsOperatorMulticast_1_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_(id capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<JavaUtilList> capture$2);

@interface RxInternalOperatorsOperatorMulticast_2 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorMulticast *this$0_;
  JavaUtilConcurrentAtomicAtomicReference *val$gs_;
}

- (instancetype)initWithRxInternalOperatorsOperatorMulticast:(RxInternalOperatorsOperatorMulticast *)outer$
                 withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMulticast_2)

__attribute__((unused)) static void RxInternalOperatorsOperatorMulticast_2_initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorMulticast_2 *self, RxInternalOperatorsOperatorMulticast *outer$, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorMulticast_2 *new_RxInternalOperatorsOperatorMulticast_2_initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorMulticast *outer$, JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorMulticast_2 *create_RxInternalOperatorsOperatorMulticast_2_initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorMulticast *outer$, JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxInternalOperatorsOperatorMulticast_3 : RxSubscriber {
 @public
  RxSubscriber *val$s_;
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
                    withRxSubscriber:(RxSubscriber *)subscriber;

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMulticast_3)

__attribute__((unused)) static void RxInternalOperatorsOperatorMulticast_3_initWithRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorMulticast_3 *self, RxSubscriber *capture$0, RxSubscriber *subscriber);

__attribute__((unused)) static RxInternalOperatorsOperatorMulticast_3 *new_RxInternalOperatorsOperatorMulticast_3_initWithRxSubscriber_withRxSubscriber_(RxSubscriber *capture$0, RxSubscriber *subscriber) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorMulticast_3 *create_RxInternalOperatorsOperatorMulticast_3_initWithRxSubscriber_withRxSubscriber_(RxSubscriber *capture$0, RxSubscriber *subscriber);

@implementation RxInternalOperatorsOperatorMulticast

- (instancetype)initWithRxObservable:(RxObservable *)source
                withRxFunctionsFunc0:(id<RxFunctionsFunc0>)subjectFactory {
  RxInternalOperatorsOperatorMulticast_initWithRxObservable_withRxFunctionsFunc0_(self, source, subjectFactory);
  return self;
}

- (instancetype)initWithId:(id)guard
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)connectedSubject
          withJavaUtilList:(id<JavaUtilList>)waitingForConnect
          withRxObservable:(RxObservable *)source
      withRxFunctionsFunc0:(id<RxFunctionsFunc0>)subjectFactory {
  RxInternalOperatorsOperatorMulticast_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_(self, guard, connectedSubject, waitingForConnect, source, subjectFactory);
  return self;
}

- (void)connectWithRxFunctionsAction1:(id<RxFunctionsAction1>)connection {
  @synchronized(guard_) {
    if (subscription_ != nil) {
      [((id<RxFunctionsAction1>) nil_chk(connection)) callWithId:guardedSubscription_];
      return;
    }
    else {
      RxSubjectsSubject *subject = [((id<RxFunctionsFunc0>) nil_chk(subjectFactory_)) call];
      JreStrongAssign(&subscription_, RxObserversSubscribers_fromWithRxObserver_(subject));
      JavaUtilConcurrentAtomicAtomicReference *gs = create_JavaUtilConcurrentAtomicAtomicReference_init();
      [gs setWithId:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOperatorMulticast_2_initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_(self, gs))];
      JreStrongAssign(&guardedSubscription_, [gs get]);
      for (RxSubscriber * __strong s in nil_chk(waitingForConnect_)) {
        [((RxSubjectsSubject *) nil_chk(subject)) unsafeSubscribeWithRxSubscriber:create_RxInternalOperatorsOperatorMulticast_3_initWithRxSubscriber_withRxSubscriber_(s, s)];
      }
      [waitingForConnect_ clear];
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(connectedSubject_)) setWithId:subject];
    }
  }
  [((id<RxFunctionsAction1>) nil_chk(connection)) callWithId:guardedSubscription_];
  RxSubscriber *sub;
  @synchronized(guard_) {
    sub = subscription_;
  }
  if (sub != nil) {
    [((RxObservable *) nil_chk((source_))) subscribeWithRxSubscriber:sub];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(guard_);
  RELEASE_(subjectFactory_);
  RELEASE_(connectedSubject_);
  RELEASE_(waitingForConnect_);
  RELEASE_(subscription_);
  RELEASE_(guardedSubscription_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObservable:withRxFunctionsFunc0:);
  methods[1].selector = @selector(initWithId:withJavaUtilConcurrentAtomicAtomicReference:withJavaUtilList:withRxObservable:withRxFunctionsFunc0:);
  methods[2].selector = @selector(connectWithRxFunctionsAction1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxObservable;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "guard_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "subjectFactory_", "LRxFunctionsFunc0;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "connectedSubject_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "waitingForConnect_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "subscription_", "LRxSubscriber;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "guardedSubscription_", "LRxSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservable;LRxFunctionsFunc0;", "(Lrx/Observable<+TT;>;Lrx/functions/Func0<+Lrx/subjects/Subject<-TT;+TR;>;>;)V", "LNSObject;LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilList;LRxObservable;LRxFunctionsFunc0;", "(Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicReference<Lrx/subjects/Subject<-TT;+TR;>;>;Ljava/util/List<Lrx/Subscriber<-TR;>;>;Lrx/Observable<+TT;>;Lrx/functions/Func0<+Lrx/subjects/Subject<-TT;+TR;>;>;)V", "connect", "LRxFunctionsAction1;", "(Lrx/functions/Action1<-Lrx/Subscription;>;)V", "Lrx/Observable<+TT;>;", "Lrx/functions/Func0<+Lrx/subjects/Subject<-TT;+TR;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/subjects/Subject<-TT;+TR;>;>;", "Ljava/util/List<Lrx/Subscriber<-TR;>;>;", "Lrx/Subscriber<TT;>;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lrx/observables/ConnectableObservable<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMulticast = { "OperatorMulticast", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 3, 7, -1, -1, -1, 12, -1 };
  return &_RxInternalOperatorsOperatorMulticast;
}

@end

void RxInternalOperatorsOperatorMulticast_initWithRxObservable_withRxFunctionsFunc0_(RxInternalOperatorsOperatorMulticast *self, RxObservable *source, id<RxFunctionsFunc0> subjectFactory) {
  RxInternalOperatorsOperatorMulticast_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_(self, create_NSObject_init(), create_JavaUtilConcurrentAtomicAtomicReference_init(), create_JavaUtilArrayList_init(), source, subjectFactory);
}

RxInternalOperatorsOperatorMulticast *new_RxInternalOperatorsOperatorMulticast_initWithRxObservable_withRxFunctionsFunc0_(RxObservable *source, id<RxFunctionsFunc0> subjectFactory) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMulticast, initWithRxObservable_withRxFunctionsFunc0_, source, subjectFactory)
}

RxInternalOperatorsOperatorMulticast *create_RxInternalOperatorsOperatorMulticast_initWithRxObservable_withRxFunctionsFunc0_(RxObservable *source, id<RxFunctionsFunc0> subjectFactory) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMulticast, initWithRxObservable_withRxFunctionsFunc0_, source, subjectFactory)
}

void RxInternalOperatorsOperatorMulticast_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_(RxInternalOperatorsOperatorMulticast *self, id guard, JavaUtilConcurrentAtomicAtomicReference *connectedSubject, id<JavaUtilList> waitingForConnect, RxObservable *source, id<RxFunctionsFunc0> subjectFactory) {
  RxObservablesConnectableObservable_initWithRxObservable_OnSubscribe_(self, create_RxInternalOperatorsOperatorMulticast_1_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_(guard, connectedSubject, waitingForConnect));
  JreStrongAssign(&self->guard_, guard);
  JreStrongAssign(&self->connectedSubject_, connectedSubject);
  JreStrongAssign(&self->waitingForConnect_, waitingForConnect);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->subjectFactory_, subjectFactory);
}

RxInternalOperatorsOperatorMulticast *new_RxInternalOperatorsOperatorMulticast_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_(id guard, JavaUtilConcurrentAtomicAtomicReference *connectedSubject, id<JavaUtilList> waitingForConnect, RxObservable *source, id<RxFunctionsFunc0> subjectFactory) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMulticast, initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_, guard, connectedSubject, waitingForConnect, source, subjectFactory)
}

RxInternalOperatorsOperatorMulticast *create_RxInternalOperatorsOperatorMulticast_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_(id guard, JavaUtilConcurrentAtomicAtomicReference *connectedSubject, id<JavaUtilList> waitingForConnect, RxObservable *source, id<RxFunctionsFunc0> subjectFactory) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMulticast, initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_withRxObservable_withRxFunctionsFunc0_, guard, connectedSubject, waitingForConnect, source, subjectFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMulticast)

@implementation RxInternalOperatorsOperatorMulticast_1

- (instancetype)initWithId:(id)capture$0
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
          withJavaUtilList:(id<JavaUtilList>)capture$2 {
  RxInternalOperatorsOperatorMulticast_1_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)callWithId:(RxSubscriber *)subscriber {
  @synchronized(val$guard_) {
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$connectedSubject_)) get] == nil) {
      [((id<JavaUtilList>) nil_chk(val$waitingForConnect_)) addWithId:subscriber];
    }
    else {
      [((RxSubjectsSubject *) nil_chk([val$connectedSubject_ get])) unsafeSubscribeWithRxSubscriber:subscriber];
    }
  }
}

- (void)dealloc {
  RELEASE_(val$guard_);
  RELEASE_(val$connectedSubject_);
  RELEASE_(val$waitingForConnect_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withJavaUtilConcurrentAtomicAtomicReference:withJavaUtilList:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$guard_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$connectedSubject_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$waitingForConnect_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-TR;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/subjects/Subject<-TT;+TR;>;>;", "Ljava/util/List<Lrx/Subscriber<-TR;>;>;", "LRxInternalOperatorsOperatorMulticast;", "initWithId:withJavaUtilConcurrentAtomicAtomicReference:withJavaUtilList:withRxObservable:withRxFunctionsFunc0:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMulticast_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 3, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorMulticast_1;
}

@end

void RxInternalOperatorsOperatorMulticast_1_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_(RxInternalOperatorsOperatorMulticast_1 *self, id capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<JavaUtilList> capture$2) {
  JreStrongAssign(&self->val$guard_, capture$0);
  JreStrongAssign(&self->val$connectedSubject_, capture$1);
  JreStrongAssign(&self->val$waitingForConnect_, capture$2);
  NSObject_init(self);
}

RxInternalOperatorsOperatorMulticast_1 *new_RxInternalOperatorsOperatorMulticast_1_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_(id capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<JavaUtilList> capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMulticast_1, initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOperatorMulticast_1 *create_RxInternalOperatorsOperatorMulticast_1_initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_(id capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<JavaUtilList> capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMulticast_1, initWithId_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilList_, capture$0, capture$1, capture$2)
}

@implementation RxInternalOperatorsOperatorMulticast_2

- (instancetype)initWithRxInternalOperatorsOperatorMulticast:(RxInternalOperatorsOperatorMulticast *)outer$
                 withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxInternalOperatorsOperatorMulticast_2_initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_(self, outer$, capture$0);
  return self;
}

- (void)call {
  id<RxSubscription> s;
  @synchronized(this$0_->guard_) {
    if (this$0_->guardedSubscription_ == [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$gs_)) get]) {
      s = this$0_->subscription_;
      JreStrongAssign(&this$0_->subscription_, nil);
      JreStrongAssign(&this$0_->guardedSubscription_, nil);
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(this$0_->connectedSubject_)) setWithId:nil];
    }
    else {
      return;
    }
  }
  if (s != nil) {
    [s unsubscribe];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$gs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorMulticast:withJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorMulticast;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$gs_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "Lrx/internal/operators/OperatorMulticast<TT;TR;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxInternalOperatorsOperatorMulticast;", "connectWithRxFunctionsAction1:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMulticast_2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_RxInternalOperatorsOperatorMulticast_2;
}

@end

void RxInternalOperatorsOperatorMulticast_2_initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorMulticast_2 *self, RxInternalOperatorsOperatorMulticast *outer$, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$gs_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorMulticast_2 *new_RxInternalOperatorsOperatorMulticast_2_initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorMulticast *outer$, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMulticast_2, initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_, outer$, capture$0)
}

RxInternalOperatorsOperatorMulticast_2 *create_RxInternalOperatorsOperatorMulticast_2_initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorMulticast *outer$, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMulticast_2, initWithRxInternalOperatorsOperatorMulticast_withJavaUtilConcurrentAtomicAtomicReference_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorMulticast_3

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
                    withRxSubscriber:(RxSubscriber *)subscriber {
  RxInternalOperatorsOperatorMulticast_3_initWithRxSubscriber_withRxSubscriber_(self, capture$0, subscriber);
  return self;
}

- (void)onNextWithId:(id)t {
  [((RxSubscriber *) nil_chk(val$s_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriber *) nil_chk(val$s_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((RxSubscriber *) nil_chk(val$s_)) onCompleted];
}

- (void)dealloc {
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:withRxSubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$s_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<*>;)V", "onNext", "LNSObject;", "(TR;)V", "onError", "LNSException;", "Lrx/Subscriber<-TR;>;", "LRxInternalOperatorsOperatorMulticast;", "connectWithRxFunctionsAction1:", "Lrx/Subscriber<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMulticast_3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 4, 1, 8, -1, 9, 10, -1 };
  return &_RxInternalOperatorsOperatorMulticast_3;
}

@end

void RxInternalOperatorsOperatorMulticast_3_initWithRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorMulticast_3 *self, RxSubscriber *capture$0, RxSubscriber *subscriber) {
  JreStrongAssign(&self->val$s_, capture$0);
  RxSubscriber_initWithRxSubscriber_(self, subscriber);
}

RxInternalOperatorsOperatorMulticast_3 *new_RxInternalOperatorsOperatorMulticast_3_initWithRxSubscriber_withRxSubscriber_(RxSubscriber *capture$0, RxSubscriber *subscriber) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMulticast_3, initWithRxSubscriber_withRxSubscriber_, capture$0, subscriber)
}

RxInternalOperatorsOperatorMulticast_3 *create_RxInternalOperatorsOperatorMulticast_3_initWithRxSubscriber_withRxSubscriber_(RxSubscriber *capture$0, RxSubscriber *subscriber) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMulticast_3, initWithRxSubscriber_withRxSubscriber_, capture$0, subscriber)
}
