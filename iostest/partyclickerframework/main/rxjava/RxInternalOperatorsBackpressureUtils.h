//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsBackpressureUtils")
#ifdef RESTRICT_RxInternalOperatorsBackpressureUtils
#define INCLUDE_ALL_RxInternalOperatorsBackpressureUtils 0
#else
#define INCLUDE_ALL_RxInternalOperatorsBackpressureUtils 1
#endif
#undef RESTRICT_RxInternalOperatorsBackpressureUtils

#if !defined (RxInternalOperatorsBackpressureUtils_) && (INCLUDE_ALL_RxInternalOperatorsBackpressureUtils || defined(INCLUDE_RxInternalOperatorsBackpressureUtils))
#define RxInternalOperatorsBackpressureUtils_

@class JavaUtilConcurrentAtomicAtomicLong;
@class RxSubscriber;
@protocol JavaUtilQueue;
@protocol RxFunctionsFunc1;

@interface RxInternalOperatorsBackpressureUtils : NSObject

#pragma mark Public

+ (jlong)addCapWithLong:(jlong)a
               withLong:(jlong)b;

+ (jlong)getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                                       withLong:(jlong)n;

+ (jlong)multiplyCapWithLong:(jlong)a
                    withLong:(jlong)b;

+ (void)postCompleteDoneWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                             withJavaUtilQueue:(id<JavaUtilQueue>)queue
                                              withRxSubscriber:(RxSubscriber *)actual;

+ (void)postCompleteDoneWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                             withJavaUtilQueue:(id<JavaUtilQueue>)queue
                                              withRxSubscriber:(RxSubscriber *)actual
                                          withRxFunctionsFunc1:(id<RxFunctionsFunc1>)exitTransform;

+ (jboolean)postCompleteRequestWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                                             withLong:(jlong)n
                                                    withJavaUtilQueue:(id<JavaUtilQueue>)queue
                                                     withRxSubscriber:(RxSubscriber *)actual;

+ (jboolean)postCompleteRequestWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                                             withLong:(jlong)n
                                                    withJavaUtilQueue:(id<JavaUtilQueue>)queue
                                                     withRxSubscriber:(RxSubscriber *)actual
                                                 withRxFunctionsFunc1:(id<RxFunctionsFunc1>)exitTransform;

+ (jlong)producedWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                               withLong:(jlong)n;

+ (jboolean)validateWithLong:(jlong)n;

#pragma mark Package-Private

+ (void)postCompleteDrainWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                              withJavaUtilQueue:(id<JavaUtilQueue>)queue
                                               withRxSubscriber:(RxSubscriber *)subscriber
                                           withRxFunctionsFunc1:(id<RxFunctionsFunc1>)exitTransform;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBackpressureUtils)

inline jlong RxInternalOperatorsBackpressureUtils_get_COMPLETED_MASK();
#define RxInternalOperatorsBackpressureUtils_COMPLETED_MASK ((jlong) 0x8000000000000000LL)
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsBackpressureUtils, COMPLETED_MASK, jlong)

inline jlong RxInternalOperatorsBackpressureUtils_get_REQUESTED_MASK();
#define RxInternalOperatorsBackpressureUtils_REQUESTED_MASK 9223372036854775807LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsBackpressureUtils, REQUESTED_MASK, jlong)

FOUNDATION_EXPORT jlong RxInternalOperatorsBackpressureUtils_getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_(JavaUtilConcurrentAtomicAtomicLong *requested, jlong n);

FOUNDATION_EXPORT jlong RxInternalOperatorsBackpressureUtils_multiplyCapWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jlong RxInternalOperatorsBackpressureUtils_addCapWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT void RxInternalOperatorsBackpressureUtils_postCompleteDoneWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilQueue_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicLong *requested, id<JavaUtilQueue> queue, RxSubscriber *actual);

FOUNDATION_EXPORT jboolean RxInternalOperatorsBackpressureUtils_postCompleteRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_withJavaUtilQueue_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicLong *requested, jlong n, id<JavaUtilQueue> queue, RxSubscriber *actual);

FOUNDATION_EXPORT void RxInternalOperatorsBackpressureUtils_postCompleteDoneWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilQueue_withRxSubscriber_withRxFunctionsFunc1_(JavaUtilConcurrentAtomicAtomicLong *requested, id<JavaUtilQueue> queue, RxSubscriber *actual, id<RxFunctionsFunc1> exitTransform);

FOUNDATION_EXPORT jboolean RxInternalOperatorsBackpressureUtils_postCompleteRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_withJavaUtilQueue_withRxSubscriber_withRxFunctionsFunc1_(JavaUtilConcurrentAtomicAtomicLong *requested, jlong n, id<JavaUtilQueue> queue, RxSubscriber *actual, id<RxFunctionsFunc1> exitTransform);

FOUNDATION_EXPORT void RxInternalOperatorsBackpressureUtils_postCompleteDrainWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilQueue_withRxSubscriber_withRxFunctionsFunc1_(JavaUtilConcurrentAtomicAtomicLong *requested, id<JavaUtilQueue> queue, RxSubscriber *subscriber, id<RxFunctionsFunc1> exitTransform);

FOUNDATION_EXPORT jlong RxInternalOperatorsBackpressureUtils_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(JavaUtilConcurrentAtomicAtomicLong *requested, jlong n);

FOUNDATION_EXPORT jboolean RxInternalOperatorsBackpressureUtils_validateWithLong_(jlong n);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBackpressureUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsBackpressureUtils")
