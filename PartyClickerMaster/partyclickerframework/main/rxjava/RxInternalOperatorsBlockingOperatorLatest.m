//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxInternalOperatorsBlockingOperatorLatest.h"
#include "RxNotification.h"
#include "RxObservable.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/Semaphore.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "java/util/function/Consumer.h"

@interface RxInternalOperatorsBlockingOperatorLatest ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorLatest_init(RxInternalOperatorsBlockingOperatorLatest *self);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorLatest *new_RxInternalOperatorsBlockingOperatorLatest_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorLatest *create_RxInternalOperatorsBlockingOperatorLatest_init();

@interface RxInternalOperatorsBlockingOperatorLatest_1 : NSObject < JavaLangIterable > {
 @public
  RxObservable *val$source_;
}

- (instancetype)initWithRxObservable:(RxObservable *)capture$0;

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorLatest_1)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorLatest_1_initWithRxObservable_(RxInternalOperatorsBlockingOperatorLatest_1 *self, RxObservable *capture$0);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorLatest_1 *new_RxInternalOperatorsBlockingOperatorLatest_1_initWithRxObservable_(RxObservable *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorLatest_1 *create_RxInternalOperatorsBlockingOperatorLatest_1_initWithRxObservable_(RxObservable *capture$0);

@implementation RxInternalOperatorsBlockingOperatorLatest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsBlockingOperatorLatest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaLangIterable>)latestWithRxObservable:(RxObservable *)source {
  return RxInternalOperatorsBlockingOperatorLatest_latestWithRxObservable_(source);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(latestWithRxObservable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "latest", "LRxObservable;", "<T:Ljava/lang/Object;>(Lrx/Observable<+TT;>;)Ljava/lang/Iterable<TT;>;", "LRxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator;" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorLatest = { "BlockingOperatorLatest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, 3, -1, -1, -1 };
  return &_RxInternalOperatorsBlockingOperatorLatest;
}

@end

void RxInternalOperatorsBlockingOperatorLatest_init(RxInternalOperatorsBlockingOperatorLatest *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxInternalOperatorsBlockingOperatorLatest *new_RxInternalOperatorsBlockingOperatorLatest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorLatest, init)
}

RxInternalOperatorsBlockingOperatorLatest *create_RxInternalOperatorsBlockingOperatorLatest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorLatest, init)
}

id<JavaLangIterable> RxInternalOperatorsBlockingOperatorLatest_latestWithRxObservable_(RxObservable *source) {
  RxInternalOperatorsBlockingOperatorLatest_initialize();
  return create_RxInternalOperatorsBlockingOperatorLatest_1_initWithRxObservable_(source);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorLatest)

@implementation RxInternalOperatorsBlockingOperatorLatest_1

- (instancetype)initWithRxObservable:(RxObservable *)capture$0 {
  RxInternalOperatorsBlockingOperatorLatest_1_initWithRxObservable_(self, capture$0);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator *lio = create_RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk((val$source_))) materialize])) subscribeWithRxSubscriber:lio];
  return lio;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(val$source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObservable:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$source_", "LRxObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TT;>;", "Lrx/Observable<+TT;>;", "LRxInternalOperatorsBlockingOperatorLatest;", "latestWithRxObservable:", "Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorLatest_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsBlockingOperatorLatest_1;
}

@end

void RxInternalOperatorsBlockingOperatorLatest_1_initWithRxObservable_(RxInternalOperatorsBlockingOperatorLatest_1 *self, RxObservable *capture$0) {
  JreStrongAssign(&self->val$source_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsBlockingOperatorLatest_1 *new_RxInternalOperatorsBlockingOperatorLatest_1_initWithRxObservable_(RxObservable *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorLatest_1, initWithRxObservable_, capture$0)
}

RxInternalOperatorsBlockingOperatorLatest_1 *create_RxInternalOperatorsBlockingOperatorLatest_1_initWithRxObservable_(RxObservable *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorLatest_1, initWithRxObservable_, capture$0)
}

@implementation RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onNextWithId:(RxNotification *)args {
  jboolean wasNotAvailable = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) getAndSetWithId:args] == nil;
  if (wasNotAvailable) {
    [((JavaUtilConcurrentSemaphore *) nil_chk(notify_)) release__];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
}

- (jboolean)hasNext {
  if (iteratorNotification_ != nil && [iteratorNotification_ isOnError]) {
    @throw RxExceptionsExceptions_propagateWithNSException_([iteratorNotification_ getThrowable]);
  }
  if (iteratorNotification_ == nil || ![iteratorNotification_ isOnCompleted]) {
    if (iteratorNotification_ == nil) {
      @try {
        [((JavaUtilConcurrentSemaphore *) nil_chk(notify_)) acquire];
      }
      @catch (JavaLangInterruptedException *ex) {
        [self unsubscribe];
        [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
        JreStrongAssign(&iteratorNotification_, RxNotification_createOnErrorWithNSException_(ex));
        @throw RxExceptionsExceptions_propagateWithNSException_(ex);
      }
      RxNotification *n = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) getAndSetWithId:nil];
      JreStrongAssign(&iteratorNotification_, n);
      if ([((RxNotification *) nil_chk(iteratorNotification_)) isOnError]) {
        @throw RxExceptionsExceptions_propagateWithNSException_([((RxNotification *) nil_chk(iteratorNotification_)) getThrowable]);
      }
    }
  }
  return ![((RxNotification *) nil_chk(iteratorNotification_)) isOnCompleted];
}

- (id)next {
  if ([self hasNext]) {
    if ([((RxNotification *) nil_chk(iteratorNotification_)) isOnNext]) {
      id v = [((RxNotification *) nil_chk(iteratorNotification_)) getValue];
      JreStrongAssign(&iteratorNotification_, nil);
      return v;
    }
  }
  @throw create_JavaUtilNoSuchElementException_init();
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Read-only iterator.");
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(notify_);
  RELEASE_(value_);
  RELEASE_(iteratorNotification_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(hasNext);
  methods[5].selector = @selector(next);
  methods[6].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "notify_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "iteratorNotification_", "LRxNotification;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LRxNotification;", "(Lrx/Notification<+TT;>;)V", "onError", "LNSException;", "()TT;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Notification<+TT;>;>;", "Lrx/Notification<+TT;>;", "LRxInternalOperatorsBlockingOperatorLatest;", "<T:Ljava/lang/Object;>Lrx/Subscriber<Lrx/Notification<+TT;>;>;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator = { "LatestObserverIterator", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 7, 3, 8, -1, -1, 9, -1 };
  return &_RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator;
}

@end

void RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_init(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator *self) {
  RxSubscriber_init(self);
  JreStrongAssignAndConsume(&self->notify_, new_JavaUtilConcurrentSemaphore_initWithInt_(0));
  JreStrongAssignAndConsume(&self->value_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator *new_RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator, init)
}

RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator *create_RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator)
