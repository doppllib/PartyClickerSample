//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/query/src/main/java/co/touchlab/squeaky/stmt/query/SimpleComparison.java
//

#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyStmtJoinAlias.h"
#include "CoTouchlabSqueakyStmtQueryBaseComparison.h"
#include "CoTouchlabSqueakyStmtQuerySimpleComparison.h"
#include "J2ObjC_source.h"

@interface CoTouchlabSqueakyStmtQuerySimpleComparison () {
 @public
  NSString *operation_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyStmtQuerySimpleComparison, operation_, NSString *)

NSString *CoTouchlabSqueakyStmtQuerySimpleComparison_EQUAL_TO_OPERATION = @"=";
NSString *CoTouchlabSqueakyStmtQuerySimpleComparison_GREATER_THAN_OPERATION = @">";
NSString *CoTouchlabSqueakyStmtQuerySimpleComparison_GREATER_THAN_EQUAL_TO_OPERATION = @">=";
NSString *CoTouchlabSqueakyStmtQuerySimpleComparison_LESS_THAN_OPERATION = @"<";
NSString *CoTouchlabSqueakyStmtQuerySimpleComparison_LESS_THAN_EQUAL_TO_OPERATION = @"<=";
NSString *CoTouchlabSqueakyStmtQuerySimpleComparison_LIKE_OPERATION = @"LIKE";
NSString *CoTouchlabSqueakyStmtQuerySimpleComparison_NOT_EQUAL_TO_OPERATION = @"<>";

@implementation CoTouchlabSqueakyStmtQuerySimpleComparison

- (instancetype)initWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                                 withId:(id)value
                                           withNSString:(NSString *)operation
                     withCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias {
  CoTouchlabSqueakyStmtQuerySimpleComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withNSString_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, value, operation, joinAlias);
  return self;
}

- (NSString *)getOperation {
  return JreStrcat("$$", operation_, @" ?");
}

- (void)dealloc {
  RELEASE_(operation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCoTouchlabSqueakyFieldFieldType:withId:withNSString:withCoTouchlabSqueakyStmtJoinAlias:);
  methods[1].selector = @selector(getOperation);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EQUAL_TO_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "GREATER_THAN_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "GREATER_THAN_EQUAL_TO_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "LESS_THAN_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "LESS_THAN_EQUAL_TO_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "LIKE_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "NOT_EQUAL_TO_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "operation_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldFieldType;LNSObject;LNSString;LCoTouchlabSqueakyStmtJoinAlias;", "LJavaSqlSQLException;", &CoTouchlabSqueakyStmtQuerySimpleComparison_EQUAL_TO_OPERATION, &CoTouchlabSqueakyStmtQuerySimpleComparison_GREATER_THAN_OPERATION, &CoTouchlabSqueakyStmtQuerySimpleComparison_GREATER_THAN_EQUAL_TO_OPERATION, &CoTouchlabSqueakyStmtQuerySimpleComparison_LESS_THAN_OPERATION, &CoTouchlabSqueakyStmtQuerySimpleComparison_LESS_THAN_EQUAL_TO_OPERATION, &CoTouchlabSqueakyStmtQuerySimpleComparison_LIKE_OPERATION, &CoTouchlabSqueakyStmtQuerySimpleComparison_NOT_EQUAL_TO_OPERATION };
  static const J2ObjcClassInfo _CoTouchlabSqueakyStmtQuerySimpleComparison = { "SimpleComparison", "co.touchlab.squeaky.stmt.query", ptrTable, methods, fields, 7, 0x1, 2, 8, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyStmtQuerySimpleComparison;
}

@end

void CoTouchlabSqueakyStmtQuerySimpleComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withNSString_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyStmtQuerySimpleComparison *self, CoTouchlabSqueakyFieldFieldType *fieldType, id value, NSString *operation, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  CoTouchlabSqueakyStmtQueryBaseComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, value, true, joinAlias);
  JreStrongAssign(&self->operation_, operation);
}

CoTouchlabSqueakyStmtQuerySimpleComparison *new_CoTouchlabSqueakyStmtQuerySimpleComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withNSString_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, id value, NSString *operation, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyStmtQuerySimpleComparison, initWithCoTouchlabSqueakyFieldFieldType_withId_withNSString_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, value, operation, joinAlias)
}

CoTouchlabSqueakyStmtQuerySimpleComparison *create_CoTouchlabSqueakyStmtQuerySimpleComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withNSString_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, id value, NSString *operation, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyStmtQuerySimpleComparison, initWithCoTouchlabSqueakyFieldFieldType_withId_withNSString_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, value, operation, joinAlias)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyStmtQuerySimpleComparison)
