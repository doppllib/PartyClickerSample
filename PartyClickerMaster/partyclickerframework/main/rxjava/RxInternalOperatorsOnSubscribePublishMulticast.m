//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxInternalOperatorsBackpressureUtils.h"
#include "RxInternalOperatorsOnSubscribePublishMulticast.h"
#include "RxInternalUtilAtomicSpscAtomicArrayQueue.h"
#include "RxInternalUtilUnsafeSpscArrayQueue.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong RxInternalOperatorsOnSubscribePublishMulticast_get_serialVersionUID();
#define RxInternalOperatorsOnSubscribePublishMulticast_serialVersionUID -3741892510772238743LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsOnSubscribePublishMulticast, serialVersionUID, jlong)

inline jlong RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_get_serialVersionUID();
#define RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_serialVersionUID 960704844171597367LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOnSubscribePublishMulticast)

IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_EMPTY;
IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED;

@implementation RxInternalOperatorsOnSubscribePublishMulticast

- (instancetype)initWithInt:(jint)prefetch
                withBoolean:(jboolean)delayError {
  RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(self, prefetch, delayError);
  return self;
}

- (void)callWithId:(RxSubscriber *)t {
  RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *pp = create_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(t, self);
  [((RxSubscriber *) nil_chk(t)) addWithRxSubscription:pp];
  [t setProducerWithRxProducer:pp];
  if ([self addWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:pp]) {
    if ([pp isUnsubscribed]) {
      [self removeWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:pp];
    }
    else {
      [self drain];
    }
  }
  else {
    NSException *e = error_;
    if (e != nil) {
      [t onErrorWithNSException:e];
    }
    else {
      [t onCompleted];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (![((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:t]) {
    [((RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *) nil_chk(parent_)) unsubscribe];
    JreStrongAssignAndConsume(&error_, new_RxExceptionsMissingBackpressureException_initWithNSString_(@"Queue full?!"));
    JreAssignVolatileBoolean(&done_, true);
  }
  [self drain];
}

- (void)onErrorWithNSException:(NSException *)e {
  JreStrongAssign(&error_, e);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onCompleted {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)setProducerWithRxProducer:(id<RxProducer>)p {
  JreVolatileStrongAssign(&self->producer_, p);
  [((id<RxProducer>) nil_chk(p)) requestWithLong:prefetch_];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  id<JavaUtilQueue> q = queue_;
  jint missed = 0;
  for (; ; ) {
    jlong r = JavaLangLong_MAX_VALUE;
    IOSObjectArray *a = JreLoadVolatileId(&subscribers_);
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    {
      IOSObjectArray *a__ = a;
      RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *b__ = a__->buffer_;
      RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *inner = *b__++;
        r = JavaLangMath_minWithLong_withLong_(r, [((RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *) nil_chk(inner)) get]);
      }
    }
    if (n != 0) {
      jlong e = 0LL;
      while (e != r) {
        jboolean d = JreLoadVolatileBoolean(&done_);
        id v = [((id<JavaUtilQueue>) nil_chk(q)) poll];
        jboolean empty = v == nil;
        if ([self checkTerminatedWithBoolean:d withBoolean:empty]) {
          return;
        }
        if (empty) {
          break;
        }
        {
          IOSObjectArray *a__ = a;
          RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *b__ = a__->buffer_;
          RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *inner = *b__++;
            [((RxSubscriber *) nil_chk(((RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *) nil_chk(inner))->actual_)) onNextWithId:v];
          }
        }
        e++;
      }
      if (e == r) {
        if ([self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((id<JavaUtilQueue>) nil_chk(q)) isEmpty]]) {
          return;
        }
      }
      if (e != 0LL) {
        id<RxProducer> p = JreLoadVolatileId(&producer_);
        if (p != nil) {
          [p requestWithLong:e];
        }
        {
          IOSObjectArray *a__ = a;
          RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *b__ = a__->buffer_;
          RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *inner = *b__++;
            RxInternalOperatorsBackpressureUtils_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(inner, e);
          }
        }
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty {
  if (d) {
    if (delayError_) {
      if (empty) {
        IOSObjectArray *a = [self terminate];
        NSException *ex = error_;
        if (ex != nil) {
          {
            IOSObjectArray *a__ = a;
            RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *inner = *b__++;
              [((RxSubscriber *) nil_chk(((RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *) nil_chk(inner))->actual_)) onErrorWithNSException:ex];
            }
          }
        }
        else {
          {
            IOSObjectArray *a__ = a;
            RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *inner = *b__++;
              [((RxSubscriber *) nil_chk(((RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *) nil_chk(inner))->actual_)) onCompleted];
            }
          }
        }
        return true;
      }
    }
    else {
      NSException *ex = error_;
      if (ex != nil) {
        [((id<JavaUtilQueue>) nil_chk(queue_)) clear];
        IOSObjectArray *a = [self terminate];
        {
          IOSObjectArray *a__ = a;
          RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *inner = *b__++;
            [((RxSubscriber *) nil_chk(((RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *) nil_chk(inner))->actual_)) onErrorWithNSException:ex];
          }
        }
        return true;
      }
      else if (empty) {
        IOSObjectArray *a = [self terminate];
        {
          IOSObjectArray *a__ = a;
          RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *inner = *b__++;
            [((RxSubscriber *) nil_chk(((RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *) nil_chk(inner))->actual_)) onCompleted];
          }
        }
        return true;
      }
    }
  }
  return false;
}

- (IOSObjectArray *)terminate {
  IOSObjectArray *a = JreLoadVolatileId(&subscribers_);
  if (a != RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED) {
    @synchronized(self) {
      a = JreLoadVolatileId(&subscribers_);
      if (a != RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED) {
        JreVolatileStrongAssign(&subscribers_, RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED);
      }
    }
  }
  return a;
}

- (jboolean)addWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *)inner {
  IOSObjectArray *a = JreLoadVolatileId(&subscribers_);
  if (a == RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED) {
    return false;
  }
  @synchronized(self) {
    a = JreLoadVolatileId(&subscribers_);
    if (a == RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, inner);
    JreVolatileStrongAssign(&subscribers_, b);
    return true;
  }
}

- (void)removeWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *)inner {
  IOSObjectArray *a = JreLoadVolatileId(&subscribers_);
  if (a == RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED || a == RxInternalOperatorsOnSubscribePublishMulticast_EMPTY) {
    return;
  }
  @synchronized(self) {
    a = JreLoadVolatileId(&subscribers_);
    if (a == RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED || a == RxInternalOperatorsOnSubscribePublishMulticast_EMPTY) {
      return;
    }
    jint j = -1;
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == inner) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = RxInternalOperatorsOnSubscribePublishMulticast_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    JreVolatileStrongAssign(&subscribers_, b);
  }
}

- (RxSubscriber *)subscriber {
  return parent_;
}

- (void)unsubscribe {
  [((RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *) nil_chk(parent_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *) nil_chk(parent_)) isUnsubscribed];
}

- (void)__javaClone:(RxInternalOperatorsOnSubscribePublishMulticast *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&producer_, &original->producer_);
  JreCloneVolatileStrong(&subscribers_, &original->subscribers_);
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(parent_);
  RELEASE_(error_);
  JreReleaseVolatile(&producer_);
  JreReleaseVolatile(&subscribers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "[LRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;", 0x0, -1, -1, -1, 13, -1, -1 },
    { NULL, "Z", 0x0, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x0, 17, 15, -1, 18, -1, -1 },
    { NULL, "LRxSubscriber;", 0x1, -1, -1, -1, 19, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withBoolean:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onCompleted);
  methods[5].selector = @selector(setProducerWithRxProducer:);
  methods[6].selector = @selector(drain);
  methods[7].selector = @selector(checkTerminatedWithBoolean:withBoolean:);
  methods[8].selector = @selector(terminate);
  methods[9].selector = @selector(addWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:);
  methods[10].selector = @selector(removeWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:);
  methods[11].selector = @selector(subscriber);
  methods[12].selector = @selector(unsubscribe);
  methods[13].selector = @selector(isUnsubscribed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalOperatorsOnSubscribePublishMulticast_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LRxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producer_", "LRxProducer;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "subscribers_", "[LRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;", .constantValue.asLong = 0, 0x40, -1, -1, 22, -1 },
    { "EMPTY", "[LRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;", .constantValue.asLong = 0, 0x18, -1, 23, 24, -1 },
    { "TERMINATED", "[LRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;", .constantValue.asLong = 0, 0x18, -1, 25, 24, -1 },
  };
  static const void *ptrTable[] = { "IZ", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "setProducer", "LRxProducer;", "checkTerminated", "ZZ", "()[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer<TT;>;", "add", "LRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;", "(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer<TT;>;)Z", "remove", "(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer<TT;>;)V", "()Lrx/Subscriber<TT;>;", "Ljava/util/Queue<TT;>;", "Lrx/internal/operators/OnSubscribePublishMulticast$ParentSubscriber<TT;>;", "[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer<TT;>;", &RxInternalOperatorsOnSubscribePublishMulticast_EMPTY, "[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer<*>;", &RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED, "LRxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber;LRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lrx/Observable$OnSubscribe<TT;>;Lrx/Observer<TT;>;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribePublishMulticast = { "OnSubscribePublishMulticast", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 14, 11, -1, 26, -1, 27, -1 };
  return &_RxInternalOperatorsOnSubscribePublishMulticast;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOnSubscribePublishMulticast class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOnSubscribePublishMulticast_EMPTY, [IOSObjectArray newArrayWithLength:0 type:RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_class_()]);
    JreStrongAssignAndConsume(&RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_class_()]);
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOnSubscribePublishMulticast)
  }
}

@end

void RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(RxInternalOperatorsOnSubscribePublishMulticast *self, jint prefetch, jboolean delayError) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  if (prefetch <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"prefetch > 0 required but it was ", prefetch));
  }
  self->prefetch_ = prefetch;
  self->delayError_ = delayError;
  if (RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    JreStrongAssignAndConsume(&self->queue_, new_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(prefetch));
  }
  else {
    JreStrongAssignAndConsume(&self->queue_, new_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(prefetch));
  }
  JreVolatileStrongAssign(&self->subscribers_, RxInternalOperatorsOnSubscribePublishMulticast_EMPTY);
  JreStrongAssignAndConsume(&self->parent_, new_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(self));
}

RxInternalOperatorsOnSubscribePublishMulticast *new_RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(jint prefetch, jboolean delayError) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribePublishMulticast, initWithInt_withBoolean_, prefetch, delayError)
}

RxInternalOperatorsOnSubscribePublishMulticast *create_RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(jint prefetch, jboolean delayError) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribePublishMulticast, initWithInt_withBoolean_, prefetch, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribePublishMulticast)

@implementation RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber

- (instancetype)initWithRxInternalOperatorsOnSubscribePublishMulticast:(RxInternalOperatorsOnSubscribePublishMulticast *)state {
  RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(self, state);
  return self;
}

- (void)onNextWithId:(id)t {
  [((RxInternalOperatorsOnSubscribePublishMulticast *) nil_chk(state_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxInternalOperatorsOnSubscribePublishMulticast *) nil_chk(state_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((RxInternalOperatorsOnSubscribePublishMulticast *) nil_chk(state_)) onCompleted];
}

- (void)setProducerWithRxProducer:(id<RxProducer>)p {
  [((RxInternalOperatorsOnSubscribePublishMulticast *) nil_chk(state_)) setProducerWithRxProducer:p];
}

- (void)dealloc {
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOnSubscribePublishMulticast:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(setProducerWithRxProducer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LRxInternalOperatorsOnSubscribePublishMulticast;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribePublishMulticast;", "(Lrx/internal/operators/OnSubscribePublishMulticast<TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "setProducer", "LRxProducer;", "Lrx/internal/operators/OnSubscribePublishMulticast<TT;>;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber = { "ParentSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 5, 1, 0, -1, -1, 10, -1 };
  return &_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber;
}

@end

void RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *self, RxInternalOperatorsOnSubscribePublishMulticast *state) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->state_, state);
}

RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *new_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast *state) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber, initWithRxInternalOperatorsOnSubscribePublishMulticast_, state)
}

RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *create_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast *state) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber, initWithRxInternalOperatorsOnSubscribePublishMulticast_, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber)

@implementation RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
withRxInternalOperatorsOnSubscribePublishMulticast:(RxInternalOperatorsOnSubscribePublishMulticast *)parent {
  RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(self, actual, parent);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (n < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"n >= 0 required but it was ", n));
  }
  else if (n != 0) {
    RxInternalOperatorsBackpressureUtils_getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
    [((RxInternalOperatorsOnSubscribePublishMulticast *) nil_chk(parent_)) drain];
  }
}

- (jboolean)isUnsubscribed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) get];
}

- (void)unsubscribe {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxInternalOperatorsOnSubscribePublishMulticast *) nil_chk(parent_)) removeWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:self];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(parent_);
  RELEASE_(once_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:withRxInternalOperatorsOnSubscribePublishMulticast:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(isUnsubscribed);
  methods[3].selector = @selector(unsubscribe);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "parent_", "LRxInternalOperatorsOnSubscribePublishMulticast;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LRxInternalOperatorsOnSubscribePublishMulticast;", "(Lrx/Subscriber<-TT;>;Lrx/internal/operators/OnSubscribePublishMulticast<TT;>;)V", "request", "J", "Lrx/Subscriber<-TT;>;", "Lrx/internal/operators/OnSubscribePublishMulticast<TT;>;", "LRxInternalOperatorsOnSubscribePublishMulticast;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicLong;Lrx/Producer;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer = { "PublishProducer", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 4, 4, 6, -1, -1, 7, -1 };
  return &_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;
}

@end

void RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *self, RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *new_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_, actual, parent)
}

RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *create_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer)
