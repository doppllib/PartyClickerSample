//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/types/EnumStringType.java
//

#include "AndroidDatabaseCursor.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseEnumType.h"
#include "CoTouchlabSqueakyFieldTypesEnumStringType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/sql/SQLException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface CoTouchlabSqueakyFieldTypesEnumStringType ()

- (instancetype)init;

@end

inline CoTouchlabSqueakyFieldTypesEnumStringType *CoTouchlabSqueakyFieldTypesEnumStringType_get_singleTon();
static CoTouchlabSqueakyFieldTypesEnumStringType *CoTouchlabSqueakyFieldTypesEnumStringType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesEnumStringType, singleTon, CoTouchlabSqueakyFieldTypesEnumStringType *)

__attribute__((unused)) static void CoTouchlabSqueakyFieldTypesEnumStringType_init(CoTouchlabSqueakyFieldTypesEnumStringType *self);

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesEnumStringType *new_CoTouchlabSqueakyFieldTypesEnumStringType_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesEnumStringType *create_CoTouchlabSqueakyFieldTypesEnumStringType_init();

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesEnumStringType)

@implementation CoTouchlabSqueakyFieldTypesEnumStringType

+ (CoTouchlabSqueakyFieldTypesEnumStringType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesEnumStringType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesEnumStringType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesEnumStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return [((id<AndroidDatabaseCursor>) nil_chk(results)) getStringWithInt:columnPos];
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  if (fieldType == nil) {
    return sqlArg;
  }
  NSString *value = (NSString *) cast_chk(sqlArg, [NSString class]);
  id<JavaUtilMap> enumStringMap = (id<JavaUtilMap>) cast_check([fieldType getDataTypeConfigObj], JavaUtilMap_class_());
  if (enumStringMap == nil) {
    return CoTouchlabSqueakyFieldTypesBaseEnumType_enumValWithCoTouchlabSqueakyFieldFieldType_withId_withJavaLangEnum_(fieldType, value, nil);
  }
  else {
    return CoTouchlabSqueakyFieldTypesBaseEnumType_enumValWithCoTouchlabSqueakyFieldFieldType_withId_withJavaLangEnum_(fieldType, value, [enumStringMap getWithId:value]);
  }
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  return defaultStr;
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj {
  JavaLangEnum *enumVal = (JavaLangEnum *) cast_chk(obj, [JavaLangEnum class]);
  return [((JavaLangEnum *) nil_chk(enumVal)) name];
}

- (id)makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  id<JavaUtilMap> enumStringMap = create_JavaUtilHashMap_init();
  IOSObjectArray *constants = (IOSObjectArray *) cast_check([((IOSClass *) nil_chk([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getFieldType])) getEnumConstants], IOSClass_arrayType(JavaLangEnum_class_(), 1));
  if (constants == nil) {
    @throw create_JavaSqlSQLException_initWithNSString_(JreStrcat("$@$@", @"Field ", fieldType, @" improperly configured as type ", self));
  }
  {
    IOSObjectArray *a__ = constants;
    JavaLangEnum * const *b__ = a__->buffer_;
    JavaLangEnum * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangEnum *enumVal = *b__++;
      [enumStringMap putWithId:[((JavaLangEnum *) nil_chk(enumVal)) name] withId:enumVal];
    }
  }
  return enumStringMap;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCoTouchlabSqueakyFieldTypesEnumStringType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 12, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getSingleton);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:);
  methods[3].selector = @selector(resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  methods[4].selector = @selector(sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:);
  methods[5].selector = @selector(parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:);
  methods[6].selector = @selector(javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:);
  methods[7].selector = @selector(makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "singleTon", "LCoTouchlabSqueakyFieldTypesEnumStringType;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldSqlType;[LIOSClass;", "(Lco/touchlab/squeaky/field/SqlType;[Ljava/lang/Class<*>;)V", "resultToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LAndroidDatabaseCursor;I", "LJavaSqlSQLException;", "sqlArgToJava", "LCoTouchlabSqueakyFieldFieldType;LNSObject;I", "parseDefaultString", "LCoTouchlabSqueakyFieldFieldType;LNSString;", "javaToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LNSObject;", "makeConfigObject", "LCoTouchlabSqueakyFieldFieldType;", &CoTouchlabSqueakyFieldTypesEnumStringType_singleTon };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesEnumStringType = { "EnumStringType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesEnumStringType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesEnumStringType class]) {
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesEnumStringType_singleTon, new_CoTouchlabSqueakyFieldTypesEnumStringType_init());
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesEnumStringType)
  }
}

@end

CoTouchlabSqueakyFieldTypesEnumStringType *CoTouchlabSqueakyFieldTypesEnumStringType_getSingleton() {
  CoTouchlabSqueakyFieldTypesEnumStringType_initialize();
  return CoTouchlabSqueakyFieldTypesEnumStringType_singleTon;
}

void CoTouchlabSqueakyFieldTypesEnumStringType_init(CoTouchlabSqueakyFieldTypesEnumStringType *self) {
  CoTouchlabSqueakyFieldTypesBaseEnumType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, STRING), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangEnum_class_() } count:1 type:IOSClass_class_()]);
}

CoTouchlabSqueakyFieldTypesEnumStringType *new_CoTouchlabSqueakyFieldTypesEnumStringType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesEnumStringType, init)
}

CoTouchlabSqueakyFieldTypesEnumStringType *create_CoTouchlabSqueakyFieldTypesEnumStringType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesEnumStringType, init)
}

void CoTouchlabSqueakyFieldTypesEnumStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesEnumStringType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesBaseEnumType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
}

CoTouchlabSqueakyFieldTypesEnumStringType *new_CoTouchlabSqueakyFieldTypesEnumStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesEnumStringType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

CoTouchlabSqueakyFieldTypesEnumStringType *create_CoTouchlabSqueakyFieldTypesEnumStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesEnumStringType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesEnumStringType)
