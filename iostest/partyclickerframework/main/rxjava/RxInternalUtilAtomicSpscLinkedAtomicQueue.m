//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalUtilAtomicBaseLinkedAtomicQueue.h"
#include "RxInternalUtilAtomicLinkedQueueNode.h"
#include "RxInternalUtilAtomicSpscLinkedAtomicQueue.h"
#include "java/lang/NullPointerException.h"

@implementation RxInternalUtilAtomicSpscLinkedAtomicQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilAtomicSpscLinkedAtomicQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)offerWithId:(id)nextValue {
  if (nextValue == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"null elements not allowed");
  }
  RxInternalUtilAtomicLinkedQueueNode *nextNode = create_RxInternalUtilAtomicLinkedQueueNode_initWithId_(nextValue);
  [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk([self lpProducerNode])) soNextWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
  [self spProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
  return true;
}

- (id)poll {
  RxInternalUtilAtomicLinkedQueueNode *nextNode = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk([self lpConsumerNode])) lvNext];
  if (nextNode != nil) {
    id nextValue = [nextNode getAndNullValue];
    [self spConsumerNodeWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
    return nextValue;
  }
  return nil;
}

- (id)peek {
  RxInternalUtilAtomicLinkedQueueNode *nextNode = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk([self lpConsumerNode])) lvNext];
  if (nextNode != nil) {
    return [nextNode lpValue];
  }
  else {
    return nil;
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(offerWithId:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(peek);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "offer", "LNSObject;", "(TE;)Z", "()TE;", "<E:Ljava/lang/Object;>Lrx/internal/util/atomic/BaseLinkedAtomicQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilAtomicSpscLinkedAtomicQueue = { "SpscLinkedAtomicQueue", "rx.internal.util.atomic", ptrTable, methods, NULL, 7, 0x11, 4, 0, -1, -1, -1, 4, -1 };
  return &_RxInternalUtilAtomicSpscLinkedAtomicQueue;
}

@end

void RxInternalUtilAtomicSpscLinkedAtomicQueue_init(RxInternalUtilAtomicSpscLinkedAtomicQueue *self) {
  RxInternalUtilAtomicBaseLinkedAtomicQueue_init(self);
  RxInternalUtilAtomicLinkedQueueNode *node = create_RxInternalUtilAtomicLinkedQueueNode_init();
  [self spProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:node];
  [self spConsumerNodeWithRxInternalUtilAtomicLinkedQueueNode:node];
  [node soNextWithRxInternalUtilAtomicLinkedQueueNode:nil];
}

RxInternalUtilAtomicSpscLinkedAtomicQueue *new_RxInternalUtilAtomicSpscLinkedAtomicQueue_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilAtomicSpscLinkedAtomicQueue, init)
}

RxInternalUtilAtomicSpscLinkedAtomicQueue *create_RxInternalUtilAtomicSpscLinkedAtomicQueue_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilAtomicSpscLinkedAtomicQueue, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilAtomicSpscLinkedAtomicQueue)
