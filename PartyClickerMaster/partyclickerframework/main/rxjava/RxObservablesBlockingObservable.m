//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsActions.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsBlockingOperatorLatest.h"
#include "RxInternalOperatorsBlockingOperatorMostRecent.h"
#include "RxInternalOperatorsBlockingOperatorNext.h"
#include "RxInternalOperatorsBlockingOperatorToFuture.h"
#include "RxInternalOperatorsBlockingOperatorToIterator.h"
#include "RxInternalOperatorsNotificationLite.h"
#include "RxInternalUtilBlockingUtils.h"
#include "RxInternalUtilUtilityFunctions.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/util/Iterator.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "java/util/function/Consumer.h"

@interface RxObservablesBlockingObservable () {
 @public
  RxObservable *o_;
}

- (instancetype)initWithRxObservable:(RxObservable *)o;

- (id)blockForSingleWithRxObservable:(RxObservable *)observable;

@end

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservable, o_, RxObservable *)

__attribute__((unused)) static void RxObservablesBlockingObservable_initWithRxObservable_(RxObservablesBlockingObservable *self, RxObservable *o);

__attribute__((unused)) static RxObservablesBlockingObservable *new_RxObservablesBlockingObservable_initWithRxObservable_(RxObservable *o) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable *create_RxObservablesBlockingObservable_initWithRxObservable_(RxObservable *o);

__attribute__((unused)) static id RxObservablesBlockingObservable_blockForSingleWithRxObservable_(RxObservablesBlockingObservable *self, RxObservable *observable);

@interface RxObservablesBlockingObservable_1 : RxSubscriber {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicReference *val$exceptionFromOnError_;
  id<RxFunctionsAction1> val$onNext_;
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
                                  withRxFunctionsAction1:(id<RxFunctionsAction1>)capture$2;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)args;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_1)

__attribute__((unused)) static void RxObservablesBlockingObservable_1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_(RxObservablesBlockingObservable_1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<RxFunctionsAction1> capture$2);

__attribute__((unused)) static RxObservablesBlockingObservable_1 *new_RxObservablesBlockingObservable_1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<RxFunctionsAction1> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_1 *create_RxObservablesBlockingObservable_1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<RxFunctionsAction1> capture$2);

@interface RxObservablesBlockingObservable_2 : NSObject < JavaLangIterable > {
 @public
  RxObservablesBlockingObservable *this$0_;
}

- (instancetype)initWithRxObservablesBlockingObservable:(RxObservablesBlockingObservable *)outer$;

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_2)

__attribute__((unused)) static void RxObservablesBlockingObservable_2_initWithRxObservablesBlockingObservable_(RxObservablesBlockingObservable_2 *self, RxObservablesBlockingObservable *outer$);

__attribute__((unused)) static RxObservablesBlockingObservable_2 *new_RxObservablesBlockingObservable_2_initWithRxObservablesBlockingObservable_(RxObservablesBlockingObservable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_2 *create_RxObservablesBlockingObservable_2_initWithRxObservablesBlockingObservable_(RxObservablesBlockingObservable *outer$);

@interface RxObservablesBlockingObservable_3 : RxSubscriber {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicReference *val$returnException_;
  JavaUtilConcurrentAtomicAtomicReference *val$returnItem_;
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)item;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_3)

__attribute__((unused)) static void RxObservablesBlockingObservable_3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_(RxObservablesBlockingObservable_3 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

__attribute__((unused)) static RxObservablesBlockingObservable_3 *new_RxObservablesBlockingObservable_3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_3 *create_RxObservablesBlockingObservable_3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

@interface RxObservablesBlockingObservable_4 : RxSubscriber {
 @public
  IOSObjectArray *val$error_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (instancetype)initWithNSExceptionArray:(IOSObjectArray *)capture$0
    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_4)

__attribute__((unused)) static void RxObservablesBlockingObservable_4_initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_(RxObservablesBlockingObservable_4 *self, IOSObjectArray *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxObservablesBlockingObservable_4 *new_RxObservablesBlockingObservable_4_initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_(IOSObjectArray *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_4 *create_RxObservablesBlockingObservable_4_initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_(IOSObjectArray *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxObservablesBlockingObservable_5 : RxSubscriber {
 @public
  id<JavaUtilConcurrentBlockingQueue> val$queue_;
}

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0;

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_5)

__attribute__((unused)) static void RxObservablesBlockingObservable_5_initWithJavaUtilConcurrentBlockingQueue_(RxObservablesBlockingObservable_5 *self, id<JavaUtilConcurrentBlockingQueue> capture$0);

__attribute__((unused)) static RxObservablesBlockingObservable_5 *new_RxObservablesBlockingObservable_5_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_5 *create_RxObservablesBlockingObservable_5_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0);

@interface RxObservablesBlockingObservable_6 : RxSubscriber {
 @public
  id<JavaUtilConcurrentBlockingQueue> val$queue_;
  IOSObjectArray *val$theProducer_;
}

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0
                                    withRxProducerArray:(IOSObjectArray *)capture$1;

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

- (void)onStart;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_6)

__attribute__((unused)) static void RxObservablesBlockingObservable_6_initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_(RxObservablesBlockingObservable_6 *self, id<JavaUtilConcurrentBlockingQueue> capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static RxObservablesBlockingObservable_6 *new_RxObservablesBlockingObservable_6_initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_(id<JavaUtilConcurrentBlockingQueue> capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_6 *create_RxObservablesBlockingObservable_6_initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_(id<JavaUtilConcurrentBlockingQueue> capture$0, IOSObjectArray *capture$1);

@interface RxObservablesBlockingObservable_7 : NSObject < RxFunctionsAction0 > {
 @public
  id<JavaUtilConcurrentBlockingQueue> val$queue_;
}

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_7)

__attribute__((unused)) static void RxObservablesBlockingObservable_7_initWithJavaUtilConcurrentBlockingQueue_(RxObservablesBlockingObservable_7 *self, id<JavaUtilConcurrentBlockingQueue> capture$0);

__attribute__((unused)) static RxObservablesBlockingObservable_7 *new_RxObservablesBlockingObservable_7_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_7 *create_RxObservablesBlockingObservable_7_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0);

@interface RxObservablesBlockingObservable_8 : NSObject < RxFunctionsAction1 >

- (instancetype)init;

- (void)callWithId:(NSException *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_8)

__attribute__((unused)) static void RxObservablesBlockingObservable_8_init(RxObservablesBlockingObservable_8 *self);

__attribute__((unused)) static RxObservablesBlockingObservable_8 *new_RxObservablesBlockingObservable_8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_8 *create_RxObservablesBlockingObservable_8_init();

@interface RxObservablesBlockingObservable_9 : NSObject < RxObserver > {
 @public
  id<RxFunctionsAction1> val$onNext_;
  id<RxFunctionsAction1> val$onError_;
  id<RxFunctionsAction0> val$onCompleted_;
}

- (instancetype)initWithRxFunctionsAction1:(id<RxFunctionsAction1>)capture$0
                    withRxFunctionsAction1:(id<RxFunctionsAction1>)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2;

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable_9)

__attribute__((unused)) static void RxObservablesBlockingObservable_9_initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxObservablesBlockingObservable_9 *self, id<RxFunctionsAction1> capture$0, id<RxFunctionsAction1> capture$1, id<RxFunctionsAction0> capture$2);

__attribute__((unused)) static RxObservablesBlockingObservable_9 *new_RxObservablesBlockingObservable_9_initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(id<RxFunctionsAction1> capture$0, id<RxFunctionsAction1> capture$1, id<RxFunctionsAction0> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservable_9 *create_RxObservablesBlockingObservable_9_initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(id<RxFunctionsAction1> capture$0, id<RxFunctionsAction1> capture$1, id<RxFunctionsAction0> capture$2);

J2OBJC_INITIALIZED_DEFN(RxObservablesBlockingObservable)

id RxObservablesBlockingObservable_ON_START;
id RxObservablesBlockingObservable_SET_PRODUCER;
id RxObservablesBlockingObservable_UNSUBSCRIBE;

@implementation RxObservablesBlockingObservable

- (instancetype)initWithRxObservable:(RxObservable *)o {
  RxObservablesBlockingObservable_initWithRxObservable_(self, o);
  return self;
}

+ (RxObservablesBlockingObservable *)fromWithRxObservable:(RxObservable *)o {
  return RxObservablesBlockingObservable_fromWithRxObservable_(o);
}

- (void)forEachWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicReference *exceptionFromOnError = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxSubscription> subscription = [((RxObservable *) nil_chk((o_))) subscribeWithRxSubscriber:create_RxObservablesBlockingObservable_1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_(latch, exceptionFromOnError, onNext)];
  RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(latch, subscription);
  if ([exceptionFromOnError get] != nil) {
    RxExceptionsExceptions_propagateWithNSException_([exceptionFromOnError get]);
  }
}

- (id<JavaUtilIterator>)getIterator {
  return RxInternalOperatorsBlockingOperatorToIterator_toIteratorWithRxObservable_(o_);
}

- (id)first {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk(o_)) first]);
}

- (id)firstWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk(o_)) firstWithRxFunctionsFunc1:predicate]);
}

- (id)firstOrDefaultWithId:(id)defaultValue {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk([((RxObservable *) nil_chk(o_)) mapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) firstOrDefaultWithId:defaultValue]);
}

- (id)firstOrDefaultWithId:(id)defaultValue
      withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(o_)) filterWithRxFunctionsFunc1:predicate])) mapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) firstOrDefaultWithId:defaultValue]);
}

- (id)last {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk(o_)) last]);
}

- (id)lastWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk(o_)) lastWithRxFunctionsFunc1:predicate]);
}

- (id)lastOrDefaultWithId:(id)defaultValue {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk([((RxObservable *) nil_chk(o_)) mapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) lastOrDefaultWithId:defaultValue]);
}

- (id)lastOrDefaultWithId:(id)defaultValue
     withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(o_)) filterWithRxFunctionsFunc1:predicate])) mapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) lastOrDefaultWithId:defaultValue]);
}

- (id<JavaLangIterable>)mostRecentWithId:(id)initialValue {
  return RxInternalOperatorsBlockingOperatorMostRecent_mostRecentWithRxObservable_withId_(o_, initialValue);
}

- (id<JavaLangIterable>)next {
  return RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(o_);
}

- (id<JavaLangIterable>)latest {
  return RxInternalOperatorsBlockingOperatorLatest_latestWithRxObservable_(o_);
}

- (id)single {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk(o_)) single]);
}

- (id)singleWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk(o_)) singleWithRxFunctionsFunc1:predicate]);
}

- (id)singleOrDefaultWithId:(id)defaultValue {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk([((RxObservable *) nil_chk(o_)) mapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) singleOrDefaultWithId:defaultValue]);
}

- (id)singleOrDefaultWithId:(id)defaultValue
       withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(o_)) filterWithRxFunctionsFunc1:predicate])) mapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) singleOrDefaultWithId:defaultValue]);
}

- (id<JavaUtilConcurrentFuture>)toFuture {
  return RxInternalOperatorsBlockingOperatorToFuture_toFutureWithRxObservable_(o_);
}

- (id<JavaLangIterable>)toIterable {
  return create_RxObservablesBlockingObservable_2_initWithRxObservablesBlockingObservable_(self);
}

- (id)blockForSingleWithRxObservable:(RxObservable *)observable {
  return RxObservablesBlockingObservable_blockForSingleWithRxObservable_(self, observable);
}

- (void)subscribe {
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  IOSObjectArray *error = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSException_class_()];
  id<RxSubscription> s = [((RxObservable *) nil_chk((o_))) subscribeWithRxSubscriber:create_RxObservablesBlockingObservable_4_initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_(error, cdl)];
  RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(cdl, s);
  NSException *e = IOSObjectArray_Get(error, 0);
  if (e != nil) {
    RxExceptionsExceptions_propagateWithNSException_(e);
  }
}

- (void)subscribeWithRxObserver:(id<RxObserver>)observer {
  id<JavaUtilConcurrentBlockingQueue> queue = create_JavaUtilConcurrentLinkedBlockingQueue_init();
  id<RxSubscription> s = [((RxObservable *) nil_chk((o_))) subscribeWithRxSubscriber:create_RxObservablesBlockingObservable_5_initWithJavaUtilConcurrentBlockingQueue_(queue)];
  @try {
    for (; ; ) {
      id o = [queue poll];
      if (o == nil) {
        o = [queue take];
      }
      if (RxInternalOperatorsNotificationLite_acceptWithRxObserver_withId_(observer, o)) {
        return;
      }
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    [((id<RxObserver>) nil_chk(observer)) onErrorWithNSException:e];
  }
  @finally {
    [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  }
}

- (void)subscribeWithRxSubscriber:(RxSubscriber *)subscriber {
  id<JavaUtilConcurrentBlockingQueue> queue = create_JavaUtilConcurrentLinkedBlockingQueue_init();
  IOSObjectArray *theProducer = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:RxProducer_class_()];
  RxSubscriber *s = create_RxObservablesBlockingObservable_6_initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_(queue, theProducer);
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:s];
  [subscriber addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxObservablesBlockingObservable_7_initWithJavaUtilConcurrentBlockingQueue_(queue))];
  [((RxObservable *) nil_chk((o_))) subscribeWithRxSubscriber:s];
  @try {
    for (; ; ) {
      if ([subscriber isUnsubscribed]) {
        break;
      }
      id o = [queue poll];
      if (o == nil) {
        o = [queue take];
      }
      if ([subscriber isUnsubscribed] || o == RxObservablesBlockingObservable_UNSUBSCRIBE) {
        break;
      }
      if (o == RxObservablesBlockingObservable_ON_START) {
        [subscriber onStart];
      }
      else if (o == RxObservablesBlockingObservable_SET_PRODUCER) {
        [subscriber setProducerWithRxProducer:IOSObjectArray_Get(theProducer, 0)];
      }
      else if (RxInternalOperatorsNotificationLite_acceptWithRxObserver_withId_(subscriber, o)) {
        return;
      }
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    [subscriber onErrorWithNSException:e];
  }
  @finally {
    [s unsubscribe];
  }
}

- (void)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext {
  [self subscribeWithRxFunctionsAction1:onNext withRxFunctionsAction1:create_RxObservablesBlockingObservable_8_init() withRxFunctionsAction0:RxFunctionsActions_empty()];
}

- (void)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext
                 withRxFunctionsAction1:(id<RxFunctionsAction1>)onError {
  [self subscribeWithRxFunctionsAction1:onNext withRxFunctionsAction1:onError withRxFunctionsAction0:RxFunctionsActions_empty()];
}

- (void)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext
                 withRxFunctionsAction1:(id<RxFunctionsAction1>)onError
                 withRxFunctionsAction0:(id<RxFunctionsAction0>)onCompleted {
  [self subscribeWithRxObserver:create_RxObservablesBlockingObservable_9_initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(onNext, onError, onCompleted)];
}

- (void)dealloc {
  RELEASE_(o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LRxObservablesBlockingObservable;", 0x9, 2, 0, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 15, -1, 16, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 10, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 15, -1, 16, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 19, 13, -1, 20, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 21, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 21, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 10, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x1, 23, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x1, 23, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 21, -1, -1 },
    { NULL, "LNSObject;", 0x2, 25, 0, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 27, 30, -1, 31, -1, -1 },
    { NULL, "V", 0x1, 27, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 27, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 27, 34, -1, 35, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObservable:);
  methods[1].selector = @selector(fromWithRxObservable:);
  methods[2].selector = @selector(forEachWithRxFunctionsAction1:);
  methods[3].selector = @selector(getIterator);
  methods[4].selector = @selector(first);
  methods[5].selector = @selector(firstWithRxFunctionsFunc1:);
  methods[6].selector = @selector(firstOrDefaultWithId:);
  methods[7].selector = @selector(firstOrDefaultWithId:withRxFunctionsFunc1:);
  methods[8].selector = @selector(last);
  methods[9].selector = @selector(lastWithRxFunctionsFunc1:);
  methods[10].selector = @selector(lastOrDefaultWithId:);
  methods[11].selector = @selector(lastOrDefaultWithId:withRxFunctionsFunc1:);
  methods[12].selector = @selector(mostRecentWithId:);
  methods[13].selector = @selector(next);
  methods[14].selector = @selector(latest);
  methods[15].selector = @selector(single);
  methods[16].selector = @selector(singleWithRxFunctionsFunc1:);
  methods[17].selector = @selector(singleOrDefaultWithId:);
  methods[18].selector = @selector(singleOrDefaultWithId:withRxFunctionsFunc1:);
  methods[19].selector = @selector(toFuture);
  methods[20].selector = @selector(toIterable);
  methods[21].selector = @selector(blockForSingleWithRxObservable:);
  methods[22].selector = @selector(subscribe);
  methods[23].selector = @selector(subscribeWithRxObserver:);
  methods[24].selector = @selector(subscribeWithRxSubscriber:);
  methods[25].selector = @selector(subscribeWithRxFunctionsAction1:);
  methods[26].selector = @selector(subscribeWithRxFunctionsAction1:withRxFunctionsAction1:);
  methods[27].selector = @selector(subscribeWithRxFunctionsAction1:withRxFunctionsAction1:withRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "o_", "LRxObservable;", .constantValue.asLong = 0, 0x12, -1, -1, 36, -1 },
    { "ON_START", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 37, -1, -1 },
    { "SET_PRODUCER", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 38, -1, -1 },
    { "UNSUBSCRIBE", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 39, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservable;", "(Lrx/Observable<+TT;>;)V", "from", "<T:Ljava/lang/Object;>(Lrx/Observable<+TT;>;)Lrx/observables/BlockingObservable<TT;>;", "forEach", "LRxFunctionsAction1;", "(Lrx/functions/Action1<-TT;>;)V", "()Ljava/util/Iterator<TT;>;", "()TT;", "first", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<-TT;Ljava/lang/Boolean;>;)TT;", "firstOrDefault", "LNSObject;", "(TT;)TT;", "LNSObject;LRxFunctionsFunc1;", "(TT;Lrx/functions/Func1<-TT;Ljava/lang/Boolean;>;)TT;", "last", "lastOrDefault", "mostRecent", "(TT;)Ljava/lang/Iterable<TT;>;", "()Ljava/lang/Iterable<TT;>;", "single", "singleOrDefault", "()Ljava/util/concurrent/Future<TT;>;", "blockForSingle", "(Lrx/Observable<+TT;>;)TT;", "subscribe", "LRxObserver;", "(Lrx/Observer<-TT;>;)V", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "LRxFunctionsAction1;LRxFunctionsAction1;", "(Lrx/functions/Action1<-TT;>;Lrx/functions/Action1<-Ljava/lang/Throwable;>;)V", "LRxFunctionsAction1;LRxFunctionsAction1;LRxFunctionsAction0;", "(Lrx/functions/Action1<-TT;>;Lrx/functions/Action1<-Ljava/lang/Throwable;>;Lrx/functions/Action0;)V", "Lrx/Observable<+TT;>;", &RxObservablesBlockingObservable_ON_START, &RxObservablesBlockingObservable_SET_PRODUCER, &RxObservablesBlockingObservable_UNSUBSCRIBE, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable = { "BlockingObservable", "rx.observables", ptrTable, methods, fields, 7, 0x11, 28, 4, -1, -1, -1, 40, -1 };
  return &_RxObservablesBlockingObservable;
}

+ (void)initialize {
  if (self == [RxObservablesBlockingObservable class]) {
    JreStrongAssignAndConsume(&RxObservablesBlockingObservable_ON_START, new_NSObject_init());
    JreStrongAssignAndConsume(&RxObservablesBlockingObservable_SET_PRODUCER, new_NSObject_init());
    JreStrongAssignAndConsume(&RxObservablesBlockingObservable_UNSUBSCRIBE, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(RxObservablesBlockingObservable)
  }
}

@end

void RxObservablesBlockingObservable_initWithRxObservable_(RxObservablesBlockingObservable *self, RxObservable *o) {
  NSObject_init(self);
  JreStrongAssign(&self->o_, o);
}

RxObservablesBlockingObservable *new_RxObservablesBlockingObservable_initWithRxObservable_(RxObservable *o) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable, initWithRxObservable_, o)
}

RxObservablesBlockingObservable *create_RxObservablesBlockingObservable_initWithRxObservable_(RxObservable *o) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable, initWithRxObservable_, o)
}

RxObservablesBlockingObservable *RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable *o) {
  RxObservablesBlockingObservable_initialize();
  return create_RxObservablesBlockingObservable_initWithRxObservable_(o);
}

id RxObservablesBlockingObservable_blockForSingleWithRxObservable_(RxObservablesBlockingObservable *self, RxObservable *observable) {
  JavaUtilConcurrentAtomicAtomicReference *returnItem = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicReference *returnException = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  id<RxSubscription> subscription = [((RxObservable *) nil_chk((observable))) subscribeWithRxSubscriber:create_RxObservablesBlockingObservable_3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_(latch, returnException, returnItem)];
  RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(latch, subscription);
  if ([returnException get] != nil) {
    RxExceptionsExceptions_propagateWithNSException_([returnException get]);
  }
  return [returnItem get];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesBlockingObservable)

@implementation RxObservablesBlockingObservable_1

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
                                  withRxFunctionsAction1:(id<RxFunctionsAction1>)capture$2 {
  RxObservablesBlockingObservable_1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)onCompleted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$exceptionFromOnError_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onNextWithId:(id)args {
  [((id<RxFunctionsAction1>) nil_chk(val$onNext_)) callWithId:args];
}

- (void)dealloc {
  RELEASE_(val$latch_);
  RELEASE_(val$exceptionFromOnError_);
  RELEASE_(val$onNext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:withRxFunctionsAction1:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$exceptionFromOnError_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$onNext_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "Lrx/functions/Action1<-TT;>;", "LRxObservablesBlockingObservable;", "forEachWithRxFunctionsAction1:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8018, 4, 3, 7, -1, 8, 9, -1 };
  return &_RxObservablesBlockingObservable_1;
}

@end

void RxObservablesBlockingObservable_1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_(RxObservablesBlockingObservable_1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<RxFunctionsAction1> capture$2) {
  JreStrongAssign(&self->val$latch_, capture$0);
  JreStrongAssign(&self->val$exceptionFromOnError_, capture$1);
  JreStrongAssign(&self->val$onNext_, capture$2);
  RxSubscriber_init(self);
}

RxObservablesBlockingObservable_1 *new_RxObservablesBlockingObservable_1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<RxFunctionsAction1> capture$2) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_, capture$0, capture$1, capture$2)
}

RxObservablesBlockingObservable_1 *create_RxObservablesBlockingObservable_1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id<RxFunctionsAction1> capture$2) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withRxFunctionsAction1_, capture$0, capture$1, capture$2)
}

@implementation RxObservablesBlockingObservable_2

- (instancetype)initWithRxObservablesBlockingObservable:(RxObservablesBlockingObservable *)outer$ {
  RxObservablesBlockingObservable_2_initWithRxObservablesBlockingObservable_(self, outer$);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [this$0_ getIterator];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObservablesBlockingObservable:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesBlockingObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TT;>;", "Lrx/observables/BlockingObservable<TT;>;", "LRxObservablesBlockingObservable;", "toIterable", "Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_2 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservable_2;
}

@end

void RxObservablesBlockingObservable_2_initWithRxObservablesBlockingObservable_(RxObservablesBlockingObservable_2 *self, RxObservablesBlockingObservable *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObservablesBlockingObservable_2 *new_RxObservablesBlockingObservable_2_initWithRxObservablesBlockingObservable_(RxObservablesBlockingObservable *outer$) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_2, initWithRxObservablesBlockingObservable_, outer$)
}

RxObservablesBlockingObservable_2 *create_RxObservablesBlockingObservable_2_initWithRxObservablesBlockingObservable_(RxObservablesBlockingObservable *outer$) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_2, initWithRxObservablesBlockingObservable_, outer$)
}

@implementation RxObservablesBlockingObservable_3

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2 {
  RxObservablesBlockingObservable_3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)onCompleted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$returnException_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onNextWithId:(id)item {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$returnItem_)) setWithId:item];
}

- (void)dealloc {
  RELEASE_(val$latch_);
  RELEASE_(val$returnException_);
  RELEASE_(val$returnItem_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$returnException_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$returnItem_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "Ljava/util/concurrent/atomic/AtomicReference<TT;>;", "LRxObservablesBlockingObservable;", "blockForSingleWithRxObservable:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_3 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8018, 4, 3, 7, -1, 8, 9, -1 };
  return &_RxObservablesBlockingObservable_3;
}

@end

void RxObservablesBlockingObservable_3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_(RxObservablesBlockingObservable_3 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  JreStrongAssign(&self->val$latch_, capture$0);
  JreStrongAssign(&self->val$returnException_, capture$1);
  JreStrongAssign(&self->val$returnItem_, capture$2);
  RxSubscriber_init(self);
}

RxObservablesBlockingObservable_3 *new_RxObservablesBlockingObservable_3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_3, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

RxObservablesBlockingObservable_3 *create_RxObservablesBlockingObservable_3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_3, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

@implementation RxObservablesBlockingObservable_4

- (instancetype)initWithNSExceptionArray:(IOSObjectArray *)capture$0
    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxObservablesBlockingObservable_4_initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)onNextWithId:(id)t {
}

- (void)onErrorWithNSException:(NSException *)e {
  IOSObjectArray_Set(nil_chk(val$error_), 0, e);
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (void)onCompleted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (void)dealloc {
  RELEASE_(val$error_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSExceptionArray:withJavaUtilConcurrentCountDownLatch:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "[LNSException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "LRxObservablesBlockingObservable;", "subscribe", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_4 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8018, 4, 2, 5, -1, 6, 7, -1 };
  return &_RxObservablesBlockingObservable_4;
}

@end

void RxObservablesBlockingObservable_4_initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_(RxObservablesBlockingObservable_4 *self, IOSObjectArray *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$error_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  RxSubscriber_init(self);
}

RxObservablesBlockingObservable_4 *new_RxObservablesBlockingObservable_4_initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_(IOSObjectArray *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_4, initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxObservablesBlockingObservable_4 *create_RxObservablesBlockingObservable_4_initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_(IOSObjectArray *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_4, initWithNSExceptionArray_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxObservablesBlockingObservable_5

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0 {
  RxObservablesBlockingObservable_5_initWithJavaUtilConcurrentBlockingQueue_(self, capture$0);
  return self;
}

- (void)onNextWithId:(id)t {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:RxInternalOperatorsNotificationLite_nextWithId_(t)];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:RxInternalOperatorsNotificationLite_errorWithNSException_(e)];
}

- (void)onCompleted {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:RxInternalOperatorsNotificationLite_completed()];
}

- (void)dealloc {
  RELEASE_(val$queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentBlockingQueue:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$queue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Ljava/util/concurrent/BlockingQueue<Ljava/lang/Object;>;", "LRxObservablesBlockingObservable;", "subscribeWithRxObserver:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_5 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8018, 4, 1, 6, -1, 7, 8, -1 };
  return &_RxObservablesBlockingObservable_5;
}

@end

void RxObservablesBlockingObservable_5_initWithJavaUtilConcurrentBlockingQueue_(RxObservablesBlockingObservable_5 *self, id<JavaUtilConcurrentBlockingQueue> capture$0) {
  JreStrongAssign(&self->val$queue_, capture$0);
  RxSubscriber_init(self);
}

RxObservablesBlockingObservable_5 *new_RxObservablesBlockingObservable_5_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_5, initWithJavaUtilConcurrentBlockingQueue_, capture$0)
}

RxObservablesBlockingObservable_5 *create_RxObservablesBlockingObservable_5_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_5, initWithJavaUtilConcurrentBlockingQueue_, capture$0)
}

@implementation RxObservablesBlockingObservable_6

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0
                                    withRxProducerArray:(IOSObjectArray *)capture$1 {
  RxObservablesBlockingObservable_6_initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_(self, capture$0, capture$1);
  return self;
}

- (void)onNextWithId:(id)t {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:RxInternalOperatorsNotificationLite_nextWithId_(t)];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:RxInternalOperatorsNotificationLite_errorWithNSException_(e)];
}

- (void)onCompleted {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:RxInternalOperatorsNotificationLite_completed()];
}

- (void)setProducerWithRxProducer:(id<RxProducer>)p {
  IOSObjectArray_Set(nil_chk(val$theProducer_), 0, p);
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:JreLoadStatic(RxObservablesBlockingObservable, SET_PRODUCER)];
}

- (void)onStart {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:JreLoadStatic(RxObservablesBlockingObservable, ON_START)];
}

- (void)dealloc {
  RELEASE_(val$queue_);
  RELEASE_(val$theProducer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentBlockingQueue:withRxProducerArray:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(setProducerWithRxProducer:);
  methods[5].selector = @selector(onStart);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$queue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$theProducer_", "[LRxProducer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "setProducer", "LRxProducer;", "Ljava/util/concurrent/BlockingQueue<Ljava/lang/Object;>;", "LRxObservablesBlockingObservable;", "subscribeWithRxSubscriber:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_6 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8018, 6, 2, 8, -1, 9, 10, -1 };
  return &_RxObservablesBlockingObservable_6;
}

@end

void RxObservablesBlockingObservable_6_initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_(RxObservablesBlockingObservable_6 *self, id<JavaUtilConcurrentBlockingQueue> capture$0, IOSObjectArray *capture$1) {
  JreStrongAssign(&self->val$queue_, capture$0);
  JreStrongAssign(&self->val$theProducer_, capture$1);
  RxSubscriber_init(self);
}

RxObservablesBlockingObservable_6 *new_RxObservablesBlockingObservable_6_initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_(id<JavaUtilConcurrentBlockingQueue> capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_6, initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_, capture$0, capture$1)
}

RxObservablesBlockingObservable_6 *create_RxObservablesBlockingObservable_6_initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_(id<JavaUtilConcurrentBlockingQueue> capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_6, initWithJavaUtilConcurrentBlockingQueue_withRxProducerArray_, capture$0, capture$1)
}

@implementation RxObservablesBlockingObservable_7

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0 {
  RxObservablesBlockingObservable_7_initWithJavaUtilConcurrentBlockingQueue_(self, capture$0);
  return self;
}

- (void)call {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) offerWithId:JreLoadStatic(RxObservablesBlockingObservable, UNSUBSCRIBE)];
}

- (void)dealloc {
  RELEASE_(val$queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentBlockingQueue:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$queue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/concurrent/BlockingQueue<Ljava/lang/Object;>;", "LRxObservablesBlockingObservable;", "subscribeWithRxSubscriber:" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_7 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxObservablesBlockingObservable_7;
}

@end

void RxObservablesBlockingObservable_7_initWithJavaUtilConcurrentBlockingQueue_(RxObservablesBlockingObservable_7 *self, id<JavaUtilConcurrentBlockingQueue> capture$0) {
  JreStrongAssign(&self->val$queue_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservable_7 *new_RxObservablesBlockingObservable_7_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_7, initWithJavaUtilConcurrentBlockingQueue_, capture$0)
}

RxObservablesBlockingObservable_7 *create_RxObservablesBlockingObservable_7_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_7, initWithJavaUtilConcurrentBlockingQueue_, capture$0)
}

@implementation RxObservablesBlockingObservable_8

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservable_8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)callWithId:(NSException *)t {
  @throw create_RxExceptionsOnErrorNotImplementedException_initWithNSException_(t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxObservablesBlockingObservable;", "subscribeWithRxFunctionsAction1:", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_8 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservable_8;
}

@end

void RxObservablesBlockingObservable_8_init(RxObservablesBlockingObservable_8 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservable_8 *new_RxObservablesBlockingObservable_8_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_8, init)
}

RxObservablesBlockingObservable_8 *create_RxObservablesBlockingObservable_8_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_8, init)
}

@implementation RxObservablesBlockingObservable_9

- (instancetype)initWithRxFunctionsAction1:(id<RxFunctionsAction1>)capture$0
                    withRxFunctionsAction1:(id<RxFunctionsAction1>)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2 {
  RxObservablesBlockingObservable_9_initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)onNextWithId:(id)t {
  [((id<RxFunctionsAction1>) nil_chk(val$onNext_)) callWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxFunctionsAction1>) nil_chk(val$onError_)) callWithId:e];
}

- (void)onCompleted {
  [((id<RxFunctionsAction0>) nil_chk(val$onCompleted_)) call];
}

- (void)dealloc {
  RELEASE_(val$onNext_);
  RELEASE_(val$onError_);
  RELEASE_(val$onCompleted_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxFunctionsAction1:withRxFunctionsAction1:withRxFunctionsAction0:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onNext_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$onError_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$onCompleted_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/functions/Action1<-TT;>;", "Lrx/functions/Action1<-Ljava/lang/Throwable;>;", "LRxObservablesBlockingObservable;", "subscribeWithRxFunctionsAction1:withRxFunctionsAction1:withRxFunctionsAction0:", "Ljava/lang/Object;Lrx/Observer<TT;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservable_9 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8018, 4, 3, 7, -1, 8, 9, -1 };
  return &_RxObservablesBlockingObservable_9;
}

@end

void RxObservablesBlockingObservable_9_initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxObservablesBlockingObservable_9 *self, id<RxFunctionsAction1> capture$0, id<RxFunctionsAction1> capture$1, id<RxFunctionsAction0> capture$2) {
  JreStrongAssign(&self->val$onNext_, capture$0);
  JreStrongAssign(&self->val$onError_, capture$1);
  JreStrongAssign(&self->val$onCompleted_, capture$2);
  NSObject_init(self);
}

RxObservablesBlockingObservable_9 *new_RxObservablesBlockingObservable_9_initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(id<RxFunctionsAction1> capture$0, id<RxFunctionsAction1> capture$1, id<RxFunctionsAction0> capture$2) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservable_9, initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_, capture$0, capture$1, capture$2)
}

RxObservablesBlockingObservable_9 *create_RxObservablesBlockingObservable_9_initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(id<RxFunctionsAction1> capture$0, id<RxFunctionsAction1> capture$1, id<RxFunctionsAction0> capture$2) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservable_9, initWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_, capture$0, capture$1, capture$2)
}
