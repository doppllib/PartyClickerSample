//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsNotificationLite.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxScheduler.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsSubject.h"
#include "RxSubjectsSubjectSubscriptionManager.h"
#include "RxSubjectsTestSubject.h"
#include "RxSubscription.h"
#include "java/util/concurrent/TimeUnit.h"

@interface RxSubjectsTestSubject () {
 @public
  RxSubjectsSubjectSubscriptionManager *state_;
  RxScheduler_Worker *innerScheduler_;
}

@end

J2OBJC_FIELD_SETTER(RxSubjectsTestSubject, state_, RxSubjectsSubjectSubscriptionManager *)
J2OBJC_FIELD_SETTER(RxSubjectsTestSubject, innerScheduler_, RxScheduler_Worker *)

@interface RxSubjectsTestSubject_1 : NSObject < RxFunctionsAction1 > {
 @public
  RxSubjectsSubjectSubscriptionManager *val$state_;
}

- (instancetype)initWithRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)capture$0;

- (void)callWithId:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsTestSubject_1)

__attribute__((unused)) static void RxSubjectsTestSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsTestSubject_1 *self, RxSubjectsSubjectSubscriptionManager *capture$0);

__attribute__((unused)) static RxSubjectsTestSubject_1 *new_RxSubjectsTestSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsSubjectSubscriptionManager *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsTestSubject_1 *create_RxSubjectsTestSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsSubjectSubscriptionManager *capture$0);

@interface RxSubjectsTestSubject_2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubjectsTestSubject *this$0_;
}

- (instancetype)initWithRxSubjectsTestSubject:(RxSubjectsTestSubject *)outer$;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsTestSubject_2)

__attribute__((unused)) static void RxSubjectsTestSubject_2_initWithRxSubjectsTestSubject_(RxSubjectsTestSubject_2 *self, RxSubjectsTestSubject *outer$);

__attribute__((unused)) static RxSubjectsTestSubject_2 *new_RxSubjectsTestSubject_2_initWithRxSubjectsTestSubject_(RxSubjectsTestSubject *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsTestSubject_2 *create_RxSubjectsTestSubject_2_initWithRxSubjectsTestSubject_(RxSubjectsTestSubject *outer$);

@interface RxSubjectsTestSubject_3 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubjectsTestSubject *this$0_;
  NSException *val$e_;
}

- (instancetype)initWithRxSubjectsTestSubject:(RxSubjectsTestSubject *)outer$
                              withNSException:(NSException *)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsTestSubject_3)

__attribute__((unused)) static void RxSubjectsTestSubject_3_initWithRxSubjectsTestSubject_withNSException_(RxSubjectsTestSubject_3 *self, RxSubjectsTestSubject *outer$, NSException *capture$0);

__attribute__((unused)) static RxSubjectsTestSubject_3 *new_RxSubjectsTestSubject_3_initWithRxSubjectsTestSubject_withNSException_(RxSubjectsTestSubject *outer$, NSException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsTestSubject_3 *create_RxSubjectsTestSubject_3_initWithRxSubjectsTestSubject_withNSException_(RxSubjectsTestSubject *outer$, NSException *capture$0);

@interface RxSubjectsTestSubject_4 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubjectsTestSubject *this$0_;
  id val$v_;
}

- (instancetype)initWithRxSubjectsTestSubject:(RxSubjectsTestSubject *)outer$
                                       withId:(id)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsTestSubject_4)

__attribute__((unused)) static void RxSubjectsTestSubject_4_initWithRxSubjectsTestSubject_withId_(RxSubjectsTestSubject_4 *self, RxSubjectsTestSubject *outer$, id capture$0);

__attribute__((unused)) static RxSubjectsTestSubject_4 *new_RxSubjectsTestSubject_4_initWithRxSubjectsTestSubject_withId_(RxSubjectsTestSubject *outer$, id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsTestSubject_4 *create_RxSubjectsTestSubject_4_initWithRxSubjectsTestSubject_withId_(RxSubjectsTestSubject *outer$, id capture$0);

@implementation RxSubjectsTestSubject

+ (RxSubjectsTestSubject *)createWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)scheduler {
  return RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(scheduler);
}

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
        withRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)state
                   withRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)scheduler {
  RxSubjectsTestSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_(self, onSubscribe, state, scheduler);
  return self;
}

- (void)onCompleted {
  [self onCompletedWithLong:0];
}

- (void)internalOnCompleted {
  if (((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_))->active_) {
    {
      IOSObjectArray *a__ = [state_ terminateWithId:RxInternalOperatorsNotificationLite_completed()];
      RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        RxSubjectsSubjectSubscriptionManager_SubjectObserver *bo = *b__++;
        [((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(bo)) onCompleted];
      }
    }
  }
}

- (void)onCompletedWithLong:(jlong)delayTime {
  [((RxScheduler_Worker *) nil_chk(innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxSubjectsTestSubject_2_initWithRxSubjectsTestSubject_(self) withLong:delayTime withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (void)onErrorWithNSException:(NSException *)e {
  [self onErrorWithNSException:e withLong:0];
}

- (void)internalOnErrorWithNSException:(NSException *)e {
  if (((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_))->active_) {
    {
      IOSObjectArray *a__ = [state_ terminateWithId:RxInternalOperatorsNotificationLite_errorWithNSException_(e)];
      RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        RxSubjectsSubjectSubscriptionManager_SubjectObserver *bo = *b__++;
        [((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(bo)) onErrorWithNSException:e];
      }
    }
  }
}

- (void)onErrorWithNSException:(NSException *)e
                      withLong:(jlong)delayTime {
  [((RxScheduler_Worker *) nil_chk(innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxSubjectsTestSubject_3_initWithRxSubjectsTestSubject_withNSException_(self, e) withLong:delayTime withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (void)onNextWithId:(id)v {
  [self onNextWithId:v withLong:0];
}

- (void)internalOnNextWithId:(id)v {
  {
    IOSObjectArray *a__ = [((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_)) observers];
    RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    RxSubjectsSubjectSubscriptionManager_SubjectObserver * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<RxObserver> o = *b__++;
      [((id<RxObserver>) nil_chk(o)) onNextWithId:v];
    }
  }
}

- (void)onNextWithId:(id)v
            withLong:(jlong)delayTime {
  [((RxScheduler_Worker *) nil_chk(innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxSubjectsTestSubject_4_initWithRxSubjectsTestSubject_withId_(self, v) withLong:delayTime withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (jboolean)hasObservers {
  return ((IOSObjectArray *) nil_chk([((RxSubjectsSubjectSubscriptionManager *) nil_chk(state_)) observers]))->size_ > 0;
}

- (void)dealloc {
  RELEASE_(state_);
  RELEASE_(innerScheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubjectsTestSubject;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x0, 14, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 11, 15, -1, 16, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithRxSchedulersTestScheduler:);
  methods[1].selector = @selector(initWithRxObservable_OnSubscribe:withRxSubjectsSubjectSubscriptionManager:withRxSchedulersTestScheduler:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(internalOnCompleted);
  methods[4].selector = @selector(onCompletedWithLong:);
  methods[5].selector = @selector(onErrorWithNSException:);
  methods[6].selector = @selector(internalOnErrorWithNSException:);
  methods[7].selector = @selector(onErrorWithNSException:withLong:);
  methods[8].selector = @selector(onNextWithId:);
  methods[9].selector = @selector(internalOnNextWithId:);
  methods[10].selector = @selector(onNextWithId:withLong:);
  methods[11].selector = @selector(hasObservers);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LRxSubjectsSubjectSubscriptionManager;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "innerScheduler_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LRxSchedulersTestScheduler;", "<T:Ljava/lang/Object;>(Lrx/schedulers/TestScheduler;)Lrx/subjects/TestSubject<TT;>;", "LRxObservable_OnSubscribe;LRxSubjectsSubjectSubscriptionManager;LRxSchedulersTestScheduler;", "(Lrx/Observable$OnSubscribe<TT;>;Lrx/subjects/SubjectSubscriptionManager<TT;>;Lrx/schedulers/TestScheduler;)V", "onCompleted", "J", "onError", "LNSException;", "internalOnError", "LNSException;J", "onNext", "LNSObject;", "(TT;)V", "internalOnNext", "LNSObject;J", "(TT;J)V", "Lrx/subjects/SubjectSubscriptionManager<TT;>;", "<T:Ljava/lang/Object;>Lrx/subjects/Subject<TT;TT;>;" };
  static const J2ObjcClassInfo _RxSubjectsTestSubject = { "TestSubject", "rx.subjects", ptrTable, methods, fields, 7, 0x11, 12, 2, -1, -1, -1, 18, -1 };
  return &_RxSubjectsTestSubject;
}

@end

RxSubjectsTestSubject *RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *scheduler) {
  RxSubjectsTestSubject_initialize();
  RxSubjectsSubjectSubscriptionManager *state = create_RxSubjectsSubjectSubscriptionManager_init();
  JreStrongAssignAndConsume(&state->onAdded_, new_RxSubjectsTestSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(state));
  JreStrongAssign(&state->onTerminated_, state->onAdded_);
  return create_RxSubjectsTestSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_(state, state, scheduler);
}

void RxSubjectsTestSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_(RxSubjectsTestSubject *self, id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state, RxSchedulersTestScheduler *scheduler) {
  RxSubjectsSubject_initWithRxObservable_OnSubscribe_(self, onSubscribe);
  JreStrongAssign(&self->state_, state);
  JreStrongAssign(&self->innerScheduler_, [((RxSchedulersTestScheduler *) nil_chk(scheduler)) createWorker]);
}

RxSubjectsTestSubject *new_RxSubjectsTestSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state, RxSchedulersTestScheduler *scheduler) {
  J2OBJC_NEW_IMPL(RxSubjectsTestSubject, initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_, onSubscribe, state, scheduler)
}

RxSubjectsTestSubject *create_RxSubjectsTestSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state, RxSchedulersTestScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(RxSubjectsTestSubject, initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_, onSubscribe, state, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsTestSubject)

@implementation RxSubjectsTestSubject_1

- (instancetype)initWithRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)capture$0 {
  RxSubjectsTestSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(self, capture$0);
  return self;
}

- (void)callWithId:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o {
  [((RxSubjectsSubjectSubscriptionManager_SubjectObserver *) nil_chk(o)) emitFirstWithId:[((RxSubjectsSubjectSubscriptionManager *) nil_chk(val$state_)) getLatest]];
}

- (void)dealloc {
  RELEASE_(val$state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubjectsSubjectSubscriptionManager:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$state_", "LRxSubjectsSubjectSubscriptionManager;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubjectsSubjectSubscriptionManager_SubjectObserver;", "(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver<TT;>;)V", "Lrx/subjects/SubjectSubscriptionManager<TT;>;", "LRxSubjectsTestSubject;", "createWithRxSchedulersTestScheduler:", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/subjects/SubjectSubscriptionManager$SubjectObserver<TT;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsTestSubject_1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSubjectsTestSubject_1;
}

@end

void RxSubjectsTestSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsTestSubject_1 *self, RxSubjectsSubjectSubscriptionManager *capture$0) {
  JreStrongAssign(&self->val$state_, capture$0);
  NSObject_init(self);
}

RxSubjectsTestSubject_1 *new_RxSubjectsTestSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsSubjectSubscriptionManager *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsTestSubject_1, initWithRxSubjectsSubjectSubscriptionManager_, capture$0)
}

RxSubjectsTestSubject_1 *create_RxSubjectsTestSubject_1_initWithRxSubjectsSubjectSubscriptionManager_(RxSubjectsSubjectSubscriptionManager *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsTestSubject_1, initWithRxSubjectsSubjectSubscriptionManager_, capture$0)
}

@implementation RxSubjectsTestSubject_2

- (instancetype)initWithRxSubjectsTestSubject:(RxSubjectsTestSubject *)outer$ {
  RxSubjectsTestSubject_2_initWithRxSubjectsTestSubject_(self, outer$);
  return self;
}

- (void)call {
  [this$0_ internalOnCompleted];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubjectsTestSubject:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubjectsTestSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Lrx/subjects/TestSubject<TT;>;", "LRxSubjectsTestSubject;", "onCompletedWithLong:" };
  static const J2ObjcClassInfo _RxSubjectsTestSubject_2 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxSubjectsTestSubject_2;
}

@end

void RxSubjectsTestSubject_2_initWithRxSubjectsTestSubject_(RxSubjectsTestSubject_2 *self, RxSubjectsTestSubject *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubjectsTestSubject_2 *new_RxSubjectsTestSubject_2_initWithRxSubjectsTestSubject_(RxSubjectsTestSubject *outer$) {
  J2OBJC_NEW_IMPL(RxSubjectsTestSubject_2, initWithRxSubjectsTestSubject_, outer$)
}

RxSubjectsTestSubject_2 *create_RxSubjectsTestSubject_2_initWithRxSubjectsTestSubject_(RxSubjectsTestSubject *outer$) {
  J2OBJC_CREATE_IMPL(RxSubjectsTestSubject_2, initWithRxSubjectsTestSubject_, outer$)
}

@implementation RxSubjectsTestSubject_3

- (instancetype)initWithRxSubjectsTestSubject:(RxSubjectsTestSubject *)outer$
                              withNSException:(NSException *)capture$0 {
  RxSubjectsTestSubject_3_initWithRxSubjectsTestSubject_withNSException_(self, outer$, capture$0);
  return self;
}

- (void)call {
  [this$0_ internalOnErrorWithNSException:val$e_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubjectsTestSubject:withNSException:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubjectsTestSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$e_", "LNSException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Lrx/subjects/TestSubject<TT;>;", "LRxSubjectsTestSubject;", "onErrorWithNSException:withLong:" };
  static const J2ObjcClassInfo _RxSubjectsTestSubject_3 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSubjectsTestSubject_3;
}

@end

void RxSubjectsTestSubject_3_initWithRxSubjectsTestSubject_withNSException_(RxSubjectsTestSubject_3 *self, RxSubjectsTestSubject *outer$, NSException *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$e_, capture$0);
  NSObject_init(self);
}

RxSubjectsTestSubject_3 *new_RxSubjectsTestSubject_3_initWithRxSubjectsTestSubject_withNSException_(RxSubjectsTestSubject *outer$, NSException *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsTestSubject_3, initWithRxSubjectsTestSubject_withNSException_, outer$, capture$0)
}

RxSubjectsTestSubject_3 *create_RxSubjectsTestSubject_3_initWithRxSubjectsTestSubject_withNSException_(RxSubjectsTestSubject *outer$, NSException *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsTestSubject_3, initWithRxSubjectsTestSubject_withNSException_, outer$, capture$0)
}

@implementation RxSubjectsTestSubject_4

- (instancetype)initWithRxSubjectsTestSubject:(RxSubjectsTestSubject *)outer$
                                       withId:(id)capture$0 {
  RxSubjectsTestSubject_4_initWithRxSubjectsTestSubject_withId_(self, outer$, capture$0);
  return self;
}

- (void)call {
  [this$0_ internalOnNextWithId:val$v_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$v_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubjectsTestSubject:withId:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubjectsTestSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$v_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "Lrx/subjects/TestSubject<TT;>;", "TT;", "LRxSubjectsTestSubject;", "onNextWithId:withLong:" };
  static const J2ObjcClassInfo _RxSubjectsTestSubject_4 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_RxSubjectsTestSubject_4;
}

@end

void RxSubjectsTestSubject_4_initWithRxSubjectsTestSubject_withId_(RxSubjectsTestSubject_4 *self, RxSubjectsTestSubject *outer$, id capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$v_, capture$0);
  NSObject_init(self);
}

RxSubjectsTestSubject_4 *new_RxSubjectsTestSubject_4_initWithRxSubjectsTestSubject_withId_(RxSubjectsTestSubject *outer$, id capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsTestSubject_4, initWithRxSubjectsTestSubject_withId_, outer$, capture$0)
}

RxSubjectsTestSubject_4 *create_RxSubjectsTestSubject_4_initWithRxSubjectsTestSubject_withId_(RxSubjectsTestSubject *outer$, id capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsTestSubject_4, initWithRxSubjectsTestSubject_withId_, outer$, capture$0)
}
