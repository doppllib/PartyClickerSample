//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeFromIterable
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeFromIterable

#if !defined (RxInternalOperatorsOnSubscribeFromIterable_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable || defined(INCLUDE_RxInternalOperatorsOnSubscribeFromIterable))
#define RxInternalOperatorsOnSubscribeFromIterable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

@class RxSubscriber;
@protocol JavaLangIterable;

@interface RxInternalOperatorsOnSubscribeFromIterable : NSObject < RxObservable_OnSubscribe > {
 @public
  id<JavaLangIterable> is_;
}

#pragma mark Public

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)iterable;

- (void)callWithId:(RxSubscriber *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeFromIterable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeFromIterable, is_, id<JavaLangIterable>)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeFromIterable_initWithJavaLangIterable_(RxInternalOperatorsOnSubscribeFromIterable *self, id<JavaLangIterable> iterable);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromIterable *new_RxInternalOperatorsOnSubscribeFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> iterable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromIterable *create_RxInternalOperatorsOnSubscribeFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> iterable);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeFromIterable)

#endif

#if !defined (RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable || defined(INCLUDE_RxInternalOperatorsOnSubscribeFromIterable_IterableProducer))
#define RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "RxProducer.h"

@class RxSubscriber;
@protocol JavaUtilIterator;

@interface RxInternalOperatorsOnSubscribeFromIterable_IterableProducer : JavaUtilConcurrentAtomicAtomicLong < RxProducer >

#pragma mark Public

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithRxSubscriber:(RxSubscriber *)o
                withJavaUtilIterator:(id<JavaUtilIterator>)it;

- (void)fastPath;

- (void)slowPathWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeFromIterable_IterableProducer)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_initWithRxSubscriber_withJavaUtilIterator_(RxInternalOperatorsOnSubscribeFromIterable_IterableProducer *self, RxSubscriber *o, id<JavaUtilIterator> it);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromIterable_IterableProducer *new_RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_initWithRxSubscriber_withJavaUtilIterator_(RxSubscriber *o, id<JavaUtilIterator> it) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromIterable_IterableProducer *create_RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_initWithRxSubscriber_withJavaUtilIterator_(RxSubscriber *o, id<JavaUtilIterator> it);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeFromIterable_IterableProducer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable")
