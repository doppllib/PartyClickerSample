//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/types/BaseDataType.java
//

#include "AndroidDatabaseCursor.h"
#include "CoTouchlabSqueakyFieldBaseFieldConverter.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseDataType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"

@interface CoTouchlabSqueakyFieldTypesBaseDataType () {
 @public
  CoTouchlabSqueakyFieldSqlType *sqlType_;
  IOSObjectArray *classes_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesBaseDataType, sqlType_, CoTouchlabSqueakyFieldSqlType *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesBaseDataType, classes_, IOSObjectArray *)

inline IOSObjectArray *CoTouchlabSqueakyFieldTypesBaseDataType_get_NO_CLASSES();
static IOSObjectArray *CoTouchlabSqueakyFieldTypesBaseDataType_NO_CLASSES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBaseDataType, NO_CLASSES, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesBaseDataType)

@implementation CoTouchlabSqueakyFieldTypesBaseDataType

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_(self, sqlType);
  return self;
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)resultToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                            withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                              withInt:(jint)columnPos {
  return [self sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:fieldType withId:[self resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:fieldType withAndroidDatabaseCursor:results withInt:columnPos] withInt:columnPos];
}

- (id)makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  return nil;
}

- (CoTouchlabSqueakyFieldSqlType *)getSqlType {
  return sqlType_;
}

- (IOSObjectArray *)getAssociatedClasses {
  return classes_;
}

- (IOSObjectArray *)getAssociatedClassNames {
  return nil;
}

- (jboolean)isEscapedDefaultValue {
  return [self isEscapedValue];
}

- (jboolean)isEscapedValue {
  return true;
}

- (jboolean)isPrimitive {
  return false;
}

- (jboolean)isComparable {
  return true;
}

- (void)dealloc {
  RELEASE_(sqlType_);
  RELEASE_(classes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 6, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, 4, -1, -1, -1 },
    { NULL, "LCoTouchlabSqueakyFieldSqlType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:);
  methods[1].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:);
  methods[2].selector = @selector(parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:);
  methods[3].selector = @selector(resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  methods[4].selector = @selector(resultToJavaWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  methods[5].selector = @selector(makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:);
  methods[6].selector = @selector(getSqlType);
  methods[7].selector = @selector(getAssociatedClasses);
  methods[8].selector = @selector(getAssociatedClassNames);
  methods[9].selector = @selector(isEscapedDefaultValue);
  methods[10].selector = @selector(isEscapedValue);
  methods[11].selector = @selector(isPrimitive);
  methods[12].selector = @selector(isComparable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_CLASSES", "[LIOSClass;", .constantValue.asLong = 0, 0x1a, -1, 10, 11, -1 },
    { "sqlType_", "LCoTouchlabSqueakyFieldSqlType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classes_", "[LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldSqlType;[LIOSClass;", "LCoTouchlabSqueakyFieldSqlType;", "parseDefaultString", "LCoTouchlabSqueakyFieldFieldType;LNSString;", "LJavaSqlSQLException;", "resultToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LAndroidDatabaseCursor;I", "resultToJava", "makeConfigObject", "LCoTouchlabSqueakyFieldFieldType;", &CoTouchlabSqueakyFieldTypesBaseDataType_NO_CLASSES, "[Ljava/lang/Class<*>;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBaseDataType = { "BaseDataType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x401, 13, 3, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesBaseDataType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesBaseDataType class]) {
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesBaseDataType_NO_CLASSES, [IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]);
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesBaseDataType)
  }
}

@end

void CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesBaseDataType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldBaseFieldConverter_init(self);
  JreStrongAssign(&self->sqlType_, sqlType);
  JreStrongAssign(&self->classes_, classes);
}

void CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_(CoTouchlabSqueakyFieldTypesBaseDataType *self, CoTouchlabSqueakyFieldSqlType *sqlType) {
  CoTouchlabSqueakyFieldBaseFieldConverter_init(self);
  JreStrongAssign(&self->sqlType_, sqlType);
  JreStrongAssign(&self->classes_, CoTouchlabSqueakyFieldTypesBaseDataType_NO_CLASSES);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBaseDataType)
