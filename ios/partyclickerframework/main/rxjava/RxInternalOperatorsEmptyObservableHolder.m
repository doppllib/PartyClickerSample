//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalOperatorsEmptyObservableHolder.h"
#include "RxObservable.h"
#include "RxSubscriber.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static void RxInternalOperatorsEmptyObservableHolder_initWithNSString_withInt_(RxInternalOperatorsEmptyObservableHolder *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsEmptyObservableHolder)

RxObservable *RxInternalOperatorsEmptyObservableHolder_EMPTY;

RxInternalOperatorsEmptyObservableHolder *RxInternalOperatorsEmptyObservableHolder_values_[1];

@implementation RxInternalOperatorsEmptyObservableHolder

+ (RxObservable *)instance {
  return RxInternalOperatorsEmptyObservableHolder_instance();
}

- (void)callWithId:(RxSubscriber *)child {
  [((RxSubscriber *) nil_chk(child)) onCompleted];
}

+ (IOSObjectArray *)values {
  return RxInternalOperatorsEmptyObservableHolder_values();
}

+ (RxInternalOperatorsEmptyObservableHolder *)valueOfWithNSString:(NSString *)name {
  return RxInternalOperatorsEmptyObservableHolder_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "[LRxInternalOperatorsEmptyObservableHolder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxInternalOperatorsEmptyObservableHolder;", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalOperatorsEmptyObservableHolder;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "EMPTY", "LRxObservable;", .constantValue.asLong = 0, 0x18, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lrx/Observable<TT;>;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Object;>;)V", "valueOf", "LNSString;", &JreEnum(RxInternalOperatorsEmptyObservableHolder, INSTANCE), &RxInternalOperatorsEmptyObservableHolder_EMPTY, "Lrx/Observable<Ljava/lang/Object;>;", "Ljava/lang/Enum<Lrx/internal/operators/EmptyObservableHolder;>;Lrx/Observable$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsEmptyObservableHolder = { "EmptyObservableHolder", "rx.internal.operators", ptrTable, methods, fields, 7, 0x4011, 4, 2, -1, -1, -1, 9, -1 };
  return &_RxInternalOperatorsEmptyObservableHolder;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsEmptyObservableHolder class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 1 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"INSTANCE",
    };
    for (jint i = 0; i < 1; i++) {
      (RxInternalOperatorsEmptyObservableHolder_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RxInternalOperatorsEmptyObservableHolder_initWithNSString_withInt_(e, names[i], i);
    }
    JreStrongAssign(&RxInternalOperatorsEmptyObservableHolder_EMPTY, RxObservable_createWithRxObservable_OnSubscribe_(JreEnum(RxInternalOperatorsEmptyObservableHolder, INSTANCE)));
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsEmptyObservableHolder)
  }
}

@end

void RxInternalOperatorsEmptyObservableHolder_initWithNSString_withInt_(RxInternalOperatorsEmptyObservableHolder *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

RxObservable *RxInternalOperatorsEmptyObservableHolder_instance() {
  RxInternalOperatorsEmptyObservableHolder_initialize();
  return RxInternalOperatorsEmptyObservableHolder_EMPTY;
}

IOSObjectArray *RxInternalOperatorsEmptyObservableHolder_values() {
  RxInternalOperatorsEmptyObservableHolder_initialize();
  return [IOSObjectArray arrayWithObjects:RxInternalOperatorsEmptyObservableHolder_values_ count:1 type:RxInternalOperatorsEmptyObservableHolder_class_()];
}

RxInternalOperatorsEmptyObservableHolder *RxInternalOperatorsEmptyObservableHolder_valueOfWithNSString_(NSString *name) {
  RxInternalOperatorsEmptyObservableHolder_initialize();
  for (int i = 0; i < 1; i++) {
    RxInternalOperatorsEmptyObservableHolder *e = RxInternalOperatorsEmptyObservableHolder_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RxInternalOperatorsEmptyObservableHolder *RxInternalOperatorsEmptyObservableHolder_fromOrdinal(NSUInteger ordinal) {
  RxInternalOperatorsEmptyObservableHolder_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return RxInternalOperatorsEmptyObservableHolder_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsEmptyObservableHolder)
