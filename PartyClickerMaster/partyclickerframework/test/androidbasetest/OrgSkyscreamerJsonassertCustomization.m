//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertCustomization.h"
#include "OrgSkyscreamerJsonassertJSONCompareResult.h"
#include "OrgSkyscreamerJsonassertLocationAwareValueMatcher.h"
#include "OrgSkyscreamerJsonassertValueMatcher.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"

@interface OrgSkyscreamerJsonassertCustomization () {
 @public
  NSString *path_;
  id<OrgSkyscreamerJsonassertValueMatcher> comparator_;
}

@end

J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertCustomization, path_, NSString *)
J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertCustomization, comparator_, id<OrgSkyscreamerJsonassertValueMatcher>)

__attribute__((unused)) static IOSObjectArray *OrgSkyscreamerJsonassertCustomization__Annotations$0();

@implementation OrgSkyscreamerJsonassertCustomization

- (instancetype)initWithNSString:(NSString *)path
withOrgSkyscreamerJsonassertValueMatcher:(id<OrgSkyscreamerJsonassertValueMatcher>)comparator {
  OrgSkyscreamerJsonassertCustomization_initWithNSString_withOrgSkyscreamerJsonassertValueMatcher_(self, path, comparator);
  return self;
}

+ (OrgSkyscreamerJsonassertCustomization *)customizationWithNSString:(NSString *)path
                            withOrgSkyscreamerJsonassertValueMatcher:(id<OrgSkyscreamerJsonassertValueMatcher>)comparator {
  return OrgSkyscreamerJsonassertCustomization_customizationWithNSString_withOrgSkyscreamerJsonassertValueMatcher_(path, comparator);
}

- (jboolean)appliesToPathWithNSString:(NSString *)path {
  return [((NSString *) nil_chk(self->path_)) isEqual:path];
}

- (jboolean)matchesWithId:(id)actual
                   withId:(id)expected {
  return [((id<OrgSkyscreamerJsonassertValueMatcher>) nil_chk(comparator_)) equalWithId:actual withId:expected];
}

- (jboolean)matchesWithNSString:(NSString *)prefix
                         withId:(id)actual
                         withId:(id)expected
withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  if ([OrgSkyscreamerJsonassertLocationAwareValueMatcher_class_() isInstance:comparator_]) {
    return [((id<OrgSkyscreamerJsonassertLocationAwareValueMatcher>) nil_chk(((id<OrgSkyscreamerJsonassertLocationAwareValueMatcher>) cast_check(comparator_, OrgSkyscreamerJsonassertLocationAwareValueMatcher_class_())))) equalWithNSString:prefix withId:actual withId:expected withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
  return [((id<OrgSkyscreamerJsonassertValueMatcher>) nil_chk(comparator_)) equalWithId:actual withId:expected];
}

- (void)dealloc {
  RELEASE_(path_);
  RELEASE_(comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgSkyscreamerJsonassertCustomization;", 0x9, 2, 0, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, 8, -1 },
    { NULL, "Z", 0x1, 6, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withOrgSkyscreamerJsonassertValueMatcher:);
  methods[1].selector = @selector(customizationWithNSString:withOrgSkyscreamerJsonassertValueMatcher:);
  methods[2].selector = @selector(appliesToPathWithNSString:);
  methods[3].selector = @selector(matchesWithId:withId:);
  methods[4].selector = @selector(matchesWithNSString:withId:withId:withOrgSkyscreamerJsonassertJSONCompareResult:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "path_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "comparator_", "LOrgSkyscreamerJsonassertValueMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgSkyscreamerJsonassertValueMatcher;", "(Ljava/lang/String;Lorg/skyscreamer/jsonassert/ValueMatcher<Ljava/lang/Object;>;)V", "customization", "(Ljava/lang/String;Lorg/skyscreamer/jsonassert/ValueMatcher<Ljava/lang/Object;>;)Lorg/skyscreamer/jsonassert/Customization;", "appliesToPath", "LNSString;", "matches", "LNSObject;LNSObject;", (void *)&OrgSkyscreamerJsonassertCustomization__Annotations$0, "LNSString;LNSObject;LNSObject;LOrgSkyscreamerJsonassertJSONCompareResult;", "LOrgSkyscreamerJsonassertValueMatcherException;", "Lorg/skyscreamer/jsonassert/ValueMatcher<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertCustomization = { "Customization", "org.skyscreamer.jsonassert", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgSkyscreamerJsonassertCustomization;
}

@end

void OrgSkyscreamerJsonassertCustomization_initWithNSString_withOrgSkyscreamerJsonassertValueMatcher_(OrgSkyscreamerJsonassertCustomization *self, NSString *path, id<OrgSkyscreamerJsonassertValueMatcher> comparator) {
  NSObject_init(self);
  JreAssert((path != nil), (@"org/skyscreamer/jsonassert/Customization.java:11 condition failed: assert path != null;"));
  JreAssert((comparator != nil), (@"org/skyscreamer/jsonassert/Customization.java:12 condition failed: assert comparator != null;"));
  JreStrongAssign(&self->path_, path);
  JreStrongAssign(&self->comparator_, comparator);
}

OrgSkyscreamerJsonassertCustomization *new_OrgSkyscreamerJsonassertCustomization_initWithNSString_withOrgSkyscreamerJsonassertValueMatcher_(NSString *path, id<OrgSkyscreamerJsonassertValueMatcher> comparator) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertCustomization, initWithNSString_withOrgSkyscreamerJsonassertValueMatcher_, path, comparator)
}

OrgSkyscreamerJsonassertCustomization *create_OrgSkyscreamerJsonassertCustomization_initWithNSString_withOrgSkyscreamerJsonassertValueMatcher_(NSString *path, id<OrgSkyscreamerJsonassertValueMatcher> comparator) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertCustomization, initWithNSString_withOrgSkyscreamerJsonassertValueMatcher_, path, comparator)
}

OrgSkyscreamerJsonassertCustomization *OrgSkyscreamerJsonassertCustomization_customizationWithNSString_withOrgSkyscreamerJsonassertValueMatcher_(NSString *path, id<OrgSkyscreamerJsonassertValueMatcher> comparator) {
  OrgSkyscreamerJsonassertCustomization_initialize();
  return create_OrgSkyscreamerJsonassertCustomization_initWithNSString_withOrgSkyscreamerJsonassertValueMatcher_(path, comparator);
}

IOSObjectArray *OrgSkyscreamerJsonassertCustomization__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertCustomization)
