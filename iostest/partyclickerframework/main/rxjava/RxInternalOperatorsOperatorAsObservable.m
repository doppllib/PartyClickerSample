//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalOperatorsOperatorAsObservable.h"
#include "RxSubscriber.h"

@implementation RxInternalOperatorsOperatorAsObservable

+ (RxInternalOperatorsOperatorAsObservable *)instance {
  return RxInternalOperatorsOperatorAsObservable_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAsObservable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxSubscriber *)callWithId:(RxSubscriber *)s {
  return s;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalOperatorsOperatorAsObservable;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscriber;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lrx/internal/operators/OperatorAsObservable<TT;>;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOperatorAsObservable_Holder;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAsObservable = { "OperatorAsObservable", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, 4, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorAsObservable;
}

@end

RxInternalOperatorsOperatorAsObservable *RxInternalOperatorsOperatorAsObservable_instance() {
  RxInternalOperatorsOperatorAsObservable_initialize();
  return JreLoadStatic(RxInternalOperatorsOperatorAsObservable_Holder, INSTANCE);
}

void RxInternalOperatorsOperatorAsObservable_init(RxInternalOperatorsOperatorAsObservable *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAsObservable *new_RxInternalOperatorsOperatorAsObservable_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAsObservable, init)
}

RxInternalOperatorsOperatorAsObservable *create_RxInternalOperatorsOperatorAsObservable_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAsObservable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorAsObservable)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorAsObservable_Holder)

RxInternalOperatorsOperatorAsObservable *RxInternalOperatorsOperatorAsObservable_Holder_INSTANCE;

@implementation RxInternalOperatorsOperatorAsObservable_Holder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAsObservable_Holder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalOperatorsOperatorAsObservable;", .constantValue.asLong = 0, 0x18, -1, 0, 1, -1 },
  };
  static const void *ptrTable[] = { &RxInternalOperatorsOperatorAsObservable_Holder_INSTANCE, "Lrx/internal/operators/OperatorAsObservable<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorAsObservable;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAsObservable_Holder = { "Holder", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 1, 1, 2, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorAsObservable_Holder;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorAsObservable_Holder class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorAsObservable_Holder_INSTANCE, new_RxInternalOperatorsOperatorAsObservable_init());
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorAsObservable_Holder)
  }
}

@end

void RxInternalOperatorsOperatorAsObservable_Holder_init(RxInternalOperatorsOperatorAsObservable_Holder *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAsObservable_Holder *new_RxInternalOperatorsOperatorAsObservable_Holder_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAsObservable_Holder, init)
}

RxInternalOperatorsOperatorAsObservable_Holder *create_RxInternalOperatorsOperatorAsObservable_Holder_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAsObservable_Holder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorAsObservable_Holder)
