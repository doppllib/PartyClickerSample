//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilAtomicLinkedQueueNode.h"
#include "RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "java/util/AbstractQueue.h"
#include "sun/misc/Unsafe.h"

@implementation RxInternalUtilUnsafeBaseLinkedQueuePad0

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUnsafeBaseLinkedQueuePad0_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p00_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p01_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p02_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p03_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p04_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p05_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p06_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p07_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p30_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p31_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p32_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p33_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p34_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p35_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p36_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p37_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<E:Ljava/lang/Object;>Ljava/util/AbstractQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeBaseLinkedQueuePad0 = { "BaseLinkedQueuePad0", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x400, 1, 16, -1, -1, -1, 0, -1 };
  return &_RxInternalUtilUnsafeBaseLinkedQueuePad0;
}

@end

void RxInternalUtilUnsafeBaseLinkedQueuePad0_init(RxInternalUtilUnsafeBaseLinkedQueuePad0 *self) {
  JavaUtilAbstractQueue_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeBaseLinkedQueuePad0)

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef)

jlong RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_P_NODE_OFFSET;

@implementation RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)spProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:(RxInternalUtilAtomicLinkedQueueNode *)node {
  JreStrongAssign(&producerNode_, node);
}

- (RxInternalUtilAtomicLinkedQueueNode *)lvProducerNode {
  return (RxInternalUtilAtomicLinkedQueueNode *) cast_chk([((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) getObjectVolatileWithId:self withLong:RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_P_NODE_OFFSET], [RxInternalUtilAtomicLinkedQueueNode class]);
}

- (RxInternalUtilAtomicLinkedQueueNode *)lpProducerNode {
  return producerNode_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(producerNode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 0, 1, -1, 2, -1, -1 },
    { NULL, "LRxInternalUtilAtomicLinkedQueueNode;", 0x14, -1, -1, -1, 3, -1, -1 },
    { NULL, "LRxInternalUtilAtomicLinkedQueueNode;", 0x14, -1, -1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(spProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:);
  methods[2].selector = @selector(lvProducerNode);
  methods[3].selector = @selector(lpProducerNode);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "P_NODE_OFFSET", "J", .constantValue.asLong = 0, 0x1c, -1, 4, -1, -1 },
    { "producerNode_", "LRxInternalUtilAtomicLinkedQueueNode;", .constantValue.asLong = 0, 0x4, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "spProducerNode", "LRxInternalUtilAtomicLinkedQueueNode;", "(Lrx/internal/util/atomic/LinkedQueueNode<TE;>;)V", "()Lrx/internal/util/atomic/LinkedQueueNode<TE;>;", &RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_P_NODE_OFFSET, "Lrx/internal/util/atomic/LinkedQueueNode<TE;>;", "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/BaseLinkedQueuePad0<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef = { "BaseLinkedQueueProducerNodeRef", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x401, 4, 2, -1, -1, -1, 6, -1 };
  return &_RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef;
}

+ (void)initialize {
  if (self == [RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef class]) {
    RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_P_NODE_OFFSET = RxInternalUtilUnsafeUnsafeAccess_addressOfWithIOSClass_withNSString_(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_class_(), @"producerNode");
    J2OBJC_SET_INITIALIZED(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef)
  }
}

@end

void RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_init(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef *self) {
  RxInternalUtilUnsafeBaseLinkedQueuePad0_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef)
