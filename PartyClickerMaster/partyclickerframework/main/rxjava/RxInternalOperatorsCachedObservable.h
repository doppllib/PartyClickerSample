//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsCachedObservable")
#ifdef RESTRICT_RxInternalOperatorsCachedObservable
#define INCLUDE_ALL_RxInternalOperatorsCachedObservable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsCachedObservable 1
#endif
#undef RESTRICT_RxInternalOperatorsCachedObservable

#if !defined (RxInternalOperatorsCachedObservable_) && (INCLUDE_ALL_RxInternalOperatorsCachedObservable || defined(INCLUDE_RxInternalOperatorsCachedObservable))
#define RxInternalOperatorsCachedObservable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable 1
#include "RxObservable.h"

@interface RxInternalOperatorsCachedObservable : RxObservable

#pragma mark Public

+ (RxInternalOperatorsCachedObservable *)fromWithRxObservable:(RxObservable *)source;

+ (RxInternalOperatorsCachedObservable *)fromWithRxObservable:(RxObservable *)source
                                                      withInt:(jint)capacityHint;

#pragma mark Package-Private

- (jboolean)hasObservers;

- (jboolean)isConnected;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservable)

FOUNDATION_EXPORT RxInternalOperatorsCachedObservable *RxInternalOperatorsCachedObservable_fromWithRxObservable_(RxObservable *source);

FOUNDATION_EXPORT RxInternalOperatorsCachedObservable *RxInternalOperatorsCachedObservable_fromWithRxObservable_withInt_(RxObservable *source, jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCachedObservable)

#endif

#if !defined (RxInternalOperatorsCachedObservable_CacheState_) && (INCLUDE_ALL_RxInternalOperatorsCachedObservable || defined(INCLUDE_RxInternalOperatorsCachedObservable_CacheState))
#define RxInternalOperatorsCachedObservable_CacheState_

#define RESTRICT_RxInternalUtilLinkedArrayList 1
#define INCLUDE_RxInternalUtilLinkedArrayList 1
#include "RxInternalUtilLinkedArrayList.h"

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "RxObserver.h"

@class IOSObjectArray;
@class RxInternalOperatorsCachedObservable_ReplayProducer;
@class RxObservable;
@class RxSubscriptionsSerialSubscription;

@interface RxInternalOperatorsCachedObservable_CacheState : RxInternalUtilLinkedArrayList < RxObserver > {
 @public
  RxObservable *source_;
  RxSubscriptionsSerialSubscription *connection_;
  volatile_id producers_;
  volatile_jboolean isConnected_;
  jboolean sourceDone_;
}

#pragma mark Public

- (instancetype)initWithRxObservable:(RxObservable *)source
                             withInt:(jint)capacityHint;

- (void)addProducerWithRxInternalOperatorsCachedObservable_ReplayProducer:(RxInternalOperatorsCachedObservable_ReplayProducer *)p;

- (void)connect;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)removeProducerWithRxInternalOperatorsCachedObservable_ReplayProducer:(RxInternalOperatorsCachedObservable_ReplayProducer *)p;

#pragma mark Package-Private

- (void)dispatch;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsCachedObservable_CacheState)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservable_CacheState, source_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservable_CacheState, connection_, RxSubscriptionsSerialSubscription *)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsCachedObservable_CacheState, producers_, IOSObjectArray *)

inline IOSObjectArray *RxInternalOperatorsCachedObservable_CacheState_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *RxInternalOperatorsCachedObservable_CacheState_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsCachedObservable_CacheState, EMPTY, IOSObjectArray *)

FOUNDATION_EXPORT void RxInternalOperatorsCachedObservable_CacheState_initWithRxObservable_withInt_(RxInternalOperatorsCachedObservable_CacheState *self, RxObservable *source, jint capacityHint);

FOUNDATION_EXPORT RxInternalOperatorsCachedObservable_CacheState *new_RxInternalOperatorsCachedObservable_CacheState_initWithRxObservable_withInt_(RxObservable *source, jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCachedObservable_CacheState *create_RxInternalOperatorsCachedObservable_CacheState_initWithRxObservable_withInt_(RxObservable *source, jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCachedObservable_CacheState)

#endif

#if !defined (RxInternalOperatorsCachedObservable_CachedSubscribe_) && (INCLUDE_ALL_RxInternalOperatorsCachedObservable || defined(INCLUDE_RxInternalOperatorsCachedObservable_CachedSubscribe))
#define RxInternalOperatorsCachedObservable_CachedSubscribe_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

@class RxInternalOperatorsCachedObservable_CacheState;
@class RxSubscriber;

@interface RxInternalOperatorsCachedObservable_CachedSubscribe : JavaUtilConcurrentAtomicAtomicBoolean < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsCachedObservable_CacheState *state_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsCachedObservable_CacheState:(RxInternalOperatorsCachedObservable_CacheState *)state;

- (void)callWithId:(RxSubscriber *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservable_CachedSubscribe)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservable_CachedSubscribe, state_, RxInternalOperatorsCachedObservable_CacheState *)

FOUNDATION_EXPORT void RxInternalOperatorsCachedObservable_CachedSubscribe_initWithRxInternalOperatorsCachedObservable_CacheState_(RxInternalOperatorsCachedObservable_CachedSubscribe *self, RxInternalOperatorsCachedObservable_CacheState *state);

FOUNDATION_EXPORT RxInternalOperatorsCachedObservable_CachedSubscribe *new_RxInternalOperatorsCachedObservable_CachedSubscribe_initWithRxInternalOperatorsCachedObservable_CacheState_(RxInternalOperatorsCachedObservable_CacheState *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCachedObservable_CachedSubscribe *create_RxInternalOperatorsCachedObservable_CachedSubscribe_initWithRxInternalOperatorsCachedObservable_CacheState_(RxInternalOperatorsCachedObservable_CacheState *state);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCachedObservable_CachedSubscribe)

#endif

#if !defined (RxInternalOperatorsCachedObservable_ReplayProducer_) && (INCLUDE_ALL_RxInternalOperatorsCachedObservable || defined(INCLUDE_RxInternalOperatorsCachedObservable_ReplayProducer))
#define RxInternalOperatorsCachedObservable_ReplayProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "RxProducer.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "RxSubscription.h"

@class IOSObjectArray;
@class RxInternalOperatorsCachedObservable_CacheState;
@class RxSubscriber;

@interface RxInternalOperatorsCachedObservable_ReplayProducer : JavaUtilConcurrentAtomicAtomicLong < RxProducer, RxSubscription > {
 @public
  RxSubscriber *child_;
  __unsafe_unretained RxInternalOperatorsCachedObservable_CacheState *state_;
  IOSObjectArray *currentBuffer_;
  jint currentIndexInBuffer_;
  jint index_;
  jboolean emitting_;
  jboolean missed_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
withRxInternalOperatorsCachedObservable_CacheState:(RxInternalOperatorsCachedObservable_CacheState *)state;

- (jboolean)isUnsubscribed;

- (jlong)producedWithLong:(jlong)n;

- (void)replay;

- (void)requestWithLong:(jlong)n;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservable_ReplayProducer)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservable_ReplayProducer, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservable_ReplayProducer, currentBuffer_, IOSObjectArray *)

FOUNDATION_EXPORT void RxInternalOperatorsCachedObservable_ReplayProducer_initWithRxSubscriber_withRxInternalOperatorsCachedObservable_CacheState_(RxInternalOperatorsCachedObservable_ReplayProducer *self, RxSubscriber *child, RxInternalOperatorsCachedObservable_CacheState *state);

FOUNDATION_EXPORT RxInternalOperatorsCachedObservable_ReplayProducer *new_RxInternalOperatorsCachedObservable_ReplayProducer_initWithRxSubscriber_withRxInternalOperatorsCachedObservable_CacheState_(RxSubscriber *child, RxInternalOperatorsCachedObservable_CacheState *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCachedObservable_ReplayProducer *create_RxInternalOperatorsCachedObservable_ReplayProducer_initWithRxSubscriber_withRxInternalOperatorsCachedObservable_CacheState_(RxSubscriber *child, RxInternalOperatorsCachedObservable_CacheState *state);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCachedObservable_ReplayProducer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsCachedObservable")
