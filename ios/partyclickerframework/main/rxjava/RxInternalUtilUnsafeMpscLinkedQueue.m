//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalUtilAtomicLinkedQueueNode.h"
#include "RxInternalUtilUnsafeBaseLinkedQueue.h"
#include "RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef.h"
#include "RxInternalUtilUnsafeMpscLinkedQueue.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "java/lang/NullPointerException.h"
#include "sun/misc/Unsafe.h"

@implementation RxInternalUtilUnsafeMpscLinkedQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUnsafeMpscLinkedQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxInternalUtilAtomicLinkedQueueNode *)xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:(RxInternalUtilAtomicLinkedQueueNode *)newVal {
  id oldVal;
  do {
    oldVal = producerNode_;
  }
  while (![((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) compareAndSwapObjectWithId:self withLong:JreLoadStatic(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef, P_NODE_OFFSET) withId:oldVal withId:newVal]);
  return (RxInternalUtilAtomicLinkedQueueNode *) cast_chk(oldVal, [RxInternalUtilAtomicLinkedQueueNode class]);
}

- (jboolean)offerWithId:(id)nextValue {
  if (nextValue == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"null elements not allowed");
  }
  RxInternalUtilAtomicLinkedQueueNode *nextNode = create_RxInternalUtilAtomicLinkedQueueNode_initWithId_(nextValue);
  RxInternalUtilAtomicLinkedQueueNode *prevProducerNode = [self xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
  [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(prevProducerNode)) soNextWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
  return true;
}

- (id)poll {
  RxInternalUtilAtomicLinkedQueueNode *currConsumerNode = [self lpConsumerNode];
  RxInternalUtilAtomicLinkedQueueNode *nextNode = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(currConsumerNode)) lvNext];
  if (nextNode != nil) {
    id nextValue = [nextNode getAndNullValue];
    [self spConsumerNodeWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
    return nextValue;
  }
  else if (currConsumerNode != [self lvProducerNode]) {
    while ((nextNode = [currConsumerNode lvNext]) == nil) ;
    id nextValue = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(nextNode)) getAndNullValue];
    JreStrongAssign(&consumerNode_, nextNode);
    return nextValue;
  }
  return nil;
}

- (id)peek {
  RxInternalUtilAtomicLinkedQueueNode *currConsumerNode = consumerNode_;
  RxInternalUtilAtomicLinkedQueueNode *nextNode = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(currConsumerNode)) lvNext];
  if (nextNode != nil) {
    return [nextNode lpValue];
  }
  else if (currConsumerNode != [self lvProducerNode]) {
    while ((nextNode = [currConsumerNode lvNext]) == nil) ;
    return [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(nextNode)) lpValue];
  }
  return nil;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxInternalUtilAtomicLinkedQueueNode;", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:);
  methods[2].selector = @selector(offerWithId:);
  methods[3].selector = @selector(poll);
  methods[4].selector = @selector(peek);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "xchgProducerNode", "LRxInternalUtilAtomicLinkedQueueNode;", "(Lrx/internal/util/atomic/LinkedQueueNode<TE;>;)Lrx/internal/util/atomic/LinkedQueueNode<TE;>;", "offer", "LNSObject;", "(TE;)Z", "()TE;", "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/BaseLinkedQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeMpscLinkedQueue = { "MpscLinkedQueue", "rx.internal.util.unsafe", ptrTable, methods, NULL, 7, 0x11, 5, 0, -1, -1, -1, 7, -1 };
  return &_RxInternalUtilUnsafeMpscLinkedQueue;
}

@end

void RxInternalUtilUnsafeMpscLinkedQueue_init(RxInternalUtilUnsafeMpscLinkedQueue *self) {
  RxInternalUtilUnsafeBaseLinkedQueue_init(self);
  JreStrongAssignAndConsume(&self->consumerNode_, new_RxInternalUtilAtomicLinkedQueueNode_init());
  [self xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:self->consumerNode_];
}

RxInternalUtilUnsafeMpscLinkedQueue *new_RxInternalUtilUnsafeMpscLinkedQueue_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilUnsafeMpscLinkedQueue, init)
}

RxInternalUtilUnsafeMpscLinkedQueue *create_RxInternalUtilUnsafeMpscLinkedQueue_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilUnsafeMpscLinkedQueue, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeMpscLinkedQueue)
