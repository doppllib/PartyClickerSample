//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersCachedThreadScheduler")
#ifdef RESTRICT_RxInternalSchedulersCachedThreadScheduler
#define INCLUDE_ALL_RxInternalSchedulersCachedThreadScheduler 0
#else
#define INCLUDE_ALL_RxInternalSchedulersCachedThreadScheduler 1
#endif
#undef RESTRICT_RxInternalSchedulersCachedThreadScheduler

#if !defined (RxInternalSchedulersCachedThreadScheduler_) && (INCLUDE_ALL_RxInternalSchedulersCachedThreadScheduler || defined(INCLUDE_RxInternalSchedulersCachedThreadScheduler))
#define RxInternalSchedulersCachedThreadScheduler_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler 1
#include "RxScheduler.h"

#define RESTRICT_RxInternalSchedulersSchedulerLifecycle 1
#define INCLUDE_RxInternalSchedulersSchedulerLifecycle 1
#include "RxInternalSchedulersSchedulerLifecycle.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@class RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool;
@class RxInternalSchedulersCachedThreadScheduler_ThreadWorker;
@class RxScheduler_Worker;
@protocol JavaUtilConcurrentThreadFactory;

@interface RxInternalSchedulersCachedThreadScheduler : RxScheduler < RxInternalSchedulersSchedulerLifecycle > {
 @public
  id<JavaUtilConcurrentThreadFactory> threadFactory_;
  JavaUtilConcurrentAtomicAtomicReference *pool_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (RxScheduler_Worker *)createWorker;

- (void)shutdown;

- (void)start;

@end

J2OBJC_STATIC_INIT(RxInternalSchedulersCachedThreadScheduler)

J2OBJC_FIELD_SETTER(RxInternalSchedulersCachedThreadScheduler, threadFactory_, id<JavaUtilConcurrentThreadFactory>)
J2OBJC_FIELD_SETTER(RxInternalSchedulersCachedThreadScheduler, pool_, JavaUtilConcurrentAtomicAtomicReference *)

inline RxInternalSchedulersCachedThreadScheduler_ThreadWorker *RxInternalSchedulersCachedThreadScheduler_get_SHUTDOWN_THREADWORKER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler_ThreadWorker *RxInternalSchedulersCachedThreadScheduler_SHUTDOWN_THREADWORKER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalSchedulersCachedThreadScheduler, SHUTDOWN_THREADWORKER, RxInternalSchedulersCachedThreadScheduler_ThreadWorker *)

inline RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *RxInternalSchedulersCachedThreadScheduler_get_NONE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *RxInternalSchedulersCachedThreadScheduler_NONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalSchedulersCachedThreadScheduler, NONE, RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *)

FOUNDATION_EXPORT void RxInternalSchedulersCachedThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(RxInternalSchedulersCachedThreadScheduler *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler *new_RxInternalSchedulersCachedThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler *create_RxInternalSchedulersCachedThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersCachedThreadScheduler)

#endif

#if !defined (RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool_) && (INCLUDE_ALL_RxInternalSchedulersCachedThreadScheduler || defined(INCLUDE_RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool))
#define RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool_

@class JavaUtilConcurrentTimeUnit;
@class RxInternalSchedulersCachedThreadScheduler_ThreadWorker;
@protocol JavaUtilConcurrentThreadFactory;

@interface RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool : NSObject

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory
                                               withLong:(jlong)keepAliveTime
                         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)evictExpiredWorkers;

- (RxInternalSchedulersCachedThreadScheduler_ThreadWorker *)get;

- (jlong)now;

- (void)release__WithRxInternalSchedulersCachedThreadScheduler_ThreadWorker:(RxInternalSchedulersCachedThreadScheduler_ThreadWorker *)threadWorker;

- (void)shutdown;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool)

FOUNDATION_EXPORT void RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool_initWithJavaUtilConcurrentThreadFactory_withLong_withJavaUtilConcurrentTimeUnit_(RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *self, id<JavaUtilConcurrentThreadFactory> threadFactory, jlong keepAliveTime, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *new_RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool_initWithJavaUtilConcurrentThreadFactory_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentThreadFactory> threadFactory, jlong keepAliveTime, JavaUtilConcurrentTimeUnit *unit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *create_RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool_initWithJavaUtilConcurrentThreadFactory_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentThreadFactory> threadFactory, jlong keepAliveTime, JavaUtilConcurrentTimeUnit *unit);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool)

#endif

#if !defined (RxInternalSchedulersCachedThreadScheduler_EventLoopWorker_) && (INCLUDE_ALL_RxInternalSchedulersCachedThreadScheduler || defined(INCLUDE_RxInternalSchedulersCachedThreadScheduler_EventLoopWorker))
#define RxInternalSchedulersCachedThreadScheduler_EventLoopWorker_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler_Worker 1
#include "RxScheduler.h"

#define RESTRICT_RxFunctionsAction0 1
#define INCLUDE_RxFunctionsAction0 1
#include "RxFunctionsAction0.h"

@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentTimeUnit;
@class RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool;
@protocol RxSubscription;

@interface RxInternalSchedulersCachedThreadScheduler_EventLoopWorker : RxScheduler_Worker < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
}

#pragma mark Public

- (void)call;

- (jboolean)isUnsubscribed;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)unsubscribe;

#pragma mark Package-Private

- (instancetype)initWithRxInternalSchedulersCachedThreadScheduler_CachedWorkerPool:(RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *)pool;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersCachedThreadScheduler_EventLoopWorker)

J2OBJC_FIELD_SETTER(RxInternalSchedulersCachedThreadScheduler_EventLoopWorker, once_, JavaUtilConcurrentAtomicAtomicBoolean *)

FOUNDATION_EXPORT void RxInternalSchedulersCachedThreadScheduler_EventLoopWorker_initWithRxInternalSchedulersCachedThreadScheduler_CachedWorkerPool_(RxInternalSchedulersCachedThreadScheduler_EventLoopWorker *self, RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *pool);

FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler_EventLoopWorker *new_RxInternalSchedulersCachedThreadScheduler_EventLoopWorker_initWithRxInternalSchedulersCachedThreadScheduler_CachedWorkerPool_(RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *pool) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler_EventLoopWorker *create_RxInternalSchedulersCachedThreadScheduler_EventLoopWorker_initWithRxInternalSchedulersCachedThreadScheduler_CachedWorkerPool_(RxInternalSchedulersCachedThreadScheduler_CachedWorkerPool *pool);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersCachedThreadScheduler_EventLoopWorker)

#endif

#if !defined (RxInternalSchedulersCachedThreadScheduler_ThreadWorker_) && (INCLUDE_ALL_RxInternalSchedulersCachedThreadScheduler || defined(INCLUDE_RxInternalSchedulersCachedThreadScheduler_ThreadWorker))
#define RxInternalSchedulersCachedThreadScheduler_ThreadWorker_

#define RESTRICT_RxInternalSchedulersNewThreadWorker 1
#define INCLUDE_RxInternalSchedulersNewThreadWorker 1
#include "RxInternalSchedulersNewThreadWorker.h"

@protocol JavaUtilConcurrentThreadFactory;

@interface RxInternalSchedulersCachedThreadScheduler_ThreadWorker : RxInternalSchedulersNewThreadWorker

#pragma mark Public

- (jlong)getExpirationTime;

- (void)setExpirationTimeWithLong:(jlong)expirationTime;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersCachedThreadScheduler_ThreadWorker)

FOUNDATION_EXPORT void RxInternalSchedulersCachedThreadScheduler_ThreadWorker_initWithJavaUtilConcurrentThreadFactory_(RxInternalSchedulersCachedThreadScheduler_ThreadWorker *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler_ThreadWorker *new_RxInternalSchedulersCachedThreadScheduler_ThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersCachedThreadScheduler_ThreadWorker *create_RxInternalSchedulersCachedThreadScheduler_ThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersCachedThreadScheduler_ThreadWorker)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersCachedThreadScheduler")
