//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "CoTouchlabSqueakyDbSqliteSQLiteStatementImpl.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface CoTouchlabSqueakyDbSqliteSQLiteStatementImpl () {
 @public
  AndroidDatabaseSqliteSQLiteStatement *stmt_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyDbSqliteSQLiteStatementImpl, stmt_, AndroidDatabaseSqliteSQLiteStatement *)

@implementation CoTouchlabSqueakyDbSqliteSQLiteStatementImpl

- (instancetype)initWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)stmt {
  CoTouchlabSqueakyDbSqliteSQLiteStatementImpl_initWithAndroidDatabaseSqliteSQLiteStatement_(self, stmt);
  return self;
}

- (void)close {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) close];
}

- (jlong)executeInsert {
  return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) executeInsert];
}

- (jlong)executeUpdateDelete {
  return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) executeUpdateDelete];
}

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) bindBlobWithInt:index withByteArray:value];
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) bindDoubleWithInt:index withDouble:value];
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) bindLongWithInt:index withLong:value];
}

- (void)bindNullWithInt:(jint)index {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) bindNullWithInt:index];
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) bindStringWithInt:index withNSString:value];
}

- (void)clearBindings {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt_)) clearBindings];
}

- (void)dealloc {
  RELEASE_(stmt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteStatement:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(executeInsert);
  methods[3].selector = @selector(executeUpdateDelete);
  methods[4].selector = @selector(bindBlobWithInt:withByteArray:);
  methods[5].selector = @selector(bindDoubleWithInt:withDouble:);
  methods[6].selector = @selector(bindLongWithInt:withLong:);
  methods[7].selector = @selector(bindNullWithInt:);
  methods[8].selector = @selector(bindStringWithInt:withNSString:);
  methods[9].selector = @selector(clearBindings);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stmt_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteStatement;", "LAndroidDatabaseSqliteSQLiteException;", "bindBlob", "I[B", "bindDouble", "ID", "bindLong", "IJ", "bindNull", "I", "bindString", "ILNSString;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyDbSqliteSQLiteStatementImpl = { "SQLiteStatementImpl", "co.touchlab.squeaky.db.sqlite", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyDbSqliteSQLiteStatementImpl;
}

@end

void CoTouchlabSqueakyDbSqliteSQLiteStatementImpl_initWithAndroidDatabaseSqliteSQLiteStatement_(CoTouchlabSqueakyDbSqliteSQLiteStatementImpl *self, AndroidDatabaseSqliteSQLiteStatement *stmt) {
  NSObject_init(self);
  JreStrongAssign(&self->stmt_, stmt);
}

CoTouchlabSqueakyDbSqliteSQLiteStatementImpl *new_CoTouchlabSqueakyDbSqliteSQLiteStatementImpl_initWithAndroidDatabaseSqliteSQLiteStatement_(AndroidDatabaseSqliteSQLiteStatement *stmt) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyDbSqliteSQLiteStatementImpl, initWithAndroidDatabaseSqliteSQLiteStatement_, stmt)
}

CoTouchlabSqueakyDbSqliteSQLiteStatementImpl *create_CoTouchlabSqueakyDbSqliteSQLiteStatementImpl_initWithAndroidDatabaseSqliteSQLiteStatement_(AndroidDatabaseSqliteSQLiteStatement *stmt) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyDbSqliteSQLiteStatementImpl, initWithAndroidDatabaseSqliteSQLiteStatement_, stmt)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyDbSqliteSQLiteStatementImpl)
