//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSupportSQLiteOpenHelper.h"
#include "AndroidArchPersistenceRoomDatabaseConfiguration.h"
#include "AndroidArchPersistenceRoomRoomDatabase.h"
#include "AndroidContentContext.h"
#include "J2ObjC_source.h"

@implementation AndroidArchPersistenceRoomDatabaseConfiguration

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSString:(NSString *)name
withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory:(id<AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory>)sqliteOpenHelperFactory
withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer:(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *)migrationContainer
                                  withBoolean:(jboolean)allowMainThreadQueries {
  AndroidArchPersistenceRoomDatabaseConfiguration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer_withBoolean_(self, context, name, sqliteOpenHelperFactory, migrationContainer, allowMainThreadQueries);
  return self;
}

- (void)dealloc {
  RELEASE_(sqliteOpenHelperFactory_);
  RELEASE_(context_);
  RELEASE_(name_);
  RELEASE_(migrationContainer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:withNSString:withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory:withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sqliteOpenHelperFactory_", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "context_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "migrationContainer_", "LAndroidArchPersistenceRoomRoomDatabase_MigrationContainer;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "allowMainThreadQueries_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LNSString;LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory;LAndroidArchPersistenceRoomRoomDatabase_MigrationContainer;Z" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomDatabaseConfiguration = { "DatabaseConfiguration", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x1, 1, 5, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomDatabaseConfiguration;
}

@end

void AndroidArchPersistenceRoomDatabaseConfiguration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer_withBoolean_(AndroidArchPersistenceRoomDatabaseConfiguration *self, AndroidContentContext *context, NSString *name, id<AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory> sqliteOpenHelperFactory, AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *migrationContainer, jboolean allowMainThreadQueries) {
  NSObject_init(self);
  JreStrongAssign(&self->sqliteOpenHelperFactory_, sqliteOpenHelperFactory);
  JreStrongAssign(&self->context_, context);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->migrationContainer_, migrationContainer);
  self->allowMainThreadQueries_ = allowMainThreadQueries;
}

AndroidArchPersistenceRoomDatabaseConfiguration *new_AndroidArchPersistenceRoomDatabaseConfiguration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer_withBoolean_(AndroidContentContext *context, NSString *name, id<AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory> sqliteOpenHelperFactory, AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *migrationContainer, jboolean allowMainThreadQueries) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomDatabaseConfiguration, initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer_withBoolean_, context, name, sqliteOpenHelperFactory, migrationContainer, allowMainThreadQueries)
}

AndroidArchPersistenceRoomDatabaseConfiguration *create_AndroidArchPersistenceRoomDatabaseConfiguration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer_withBoolean_(AndroidContentContext *context, NSString *name, id<AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory> sqliteOpenHelperFactory, AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *migrationContainer, jboolean allowMainThreadQueries) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomDatabaseConfiguration, initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer_withBoolean_, context, name, sqliteOpenHelperFactory, migrationContainer, allowMainThreadQueries)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomDatabaseConfiguration)
