//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorTakeTimed")
#ifdef RESTRICT_RxInternalOperatorsOperatorTakeTimed
#define INCLUDE_ALL_RxInternalOperatorsOperatorTakeTimed 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorTakeTimed 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorTakeTimed

#if !defined (RxInternalOperatorsOperatorTakeTimed_) && (INCLUDE_ALL_RxInternalOperatorsOperatorTakeTimed || defined(INCLUDE_RxInternalOperatorsOperatorTakeTimed))
#define RxInternalOperatorsOperatorTakeTimed_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "RxObservable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubscriber;

@interface RxInternalOperatorsOperatorTakeTimed : NSObject < RxObservable_Operator > {
 @public
  jlong time_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTimed)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTimed, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTimed, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOperatorTakeTimed *self, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOperatorTakeTimed *new_RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorTakeTimed *create_RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTakeTimed)

#endif

#if !defined (RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorTakeTimed || defined(INCLUDE_RxInternalOperatorsOperatorTakeTimed_TakeSubscriber))
#define RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "RxSubscriber.h"

#define RESTRICT_RxFunctionsAction0 1
#define INCLUDE_RxFunctionsAction0 1
#include "RxFunctionsAction0.h"

@interface RxInternalOperatorsOperatorTakeTimed_TakeSubscriber : RxSubscriber < RxFunctionsAction0 > {
 @public
  RxSubscriber *child_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child;

- (void)call;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTimed_TakeSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTimed_TakeSubscriber, child_, RxSubscriber *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(RxInternalOperatorsOperatorTakeTimed_TakeSubscriber *self, RxSubscriber *child);

FOUNDATION_EXPORT RxInternalOperatorsOperatorTakeTimed_TakeSubscriber *new_RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(RxSubscriber *child) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorTakeTimed_TakeSubscriber *create_RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(RxSubscriber *child);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTakeTimed_TakeSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorTakeTimed")
