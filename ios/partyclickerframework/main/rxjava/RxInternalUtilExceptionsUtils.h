//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilExceptionsUtils")
#ifdef RESTRICT_RxInternalUtilExceptionsUtils
#define INCLUDE_ALL_RxInternalUtilExceptionsUtils 0
#else
#define INCLUDE_ALL_RxInternalUtilExceptionsUtils 1
#endif
#undef RESTRICT_RxInternalUtilExceptionsUtils

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (RxInternalUtilExceptionsUtils_) && (INCLUDE_ALL_RxInternalUtilExceptionsUtils || defined(INCLUDE_RxInternalUtilExceptionsUtils))
#define RxInternalUtilExceptionsUtils_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class JavaUtilConcurrentAtomicAtomicReference;

@interface RxInternalUtilExceptionsUtils : JavaLangEnum < NSCopying >

#pragma mark Public

+ (jboolean)addThrowableWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field
                                                    withNSException:(NSException *)error;

+ (jboolean)isTerminatedWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field;

+ (jboolean)isTerminatedWithNSException:(NSException *)error;

+ (NSException *)terminateWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field;

+ (RxInternalUtilExceptionsUtils *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(RxInternalUtilExceptionsUtils)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT RxInternalUtilExceptionsUtils *RxInternalUtilExceptionsUtils_values_[];

FOUNDATION_EXPORT jboolean RxInternalUtilExceptionsUtils_addThrowableWithJavaUtilConcurrentAtomicAtomicReference_withNSException_(JavaUtilConcurrentAtomicAtomicReference *field, NSException *error);

FOUNDATION_EXPORT NSException *RxInternalUtilExceptionsUtils_terminateWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *field);

FOUNDATION_EXPORT jboolean RxInternalUtilExceptionsUtils_isTerminatedWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *field);

FOUNDATION_EXPORT jboolean RxInternalUtilExceptionsUtils_isTerminatedWithNSException_(NSException *error);

FOUNDATION_EXPORT IOSObjectArray *RxInternalUtilExceptionsUtils_values();

FOUNDATION_EXPORT RxInternalUtilExceptionsUtils *RxInternalUtilExceptionsUtils_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT RxInternalUtilExceptionsUtils *RxInternalUtilExceptionsUtils_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilExceptionsUtils)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_RxInternalUtilExceptionsUtils")
