//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxAsyncEmitter.h"
#include "RxCompletableSubscriber.h"
#include "RxExceptionsExceptions.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsCompletableFromEmitter.h"
#include "RxInternalOperatorsOnSubscribeFromAsyncEmitter.h"
#include "RxInternalSubscriptionsSequentialSubscription.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxSubscription.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

inline jlong RxInternalOperatorsCompletableFromEmitter_FromEmitter_get_serialVersionUID();
#define RxInternalOperatorsCompletableFromEmitter_FromEmitter_serialVersionUID 5539301318568668881LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsCompletableFromEmitter_FromEmitter, serialVersionUID, jlong)

@implementation RxInternalOperatorsCompletableFromEmitter

- (instancetype)initWithRxFunctionsAction1:(id<RxFunctionsAction1>)producer {
  RxInternalOperatorsCompletableFromEmitter_initWithRxFunctionsAction1_(self, producer);
  return self;
}

- (void)callWithId:(id<RxCompletableSubscriber>)t {
  RxInternalOperatorsCompletableFromEmitter_FromEmitter *emitter = create_RxInternalOperatorsCompletableFromEmitter_FromEmitter_initWithRxCompletableSubscriber_(t);
  [((id<RxCompletableSubscriber>) nil_chk(t)) onSubscribeWithRxSubscription:emitter];
  @try {
    [((id<RxFunctionsAction1>) nil_chk(producer_)) callWithId:emitter];
  }
  @catch (NSException *ex) {
    RxExceptionsExceptions_throwIfFatalWithNSException_(ex);
    [emitter onErrorWithNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(producer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxFunctionsAction1:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "producer_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction1;", "(Lrx/functions/Action1<Lrx/CompletableEmitter;>;)V", "call", "LRxCompletableSubscriber;", "Lrx/functions/Action1<Lrx/CompletableEmitter;>;", "LRxInternalOperatorsCompletableFromEmitter_FromEmitter;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitter = { "CompletableFromEmitter", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, -1, -1 };
  return &_RxInternalOperatorsCompletableFromEmitter;
}

@end

void RxInternalOperatorsCompletableFromEmitter_initWithRxFunctionsAction1_(RxInternalOperatorsCompletableFromEmitter *self, id<RxFunctionsAction1> producer) {
  NSObject_init(self);
  JreStrongAssign(&self->producer_, producer);
}

RxInternalOperatorsCompletableFromEmitter *new_RxInternalOperatorsCompletableFromEmitter_initWithRxFunctionsAction1_(id<RxFunctionsAction1> producer) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitter, initWithRxFunctionsAction1_, producer)
}

RxInternalOperatorsCompletableFromEmitter *create_RxInternalOperatorsCompletableFromEmitter_initWithRxFunctionsAction1_(id<RxFunctionsAction1> producer) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitter, initWithRxFunctionsAction1_, producer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableFromEmitter)

@implementation RxInternalOperatorsCompletableFromEmitter_FromEmitter

- (instancetype)initWithRxCompletableSubscriber:(id<RxCompletableSubscriber>)actual {
  RxInternalOperatorsCompletableFromEmitter_FromEmitter_initWithRxCompletableSubscriber_(self, actual);
  return self;
}

- (void)onCompleted {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    @try {
      [((id<RxCompletableSubscriber>) nil_chk(actual_)) onCompleted];
    }
    @finally {
      [((RxInternalSubscriptionsSequentialSubscription *) nil_chk(resource_)) unsubscribe];
    }
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    @try {
      [((id<RxCompletableSubscriber>) nil_chk(actual_)) onErrorWithNSException:t];
    }
    @finally {
      [((RxInternalSubscriptionsSequentialSubscription *) nil_chk(resource_)) unsubscribe];
    }
  }
  else {
    RxPluginsRxJavaHooks_onErrorWithNSException_(t);
  }
}

- (void)setSubscriptionWithRxSubscription:(id<RxSubscription>)s {
  [((RxInternalSubscriptionsSequentialSubscription *) nil_chk(resource_)) updateWithRxSubscription:s];
}

- (void)setCancellationWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)c {
  [self setSubscriptionWithRxSubscription:create_RxInternalOperatorsOnSubscribeFromAsyncEmitter_CancellableSubscription_initWithRxAsyncEmitter_Cancellable_(c)];
}

- (void)unsubscribe {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxInternalSubscriptionsSequentialSubscription *) nil_chk(resource_)) unsubscribe];
  }
}

- (jboolean)isUnsubscribed {
  return [self get];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(resource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxCompletableSubscriber:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(setSubscriptionWithRxSubscription:);
  methods[4].selector = @selector(setCancellationWithRxAsyncEmitter_Cancellable:);
  methods[5].selector = @selector(unsubscribe);
  methods[6].selector = @selector(isUnsubscribed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalOperatorsCompletableFromEmitter_FromEmitter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LRxCompletableSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "resource_", "LRxInternalSubscriptionsSequentialSubscription;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableSubscriber;", "onError", "LNSException;", "setSubscription", "LRxSubscription;", "setCancellation", "LRxAsyncEmitter_Cancellable;", "LRxInternalOperatorsCompletableFromEmitter;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitter_FromEmitter = { "FromEmitter", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 7, 3, 7, -1, -1, -1, -1 };
  return &_RxInternalOperatorsCompletableFromEmitter_FromEmitter;
}

@end

void RxInternalOperatorsCompletableFromEmitter_FromEmitter_initWithRxCompletableSubscriber_(RxInternalOperatorsCompletableFromEmitter_FromEmitter *self, id<RxCompletableSubscriber> actual) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->resource_, new_RxInternalSubscriptionsSequentialSubscription_init());
}

RxInternalOperatorsCompletableFromEmitter_FromEmitter *new_RxInternalOperatorsCompletableFromEmitter_FromEmitter_initWithRxCompletableSubscriber_(id<RxCompletableSubscriber> actual) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitter_FromEmitter, initWithRxCompletableSubscriber_, actual)
}

RxInternalOperatorsCompletableFromEmitter_FromEmitter *create_RxInternalOperatorsCompletableFromEmitter_FromEmitter_initWithRxCompletableSubscriber_(id<RxCompletableSubscriber> actual) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitter_FromEmitter, initWithRxCompletableSubscriber_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableFromEmitter_FromEmitter)
