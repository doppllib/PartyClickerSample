//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreExecutorAppToolkitTaskExecutor.h"
#include "AndroidArchCoreExecutorDefaultTaskExecutor.h"
#include "AndroidArchCoreExecutorTaskExecutor.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"

@interface AndroidArchCoreExecutorAppToolkitTaskExecutor () {
 @public
  AndroidArchCoreExecutorTaskExecutor *mDelegate_;
  AndroidArchCoreExecutorTaskExecutor *mDefaultTaskExecutor_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AndroidArchCoreExecutorAppToolkitTaskExecutor, mDelegate_, AndroidArchCoreExecutorTaskExecutor *)
J2OBJC_FIELD_SETTER(AndroidArchCoreExecutorAppToolkitTaskExecutor, mDefaultTaskExecutor_, AndroidArchCoreExecutorTaskExecutor *)

inline AndroidArchCoreExecutorAppToolkitTaskExecutor *AndroidArchCoreExecutorAppToolkitTaskExecutor_get_sInstance();
inline AndroidArchCoreExecutorAppToolkitTaskExecutor *AndroidArchCoreExecutorAppToolkitTaskExecutor_set_sInstance(AndroidArchCoreExecutorAppToolkitTaskExecutor *value);
static volatile_id AndroidArchCoreExecutorAppToolkitTaskExecutor_sInstance;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(AndroidArchCoreExecutorAppToolkitTaskExecutor, sInstance, AndroidArchCoreExecutorAppToolkitTaskExecutor *)

__attribute__((unused)) static void AndroidArchCoreExecutorAppToolkitTaskExecutor_init(AndroidArchCoreExecutorAppToolkitTaskExecutor *self);

__attribute__((unused)) static AndroidArchCoreExecutorAppToolkitTaskExecutor *new_AndroidArchCoreExecutorAppToolkitTaskExecutor_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchCoreExecutorAppToolkitTaskExecutor *create_AndroidArchCoreExecutorAppToolkitTaskExecutor_init();

@implementation AndroidArchCoreExecutorAppToolkitTaskExecutor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchCoreExecutorAppToolkitTaskExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (AndroidArchCoreExecutorAppToolkitTaskExecutor *)getInstance {
  return AndroidArchCoreExecutorAppToolkitTaskExecutor_getInstance();
}

- (void)setDelegateWithAndroidArchCoreExecutorTaskExecutor:(AndroidArchCoreExecutorTaskExecutor *)taskExecutor {
  JreStrongAssign(&mDelegate_, taskExecutor == nil ? mDefaultTaskExecutor_ : taskExecutor);
}

- (void)executeOnDiskIOWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((AndroidArchCoreExecutorTaskExecutor *) nil_chk(mDelegate_)) executeOnDiskIOWithJavaLangRunnable:runnable];
}

- (void)postToMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((AndroidArchCoreExecutorTaskExecutor *) nil_chk(mDelegate_)) postToMainThreadWithJavaLangRunnable:runnable];
}

- (jboolean)isMainThread {
  return [((AndroidArchCoreExecutorTaskExecutor *) nil_chk(mDelegate_)) isMainThread];
}

- (void)dealloc {
  RELEASE_(mDelegate_);
  RELEASE_(mDefaultTaskExecutor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchCoreExecutorAppToolkitTaskExecutor;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(setDelegateWithAndroidArchCoreExecutorTaskExecutor:);
  methods[3].selector = @selector(executeOnDiskIOWithJavaLangRunnable:);
  methods[4].selector = @selector(postToMainThreadWithJavaLangRunnable:);
  methods[5].selector = @selector(isMainThread);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sInstance", "LAndroidArchCoreExecutorAppToolkitTaskExecutor;", .constantValue.asLong = 0, 0x4a, -1, 5, -1, -1 },
    { "mDelegate_", "LAndroidArchCoreExecutorTaskExecutor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultTaskExecutor_", "LAndroidArchCoreExecutorTaskExecutor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDelegate", "LAndroidArchCoreExecutorTaskExecutor;", "executeOnDiskIO", "LJavaLangRunnable;", "postToMainThread", &AndroidArchCoreExecutorAppToolkitTaskExecutor_sInstance };
  static const J2ObjcClassInfo _AndroidArchCoreExecutorAppToolkitTaskExecutor = { "AppToolkitTaskExecutor", "android.arch.core.executor", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_AndroidArchCoreExecutorAppToolkitTaskExecutor;
}

@end

void AndroidArchCoreExecutorAppToolkitTaskExecutor_init(AndroidArchCoreExecutorAppToolkitTaskExecutor *self) {
  AndroidArchCoreExecutorTaskExecutor_init(self);
  JreStrongAssignAndConsume(&self->mDefaultTaskExecutor_, new_AndroidArchCoreExecutorDefaultTaskExecutor_init());
  JreStrongAssign(&self->mDelegate_, self->mDefaultTaskExecutor_);
}

AndroidArchCoreExecutorAppToolkitTaskExecutor *new_AndroidArchCoreExecutorAppToolkitTaskExecutor_init() {
  J2OBJC_NEW_IMPL(AndroidArchCoreExecutorAppToolkitTaskExecutor, init)
}

AndroidArchCoreExecutorAppToolkitTaskExecutor *create_AndroidArchCoreExecutorAppToolkitTaskExecutor_init() {
  J2OBJC_CREATE_IMPL(AndroidArchCoreExecutorAppToolkitTaskExecutor, init)
}

AndroidArchCoreExecutorAppToolkitTaskExecutor *AndroidArchCoreExecutorAppToolkitTaskExecutor_getInstance() {
  AndroidArchCoreExecutorAppToolkitTaskExecutor_initialize();
  if (JreLoadVolatileId(&AndroidArchCoreExecutorAppToolkitTaskExecutor_sInstance) != nil) {
    return JreLoadVolatileId(&AndroidArchCoreExecutorAppToolkitTaskExecutor_sInstance);
  }
  @synchronized(AndroidArchCoreExecutorAppToolkitTaskExecutor_class_()) {
    if (JreLoadVolatileId(&AndroidArchCoreExecutorAppToolkitTaskExecutor_sInstance) == nil) {
      JreVolatileStrongAssign(&AndroidArchCoreExecutorAppToolkitTaskExecutor_sInstance, create_AndroidArchCoreExecutorAppToolkitTaskExecutor_init());
    }
  }
  return JreLoadVolatileId(&AndroidArchCoreExecutorAppToolkitTaskExecutor_sInstance);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchCoreExecutorAppToolkitTaskExecutor)
