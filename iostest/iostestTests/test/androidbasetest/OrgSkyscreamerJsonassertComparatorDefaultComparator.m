//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertComparatorAbstractComparator.h"
#include "OrgSkyscreamerJsonassertComparatorDefaultComparator.h"
#include "OrgSkyscreamerJsonassertComparatorJSONCompareUtil.h"
#include "OrgSkyscreamerJsonassertJSONCompareMode.h"
#include "OrgSkyscreamerJsonassertJSONCompareResult.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

@implementation OrgSkyscreamerJsonassertComparatorDefaultComparator

- (instancetype)initWithOrgSkyscreamerJsonassertJSONCompareMode:(OrgSkyscreamerJsonassertJSONCompareMode *)mode {
  OrgSkyscreamerJsonassertComparatorDefaultComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_(self, mode);
  return self;
}

- (void)compareJSONWithNSString:(NSString *)prefix
          withOrgJsonJSONObject:(OrgJsonJSONObject *)expected
          withOrgJsonJSONObject:(OrgJsonJSONObject *)actual
withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  [self checkJsonObjectKeysExpectedInActualWithNSString:prefix withOrgJsonJSONObject:expected withOrgJsonJSONObject:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
  if (![((OrgSkyscreamerJsonassertJSONCompareMode *) nil_chk(mode_)) isExtensible]) {
    [self checkJsonObjectKeysActualInExpectedWithNSString:prefix withOrgJsonJSONObject:expected withOrgJsonJSONObject:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
}

- (void)compareValuesWithNSString:(NSString *)prefix
                           withId:(id)expectedValue
                           withId:(id)actualValue
withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  if ([expectedValue isKindOfClass:[NSNumber class]] && [actualValue isKindOfClass:[NSNumber class]]) {
    if ([((NSNumber *) nil_chk(((NSNumber *) cast_chk(expectedValue, [NSNumber class])))) doubleValue] != [((NSNumber *) nil_chk(((NSNumber *) cast_chk(actualValue, [NSNumber class])))) doubleValue]) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) failWithNSString:prefix withId:expectedValue withId:actualValue];
    }
  }
  else if ([[nil_chk(expectedValue) java_getClass] isAssignableFrom:[nil_chk(actualValue) java_getClass]]) {
    if ([expectedValue isKindOfClass:[OrgJsonJSONArray class]]) {
      [self compareJSONArrayWithNSString:prefix withOrgJsonJSONArray:(OrgJsonJSONArray *) cast_chk(expectedValue, [OrgJsonJSONArray class]) withOrgJsonJSONArray:(OrgJsonJSONArray *) cast_chk(actualValue, [OrgJsonJSONArray class]) withOrgSkyscreamerJsonassertJSONCompareResult:result];
    }
    else if ([expectedValue isKindOfClass:[OrgJsonJSONObject class]]) {
      [self compareJSONWithNSString:prefix withOrgJsonJSONObject:(OrgJsonJSONObject *) cast_chk(expectedValue, [OrgJsonJSONObject class]) withOrgJsonJSONObject:(OrgJsonJSONObject *) cast_chk(actualValue, [OrgJsonJSONObject class]) withOrgSkyscreamerJsonassertJSONCompareResult:result];
    }
    else if (![expectedValue isEqual:actualValue]) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) failWithNSString:prefix withId:expectedValue withId:actualValue];
    }
  }
  else {
    [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) failWithNSString:prefix withId:expectedValue withId:actualValue];
  }
}

- (void)compareJSONArrayWithNSString:(NSString *)prefix
                withOrgJsonJSONArray:(OrgJsonJSONArray *)expected
                withOrgJsonJSONArray:(OrgJsonJSONArray *)actual
withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  if ([((OrgJsonJSONArray *) nil_chk(expected)) length] != [((OrgJsonJSONArray *) nil_chk(actual)) length]) {
    [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) failWithNSString:JreStrcat("$$I$I", prefix, @"[]: Expected ", [expected length], @" values but got ", [actual length])];
    return;
  }
  else if ([expected length] == 0) {
    return;
  }
  if ([((OrgSkyscreamerJsonassertJSONCompareMode *) nil_chk(mode_)) hasStrictOrder]) {
    [self compareJSONArrayWithStrictOrderWithNSString:prefix withOrgJsonJSONArray:expected withOrgJsonJSONArray:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
  else if (OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allSimpleValuesWithOrgJsonJSONArray_(expected)) {
    [self compareJSONArrayOfSimpleValuesWithNSString:prefix withOrgJsonJSONArray:expected withOrgJsonJSONArray:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
  else if (OrgSkyscreamerJsonassertComparatorJSONCompareUtil_allJSONObjectsWithOrgJsonJSONArray_(expected)) {
    [self compareJSONArrayOfJsonObjectsWithNSString:prefix withOrgJsonJSONArray:expected withOrgJsonJSONArray:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
  else {
    [self recursivelyCompareJSONArrayWithNSString:prefix withOrgJsonJSONArray:expected withOrgJsonJSONArray:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
}

- (void)dealloc {
  RELEASE_(mode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgSkyscreamerJsonassertJSONCompareMode:);
  methods[1].selector = @selector(compareJSONWithNSString:withOrgJsonJSONObject:withOrgJsonJSONObject:withOrgSkyscreamerJsonassertJSONCompareResult:);
  methods[2].selector = @selector(compareValuesWithNSString:withId:withId:withOrgSkyscreamerJsonassertJSONCompareResult:);
  methods[3].selector = @selector(compareJSONArrayWithNSString:withOrgJsonJSONArray:withOrgJsonJSONArray:withOrgSkyscreamerJsonassertJSONCompareResult:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mode_", "LOrgSkyscreamerJsonassertJSONCompareMode;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSkyscreamerJsonassertJSONCompareMode;", "compareJSON", "LNSString;LOrgJsonJSONObject;LOrgJsonJSONObject;LOrgSkyscreamerJsonassertJSONCompareResult;", "LOrgJsonJSONException;", "compareValues", "LNSString;LNSObject;LNSObject;LOrgSkyscreamerJsonassertJSONCompareResult;", "compareJSONArray", "LNSString;LOrgJsonJSONArray;LOrgJsonJSONArray;LOrgSkyscreamerJsonassertJSONCompareResult;" };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertComparatorDefaultComparator = { "DefaultComparator", "org.skyscreamer.jsonassert.comparator", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgSkyscreamerJsonassertComparatorDefaultComparator;
}

@end

void OrgSkyscreamerJsonassertComparatorDefaultComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_(OrgSkyscreamerJsonassertComparatorDefaultComparator *self, OrgSkyscreamerJsonassertJSONCompareMode *mode) {
  OrgSkyscreamerJsonassertComparatorAbstractComparator_init(self);
  JreStrongAssign(&self->mode_, mode);
}

OrgSkyscreamerJsonassertComparatorDefaultComparator *new_OrgSkyscreamerJsonassertComparatorDefaultComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_(OrgSkyscreamerJsonassertJSONCompareMode *mode) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertComparatorDefaultComparator, initWithOrgSkyscreamerJsonassertJSONCompareMode_, mode)
}

OrgSkyscreamerJsonassertComparatorDefaultComparator *create_OrgSkyscreamerJsonassertComparatorDefaultComparator_initWithOrgSkyscreamerJsonassertJSONCompareMode_(OrgSkyscreamerJsonassertJSONCompareMode *mode) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertComparatorDefaultComparator, initWithOrgSkyscreamerJsonassertJSONCompareMode_, mode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertComparatorDefaultComparator)
