//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsAssemblyStackTraceException.h"
#include "RxInternalOperatorsOnSubscribeOnAssembly.h"
#include "RxObservable.h"
#include "RxSubscriber.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"

volatile_jboolean RxInternalOperatorsOnSubscribeOnAssembly_fullStackTrace;

@implementation RxInternalOperatorsOnSubscribeOnAssembly

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)source {
  RxInternalOperatorsOnSubscribeOnAssembly_initWithRxObservable_OnSubscribe_(self, source);
  return self;
}

+ (NSString *)createStacktrace {
  return RxInternalOperatorsOnSubscribeOnAssembly_createStacktrace();
}

- (void)callWithId:(RxSubscriber *)t {
  [((id<RxObservable_OnSubscribe>) nil_chk(source_)) callWithId:create_RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber_initWithRxSubscriber_withNSString_(t, stacktrace_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(stacktrace_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObservable_OnSubscribe:);
  methods[1].selector = @selector(createStacktrace);
  methods[2].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxObservable_OnSubscribe;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "stacktrace_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fullStackTrace", "Z", .constantValue.asLong = 0, 0x49, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservable_OnSubscribe;", "(Lrx/Observable$OnSubscribe<TT;>;)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "Lrx/Observable$OnSubscribe<TT;>;", &RxInternalOperatorsOnSubscribeOnAssembly_fullStackTrace, "LRxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeOnAssembly = { "OnSubscribeOnAssembly", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, 7, -1, 8, -1 };
  return &_RxInternalOperatorsOnSubscribeOnAssembly;
}

@end

void RxInternalOperatorsOnSubscribeOnAssembly_initWithRxObservable_OnSubscribe_(RxInternalOperatorsOnSubscribeOnAssembly *self, id<RxObservable_OnSubscribe> source) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->stacktrace_, RxInternalOperatorsOnSubscribeOnAssembly_createStacktrace());
}

RxInternalOperatorsOnSubscribeOnAssembly *new_RxInternalOperatorsOnSubscribeOnAssembly_initWithRxObservable_OnSubscribe_(id<RxObservable_OnSubscribe> source) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeOnAssembly, initWithRxObservable_OnSubscribe_, source)
}

RxInternalOperatorsOnSubscribeOnAssembly *create_RxInternalOperatorsOnSubscribeOnAssembly_initWithRxObservable_OnSubscribe_(id<RxObservable_OnSubscribe> source) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeOnAssembly, initWithRxObservable_OnSubscribe_, source)
}

NSString *RxInternalOperatorsOnSubscribeOnAssembly_createStacktrace() {
  RxInternalOperatorsOnSubscribeOnAssembly_initialize();
  IOSObjectArray *stacktraceElements = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getStackTrace];
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(@"Assembly trace:");
  {
    IOSObjectArray *a__ = stacktraceElements;
    JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangStackTraceElement *e = *b__++;
      NSString *row = [((JavaLangStackTraceElement *) nil_chk(e)) description];
      if (!JreLoadVolatileBoolean(&RxInternalOperatorsOnSubscribeOnAssembly_fullStackTrace)) {
        if ([e getLineNumber] <= 1) {
          continue;
        }
        if ([((NSString *) nil_chk(row)) java_contains:@"RxJavaHooks."]) {
          continue;
        }
        if ([row java_contains:@"OnSubscribeOnAssembly"]) {
          continue;
        }
        if ([row java_contains:@".junit.runner"]) {
          continue;
        }
        if ([row java_contains:@".junit4.runner"]) {
          continue;
        }
        if ([row java_contains:@".junit.internal"]) {
          continue;
        }
        if ([row java_contains:@"sun.reflect"]) {
          continue;
        }
        if ([row java_contains:@"java.lang.Thread."]) {
          continue;
        }
        if ([row java_contains:@"ThreadPoolExecutor"]) {
          continue;
        }
        if ([row java_contains:@"org.apache.catalina."]) {
          continue;
        }
        if ([row java_contains:@"org.apache.tomcat."]) {
          continue;
        }
      }
      [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\n at "])) appendWithNSString:row];
    }
  }
  return [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\nOriginal exception:"])) description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeOnAssembly)

@implementation RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
                        withNSString:(NSString *)stacktrace {
  RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber_initWithRxSubscriber_withNSString_(self, actual, stacktrace);
  return self;
}

- (void)onCompleted {
  [((RxSubscriber *) nil_chk(actual_)) onCompleted];
}

- (void)onErrorWithNSException:(NSException *)e {
  [create_RxExceptionsAssemblyStackTraceException_initWithNSString_(stacktrace_) attachToWithNSException:e];
  [((RxSubscriber *) nil_chk(actual_)) onErrorWithNSException:e];
}

- (void)onNextWithId:(id)t {
  [((RxSubscriber *) nil_chk(actual_)) onNextWithId:t];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(stacktrace_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:withNSString:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "stacktrace_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LNSString;", "(Lrx/Subscriber<-TT;>;Ljava/lang/String;)V", "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOnSubscribeOnAssembly;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber = { "OnAssemblySubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 4, 2, 8, -1, -1, 9, -1 };
  return &_RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber;
}

@end

void RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber_initWithRxSubscriber_withNSString_(RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber *self, RxSubscriber *actual, NSString *stacktrace) {
  RxSubscriber_initWithRxSubscriber_(self, actual);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->stacktrace_, stacktrace);
}

RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber *new_RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber_initWithRxSubscriber_withNSString_(RxSubscriber *actual, NSString *stacktrace) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber, initWithRxSubscriber_withNSString_, actual, stacktrace)
}

RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber *create_RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber_initWithRxSubscriber_withNSString_(RxSubscriber *actual, NSString *stacktrace) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber, initWithRxSubscriber_withNSString_, actual, stacktrace)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeOnAssembly_OnAssemblySubscriber)
