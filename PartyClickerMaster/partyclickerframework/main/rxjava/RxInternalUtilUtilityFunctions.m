//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalUtilUtilityFunctions.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@interface RxInternalUtilUtilityFunctions ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalUtilUtilityFunctions_init(RxInternalUtilUtilityFunctions *self);

__attribute__((unused)) static RxInternalUtilUtilityFunctions *new_RxInternalUtilUtilityFunctions_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilUtilityFunctions *create_RxInternalUtilUtilityFunctions_init();

@interface RxInternalUtilUtilityFunctions_1 : NSObject < RxFunctionsFunc1 >

- (instancetype)init;

- (id)callWithId:(id)o;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUtilityFunctions_1)

__attribute__((unused)) static void RxInternalUtilUtilityFunctions_1_init(RxInternalUtilUtilityFunctions_1 *self);

__attribute__((unused)) static RxInternalUtilUtilityFunctions_1 *new_RxInternalUtilUtilityFunctions_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilUtilityFunctions_1 *create_RxInternalUtilUtilityFunctions_1_init();

__attribute__((unused)) static void RxInternalUtilUtilityFunctions_AlwaysTrue_initWithNSString_withInt_(RxInternalUtilUtilityFunctions_AlwaysTrue *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void RxInternalUtilUtilityFunctions_AlwaysFalse_initWithNSString_withInt_(RxInternalUtilUtilityFunctions_AlwaysFalse *self, NSString *__name, jint __ordinal);

@implementation RxInternalUtilUtilityFunctions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUtilityFunctions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<RxFunctionsFunc1>)alwaysTrue {
  return RxInternalUtilUtilityFunctions_alwaysTrue();
}

+ (id<RxFunctionsFunc1>)alwaysFalse {
  return RxInternalUtilUtilityFunctions_alwaysFalse();
}

+ (id<RxFunctionsFunc1>)identity {
  return RxInternalUtilUtilityFunctions_identity();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxFunctionsFunc1;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LRxFunctionsFunc1;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LRxFunctionsFunc1;", 0x9, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(alwaysTrue);
  methods[2].selector = @selector(alwaysFalse);
  methods[3].selector = @selector(identity);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lrx/functions/Func1<-TT;Ljava/lang/Boolean;>;", "<T:Ljava/lang/Object;>()Lrx/functions/Func1<TT;TT;>;", "LRxInternalUtilUtilityFunctions_AlwaysTrue;LRxInternalUtilUtilityFunctions_AlwaysFalse;" };
  static const J2ObjcClassInfo _RxInternalUtilUtilityFunctions = { "UtilityFunctions", "rx.internal.util", ptrTable, methods, NULL, 7, 0x11, 4, 0, -1, 2, -1, -1, -1 };
  return &_RxInternalUtilUtilityFunctions;
}

@end

void RxInternalUtilUtilityFunctions_init(RxInternalUtilUtilityFunctions *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxInternalUtilUtilityFunctions *new_RxInternalUtilUtilityFunctions_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilUtilityFunctions, init)
}

RxInternalUtilUtilityFunctions *create_RxInternalUtilUtilityFunctions_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilUtilityFunctions, init)
}

id<RxFunctionsFunc1> RxInternalUtilUtilityFunctions_alwaysTrue() {
  RxInternalUtilUtilityFunctions_initialize();
  return JreLoadEnum(RxInternalUtilUtilityFunctions_AlwaysTrue, INSTANCE);
}

id<RxFunctionsFunc1> RxInternalUtilUtilityFunctions_alwaysFalse() {
  RxInternalUtilUtilityFunctions_initialize();
  return JreLoadEnum(RxInternalUtilUtilityFunctions_AlwaysFalse, INSTANCE);
}

id<RxFunctionsFunc1> RxInternalUtilUtilityFunctions_identity() {
  RxInternalUtilUtilityFunctions_initialize();
  return create_RxInternalUtilUtilityFunctions_1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUtilityFunctions)

@implementation RxInternalUtilUtilityFunctions_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUtilityFunctions_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)callWithId:(id)o {
  return o;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "(TT;)TT;", "LRxInternalUtilUtilityFunctions;", "identity", "Ljava/lang/Object;Lrx/functions/Func1<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUtilityFunctions_1 = { "", "rx.internal.util", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalUtilUtilityFunctions_1;
}

@end

void RxInternalUtilUtilityFunctions_1_init(RxInternalUtilUtilityFunctions_1 *self) {
  NSObject_init(self);
}

RxInternalUtilUtilityFunctions_1 *new_RxInternalUtilUtilityFunctions_1_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilUtilityFunctions_1, init)
}

RxInternalUtilUtilityFunctions_1 *create_RxInternalUtilUtilityFunctions_1_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilUtilityFunctions_1, init)
}

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUtilityFunctions_AlwaysTrue)

RxInternalUtilUtilityFunctions_AlwaysTrue *RxInternalUtilUtilityFunctions_AlwaysTrue_values_[1];

@implementation RxInternalUtilUtilityFunctions_AlwaysTrue

- (JavaLangBoolean *)callWithId:(id)o {
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

+ (IOSObjectArray *)values {
  return RxInternalUtilUtilityFunctions_AlwaysTrue_values();
}

+ (RxInternalUtilUtilityFunctions_AlwaysTrue *)valueOfWithNSString:(NSString *)name {
  return RxInternalUtilUtilityFunctions_AlwaysTrue_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LRxInternalUtilUtilityFunctions_AlwaysTrue;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxInternalUtilUtilityFunctions_AlwaysTrue;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalUtilUtilityFunctions_AlwaysTrue;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "valueOf", "LNSString;", &JreEnum(RxInternalUtilUtilityFunctions_AlwaysTrue, INSTANCE), "LRxInternalUtilUtilityFunctions;", "Ljava/lang/Enum<Lrx/internal/util/UtilityFunctions$AlwaysTrue;>;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUtilityFunctions_AlwaysTrue = { "AlwaysTrue", "rx.internal.util", ptrTable, methods, fields, 7, 0x4018, 3, 1, 5, -1, -1, 6, -1 };
  return &_RxInternalUtilUtilityFunctions_AlwaysTrue;
}

+ (void)initialize {
  if (self == [RxInternalUtilUtilityFunctions_AlwaysTrue class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 1 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"INSTANCE",
    };
    for (jint i = 0; i < 1; i++) {
      (RxInternalUtilUtilityFunctions_AlwaysTrue_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RxInternalUtilUtilityFunctions_AlwaysTrue_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RxInternalUtilUtilityFunctions_AlwaysTrue)
  }
}

@end

void RxInternalUtilUtilityFunctions_AlwaysTrue_initWithNSString_withInt_(RxInternalUtilUtilityFunctions_AlwaysTrue *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RxInternalUtilUtilityFunctions_AlwaysTrue_values() {
  RxInternalUtilUtilityFunctions_AlwaysTrue_initialize();
  return [IOSObjectArray arrayWithObjects:RxInternalUtilUtilityFunctions_AlwaysTrue_values_ count:1 type:RxInternalUtilUtilityFunctions_AlwaysTrue_class_()];
}

RxInternalUtilUtilityFunctions_AlwaysTrue *RxInternalUtilUtilityFunctions_AlwaysTrue_valueOfWithNSString_(NSString *name) {
  RxInternalUtilUtilityFunctions_AlwaysTrue_initialize();
  for (int i = 0; i < 1; i++) {
    RxInternalUtilUtilityFunctions_AlwaysTrue *e = RxInternalUtilUtilityFunctions_AlwaysTrue_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RxInternalUtilUtilityFunctions_AlwaysTrue *RxInternalUtilUtilityFunctions_AlwaysTrue_fromOrdinal(NSUInteger ordinal) {
  RxInternalUtilUtilityFunctions_AlwaysTrue_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return RxInternalUtilUtilityFunctions_AlwaysTrue_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUtilityFunctions_AlwaysTrue)

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUtilityFunctions_AlwaysFalse)

RxInternalUtilUtilityFunctions_AlwaysFalse *RxInternalUtilUtilityFunctions_AlwaysFalse_values_[1];

@implementation RxInternalUtilUtilityFunctions_AlwaysFalse

- (JavaLangBoolean *)callWithId:(id)o {
  return JavaLangBoolean_valueOfWithBoolean_(false);
}

+ (IOSObjectArray *)values {
  return RxInternalUtilUtilityFunctions_AlwaysFalse_values();
}

+ (RxInternalUtilUtilityFunctions_AlwaysFalse *)valueOfWithNSString:(NSString *)name {
  return RxInternalUtilUtilityFunctions_AlwaysFalse_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LRxInternalUtilUtilityFunctions_AlwaysFalse;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxInternalUtilUtilityFunctions_AlwaysFalse;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalUtilUtilityFunctions_AlwaysFalse;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "valueOf", "LNSString;", &JreEnum(RxInternalUtilUtilityFunctions_AlwaysFalse, INSTANCE), "LRxInternalUtilUtilityFunctions;", "Ljava/lang/Enum<Lrx/internal/util/UtilityFunctions$AlwaysFalse;>;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUtilityFunctions_AlwaysFalse = { "AlwaysFalse", "rx.internal.util", ptrTable, methods, fields, 7, 0x4018, 3, 1, 5, -1, -1, 6, -1 };
  return &_RxInternalUtilUtilityFunctions_AlwaysFalse;
}

+ (void)initialize {
  if (self == [RxInternalUtilUtilityFunctions_AlwaysFalse class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 1 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"INSTANCE",
    };
    for (jint i = 0; i < 1; i++) {
      (RxInternalUtilUtilityFunctions_AlwaysFalse_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RxInternalUtilUtilityFunctions_AlwaysFalse_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RxInternalUtilUtilityFunctions_AlwaysFalse)
  }
}

@end

void RxInternalUtilUtilityFunctions_AlwaysFalse_initWithNSString_withInt_(RxInternalUtilUtilityFunctions_AlwaysFalse *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RxInternalUtilUtilityFunctions_AlwaysFalse_values() {
  RxInternalUtilUtilityFunctions_AlwaysFalse_initialize();
  return [IOSObjectArray arrayWithObjects:RxInternalUtilUtilityFunctions_AlwaysFalse_values_ count:1 type:RxInternalUtilUtilityFunctions_AlwaysFalse_class_()];
}

RxInternalUtilUtilityFunctions_AlwaysFalse *RxInternalUtilUtilityFunctions_AlwaysFalse_valueOfWithNSString_(NSString *name) {
  RxInternalUtilUtilityFunctions_AlwaysFalse_initialize();
  for (int i = 0; i < 1; i++) {
    RxInternalUtilUtilityFunctions_AlwaysFalse *e = RxInternalUtilUtilityFunctions_AlwaysFalse_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RxInternalUtilUtilityFunctions_AlwaysFalse *RxInternalUtilUtilityFunctions_AlwaysFalse_fromOrdinal(NSUInteger ordinal) {
  RxInternalUtilUtilityFunctions_AlwaysFalse_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return RxInternalUtilUtilityFunctions_AlwaysFalse_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUtilityFunctions_AlwaysFalse)
