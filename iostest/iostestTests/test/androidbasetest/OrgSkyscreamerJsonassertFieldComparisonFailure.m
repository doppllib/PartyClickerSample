//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertFieldComparisonFailure.h"

@interface OrgSkyscreamerJsonassertFieldComparisonFailure () {
 @public
  NSString *_field_;
  id _expected_;
  id _actual_;
}

@end

J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertFieldComparisonFailure, _field_, NSString *)
J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertFieldComparisonFailure, _expected_, id)
J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertFieldComparisonFailure, _actual_, id)

@implementation OrgSkyscreamerJsonassertFieldComparisonFailure

- (instancetype)initWithNSString:(NSString *)field
                          withId:(id)expected
                          withId:(id)actual {
  OrgSkyscreamerJsonassertFieldComparisonFailure_initWithNSString_withId_withId_(self, field, expected, actual);
  return self;
}

- (NSString *)getField {
  return _field_;
}

- (id)getExpected {
  return _expected_;
}

- (id)getActual {
  return _actual_;
}

- (void)dealloc {
  RELEASE_(_field_);
  RELEASE_(_expected_);
  RELEASE_(_actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withId:withId:);
  methods[1].selector = @selector(getField);
  methods[2].selector = @selector(getExpected);
  methods[3].selector = @selector(getActual);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expected_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_actual_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSObject;LNSObject;" };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertFieldComparisonFailure = { "FieldComparisonFailure", "org.skyscreamer.jsonassert", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgSkyscreamerJsonassertFieldComparisonFailure;
}

@end

void OrgSkyscreamerJsonassertFieldComparisonFailure_initWithNSString_withId_withId_(OrgSkyscreamerJsonassertFieldComparisonFailure *self, NSString *field, id expected, id actual) {
  NSObject_init(self);
  JreStrongAssign(&self->_field_, field);
  JreStrongAssign(&self->_expected_, expected);
  JreStrongAssign(&self->_actual_, actual);
}

OrgSkyscreamerJsonassertFieldComparisonFailure *new_OrgSkyscreamerJsonassertFieldComparisonFailure_initWithNSString_withId_withId_(NSString *field, id expected, id actual) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertFieldComparisonFailure, initWithNSString_withId_withId_, field, expected, actual)
}

OrgSkyscreamerJsonassertFieldComparisonFailure *create_OrgSkyscreamerJsonassertFieldComparisonFailure_initWithNSString_withId_withId_(NSString *field, id expected, id actual) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertFieldComparisonFailure, initWithNSString_withId_withId_, field, expected, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertFieldComparisonFailure)
