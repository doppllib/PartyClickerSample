//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilUnsafeConcurrentCircularArrayQueue.h"
#include "RxInternalUtilUnsafePow2.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractQueue.h"
#include "java/util/Iterator.h"
#include "sun/misc/Unsafe.h"

inline jlong RxInternalUtilUnsafeConcurrentCircularArrayQueue_get_REF_ARRAY_BASE();
static jlong RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ARRAY_BASE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeConcurrentCircularArrayQueue, REF_ARRAY_BASE, jlong)

inline jint RxInternalUtilUnsafeConcurrentCircularArrayQueue_get_REF_ELEMENT_SHIFT();
static jint RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ELEMENT_SHIFT;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeConcurrentCircularArrayQueue, REF_ELEMENT_SHIFT, jint)

__attribute__((unused)) static jlong RxInternalUtilUnsafeConcurrentCircularArrayQueue_calcElementOffsetWithLong_withLong_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, jlong index, jlong mask);

__attribute__((unused)) static void RxInternalUtilUnsafeConcurrentCircularArrayQueue_spElementWithNSObjectArray_withLong_withId_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, IOSObjectArray *buffer, jlong offset, id e);

__attribute__((unused)) static void RxInternalUtilUnsafeConcurrentCircularArrayQueue_soElementWithNSObjectArray_withLong_withId_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, IOSObjectArray *buffer, jlong offset, id e);

__attribute__((unused)) static id RxInternalUtilUnsafeConcurrentCircularArrayQueue_lpElementWithNSObjectArray_withLong_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, IOSObjectArray *buffer, jlong offset);

__attribute__((unused)) static id RxInternalUtilUnsafeConcurrentCircularArrayQueue_lvElementWithNSObjectArray_withLong_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, IOSObjectArray *buffer, jlong offset);

@implementation RxInternalUtilUnsafeConcurrentCircularArrayQueueL0Pad

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUnsafeConcurrentCircularArrayQueueL0Pad_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p00_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p01_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p02_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p03_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p04_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p05_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p06_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p07_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p30_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p31_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p32_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p33_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p34_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p35_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p36_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p37_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<E:Ljava/lang/Object;>Ljava/util/AbstractQueue<TE;>;Lrx/internal/util/unsafe/MessagePassingQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeConcurrentCircularArrayQueueL0Pad = { "ConcurrentCircularArrayQueueL0Pad", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x400, 1, 16, -1, -1, -1, 0, -1 };
  return &_RxInternalUtilUnsafeConcurrentCircularArrayQueueL0Pad;
}

@end

void RxInternalUtilUnsafeConcurrentCircularArrayQueueL0Pad_init(RxInternalUtilUnsafeConcurrentCircularArrayQueueL0Pad *self) {
  JavaUtilAbstractQueue_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeConcurrentCircularArrayQueueL0Pad)

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUnsafeConcurrentCircularArrayQueue)

jint RxInternalUtilUnsafeConcurrentCircularArrayQueue_SPARSE_SHIFT;

@implementation RxInternalUtilUnsafeConcurrentCircularArrayQueue

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilUnsafeConcurrentCircularArrayQueue_initWithInt_(self, capacity);
  return self;
}

- (jlong)calcElementOffsetWithLong:(jlong)index {
  return RxInternalUtilUnsafeConcurrentCircularArrayQueue_calcElementOffsetWithLong_withLong_(self, index, mask_);
}

- (jlong)calcElementOffsetWithLong:(jlong)index
                          withLong:(jlong)mask {
  return RxInternalUtilUnsafeConcurrentCircularArrayQueue_calcElementOffsetWithLong_withLong_(self, index, mask);
}

- (void)spElementWithLong:(jlong)offset
                   withId:(id)e {
  RxInternalUtilUnsafeConcurrentCircularArrayQueue_spElementWithNSObjectArray_withLong_withId_(self, buffer_, offset, e);
}

- (void)spElementWithNSObjectArray:(IOSObjectArray *)buffer
                          withLong:(jlong)offset
                            withId:(id)e {
  RxInternalUtilUnsafeConcurrentCircularArrayQueue_spElementWithNSObjectArray_withLong_withId_(self, buffer, offset, e);
}

- (void)soElementWithLong:(jlong)offset
                   withId:(id)e {
  RxInternalUtilUnsafeConcurrentCircularArrayQueue_soElementWithNSObjectArray_withLong_withId_(self, buffer_, offset, e);
}

- (void)soElementWithNSObjectArray:(IOSObjectArray *)buffer
                          withLong:(jlong)offset
                            withId:(id)e {
  RxInternalUtilUnsafeConcurrentCircularArrayQueue_soElementWithNSObjectArray_withLong_withId_(self, buffer, offset, e);
}

- (id)lpElementWithLong:(jlong)offset {
  return RxInternalUtilUnsafeConcurrentCircularArrayQueue_lpElementWithNSObjectArray_withLong_(self, buffer_, offset);
}

- (id)lpElementWithNSObjectArray:(IOSObjectArray *)buffer
                        withLong:(jlong)offset {
  return RxInternalUtilUnsafeConcurrentCircularArrayQueue_lpElementWithNSObjectArray_withLong_(self, buffer, offset);
}

- (id)lvElementWithLong:(jlong)offset {
  return RxInternalUtilUnsafeConcurrentCircularArrayQueue_lvElementWithNSObjectArray_withLong_(self, buffer_, offset);
}

- (id)lvElementWithNSObjectArray:(IOSObjectArray *)buffer
                        withLong:(jlong)offset {
  return RxInternalUtilUnsafeConcurrentCircularArrayQueue_lvElementWithNSObjectArray_withLong_(self, buffer, offset);
}

- (id<JavaUtilIterator>)iterator {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)clear {
  while ([self poll] != nil || ![self isEmpty]) ;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x14, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x14, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x14, 4, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x14, 9, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x14, 9, 7, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x14, 10, 2, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x14, 10, 12, -1, 13, -1, -1 },
    { NULL, "LNSObject;", 0x14, 14, 2, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x14, 14, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(calcElementOffsetWithLong:);
  methods[2].selector = @selector(calcElementOffsetWithLong:withLong:);
  methods[3].selector = @selector(spElementWithLong:withId:);
  methods[4].selector = @selector(spElementWithNSObjectArray:withLong:withId:);
  methods[5].selector = @selector(soElementWithLong:withId:);
  methods[6].selector = @selector(soElementWithNSObjectArray:withLong:withId:);
  methods[7].selector = @selector(lpElementWithLong:);
  methods[8].selector = @selector(lpElementWithNSObjectArray:withLong:);
  methods[9].selector = @selector(lvElementWithLong:);
  methods[10].selector = @selector(lvElementWithNSObjectArray:withLong:);
  methods[11].selector = @selector(iterator);
  methods[12].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SPARSE_SHIFT", "I", .constantValue.asLong = 0, 0x1c, -1, 16, -1, -1 },
    { "BUFFER_PAD", "I", .constantValue.asInt = RxInternalUtilUnsafeConcurrentCircularArrayQueue_BUFFER_PAD, 0x1c, -1, -1, -1, -1 },
    { "REF_ARRAY_BASE", "J", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "REF_ELEMENT_SHIFT", "I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "mask_", "J", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "buffer_", "[LNSObject;", .constantValue.asLong = 0, 0x14, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "I", "calcElementOffset", "J", "JJ", "spElement", "JLNSObject;", "(JTE;)V", "[LNSObject;JLNSObject;", "([TE;JTE;)V", "soElement", "lpElement", "(J)TE;", "[LNSObject;J", "([TE;J)TE;", "lvElement", "()Ljava/util/Iterator<TE;>;", &RxInternalUtilUnsafeConcurrentCircularArrayQueue_SPARSE_SHIFT, &RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ARRAY_BASE, &RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ELEMENT_SHIFT, "[TE;", "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/ConcurrentCircularArrayQueueL0Pad<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeConcurrentCircularArrayQueue = { "ConcurrentCircularArrayQueue", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x401, 13, 6, -1, -1, -1, 20, -1 };
  return &_RxInternalUtilUnsafeConcurrentCircularArrayQueue;
}

+ (void)initialize {
  if (self == [RxInternalUtilUnsafeConcurrentCircularArrayQueue class]) {
    RxInternalUtilUnsafeConcurrentCircularArrayQueue_SPARSE_SHIFT = [((JavaLangInteger *) nil_chk(JavaLangInteger_getIntegerWithNSString_withInt_(@"sparse.shift", 0))) intValue];
    {
      jint scale_ = [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) arrayIndexScaleWithIOSClass:IOSClass_arrayType(NSObject_class_(), 1)];
      if (4 == scale_) {
        RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ELEMENT_SHIFT = 2 + RxInternalUtilUnsafeConcurrentCircularArrayQueue_SPARSE_SHIFT;
      }
      else if (8 == scale_) {
        RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ELEMENT_SHIFT = 3 + RxInternalUtilUnsafeConcurrentCircularArrayQueue_SPARSE_SHIFT;
      }
      else {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"Unknown pointer size");
      }
      RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ARRAY_BASE = [JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE) arrayBaseOffsetWithIOSClass:IOSClass_arrayType(NSObject_class_(), 1)] + (JreLShift32(RxInternalUtilUnsafeConcurrentCircularArrayQueue_BUFFER_PAD, (RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ELEMENT_SHIFT - RxInternalUtilUnsafeConcurrentCircularArrayQueue_SPARSE_SHIFT)));
    }
    J2OBJC_SET_INITIALIZED(RxInternalUtilUnsafeConcurrentCircularArrayQueue)
  }
}

@end

void RxInternalUtilUnsafeConcurrentCircularArrayQueue_initWithInt_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, jint capacity) {
  RxInternalUtilUnsafeConcurrentCircularArrayQueueL0Pad_init(self);
  jint actualCapacity = RxInternalUtilUnsafePow2_roundToPowerOfTwoWithInt_(capacity);
  self->mask_ = actualCapacity - 1;
  JreStrongAssign(&self->buffer_, [IOSObjectArray arrayWithLength:(JreLShift32(actualCapacity, RxInternalUtilUnsafeConcurrentCircularArrayQueue_SPARSE_SHIFT)) + RxInternalUtilUnsafeConcurrentCircularArrayQueue_BUFFER_PAD * 2 type:NSObject_class_()]);
}

jlong RxInternalUtilUnsafeConcurrentCircularArrayQueue_calcElementOffsetWithLong_withLong_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, jlong index, jlong mask) {
  return RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ARRAY_BASE + (JreLShift64((index & mask), RxInternalUtilUnsafeConcurrentCircularArrayQueue_REF_ELEMENT_SHIFT));
}

void RxInternalUtilUnsafeConcurrentCircularArrayQueue_spElementWithNSObjectArray_withLong_withId_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, IOSObjectArray *buffer, jlong offset, id e) {
  [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) putObjectWithId:buffer withLong:offset withId:e];
}

void RxInternalUtilUnsafeConcurrentCircularArrayQueue_soElementWithNSObjectArray_withLong_withId_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, IOSObjectArray *buffer, jlong offset, id e) {
  [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) putOrderedObjectWithId:buffer withLong:offset withId:e];
}

id RxInternalUtilUnsafeConcurrentCircularArrayQueue_lpElementWithNSObjectArray_withLong_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, IOSObjectArray *buffer, jlong offset) {
  return [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) getObjectWithId:buffer withLong:offset];
}

id RxInternalUtilUnsafeConcurrentCircularArrayQueue_lvElementWithNSObjectArray_withLong_(RxInternalUtilUnsafeConcurrentCircularArrayQueue *self, IOSObjectArray *buffer, jlong offset) {
  return [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) getObjectVolatileWithId:buffer withLong:offset];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeConcurrentCircularArrayQueue)
