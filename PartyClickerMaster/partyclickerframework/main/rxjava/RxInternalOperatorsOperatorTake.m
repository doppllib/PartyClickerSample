//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalOperatorsOperatorTake.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

@interface RxInternalOperatorsOperatorTake_TakeSubscriber : RxSubscriber {
 @public
  RxSubscriber *child_;
  jint limit_;
  jint count_;
  jboolean completed_;
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
                             withInt:(jint)limit;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)i;

- (void)setProducerWithRxProducer:(id<RxProducer>)producer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTake_TakeSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTake_TakeSubscriber, child_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTake_TakeSubscriber_initWithRxSubscriber_withInt_(RxInternalOperatorsOperatorTake_TakeSubscriber *self, RxSubscriber *child, jint limit);

__attribute__((unused)) static RxInternalOperatorsOperatorTake_TakeSubscriber *new_RxInternalOperatorsOperatorTake_TakeSubscriber_initWithRxSubscriber_withInt_(RxSubscriber *child, jint limit) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTake_TakeSubscriber *create_RxInternalOperatorsOperatorTake_TakeSubscriber_initWithRxSubscriber_withInt_(RxSubscriber *child, jint limit);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTake_TakeSubscriber)

@interface RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer : NSObject < RxProducer > {
 @public
  __unsafe_unretained RxInternalOperatorsOperatorTake_TakeSubscriber *this$0_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  id<RxProducer> producer_;
}

- (instancetype)initWithRxInternalOperatorsOperatorTake_TakeSubscriber:(RxInternalOperatorsOperatorTake_TakeSubscriber *)outer$
                                                        withRxProducer:(id<RxProducer>)producer;

- (void)requestWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer, producer_, id<RxProducer>)

__attribute__((unused)) static void RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer_initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer *self, RxInternalOperatorsOperatorTake_TakeSubscriber *outer$, id<RxProducer> producer);

__attribute__((unused)) static RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer *new_RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer_initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_(RxInternalOperatorsOperatorTake_TakeSubscriber *outer$, id<RxProducer> producer) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer *create_RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer_initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_(RxInternalOperatorsOperatorTake_TakeSubscriber *outer$, id<RxProducer> producer);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer)

@implementation RxInternalOperatorsOperatorTake

- (instancetype)initWithInt:(jint)limit {
  RxInternalOperatorsOperatorTake_initWithInt_(self, limit);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxSubscriber *parent = create_RxInternalOperatorsOperatorTake_TakeSubscriber_initWithRxSubscriber_withInt_(child, limit_);
  if (limit_ == 0) {
    [((RxSubscriber *) nil_chk(child)) onCompleted];
    [parent unsubscribe];
  }
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:parent];
  return parent;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxSubscriber;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOperatorTake_TakeSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTake = { "OperatorTake", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 4, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorTake;
}

@end

void RxInternalOperatorsOperatorTake_initWithInt_(RxInternalOperatorsOperatorTake *self, jint limit) {
  NSObject_init(self);
  if (limit < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"limit >= 0 required but it was ", limit));
  }
  self->limit_ = limit;
}

RxInternalOperatorsOperatorTake *new_RxInternalOperatorsOperatorTake_initWithInt_(jint limit) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTake, initWithInt_, limit)
}

RxInternalOperatorsOperatorTake *create_RxInternalOperatorsOperatorTake_initWithInt_(jint limit) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTake, initWithInt_, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTake)

@implementation RxInternalOperatorsOperatorTake_TakeSubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
                             withInt:(jint)limit {
  RxInternalOperatorsOperatorTake_TakeSubscriber_initWithRxSubscriber_withInt_(self, child, limit);
  return self;
}

- (void)onCompleted {
  if (!completed_) {
    completed_ = true;
    [((RxSubscriber *) nil_chk(child_)) onCompleted];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  if (!completed_) {
    completed_ = true;
    @try {
      [((RxSubscriber *) nil_chk(child_)) onErrorWithNSException:e];
    }
    @finally {
      [self unsubscribe];
    }
  }
}

- (void)onNextWithId:(id)i {
  if (![self isUnsubscribed] && count_++ < limit_) {
    jboolean stop = count_ == limit_;
    [((RxSubscriber *) nil_chk(child_)) onNextWithId:i];
    if (stop && !completed_) {
      completed_ = true;
      @try {
        [child_ onCompleted];
      }
      @finally {
        [self unsubscribe];
      }
    }
  }
}

- (void)setProducerWithRxProducer:(id<RxProducer>)producer {
  [((RxSubscriber *) nil_chk(child_)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer_initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_(self, producer)];
}

- (void)dealloc {
  RELEASE_(child_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:withInt:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(setProducerWithRxProducer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "completed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;I", "(Lrx/Subscriber<-TT;>;I)V", "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "setProducer", "LRxProducer;", "Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOperatorTake;", "LRxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTake_TakeSubscriber = { "TakeSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 5, 4, 10, 11, -1, 12, -1 };
  return &_RxInternalOperatorsOperatorTake_TakeSubscriber;
}

@end

void RxInternalOperatorsOperatorTake_TakeSubscriber_initWithRxSubscriber_withInt_(RxInternalOperatorsOperatorTake_TakeSubscriber *self, RxSubscriber *child, jint limit) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->child_, child);
  self->limit_ = limit;
}

RxInternalOperatorsOperatorTake_TakeSubscriber *new_RxInternalOperatorsOperatorTake_TakeSubscriber_initWithRxSubscriber_withInt_(RxSubscriber *child, jint limit) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTake_TakeSubscriber, initWithRxSubscriber_withInt_, child, limit)
}

RxInternalOperatorsOperatorTake_TakeSubscriber *create_RxInternalOperatorsOperatorTake_TakeSubscriber_initWithRxSubscriber_withInt_(RxSubscriber *child, jint limit) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTake_TakeSubscriber, initWithRxSubscriber_withInt_, child, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTake_TakeSubscriber)

@implementation RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer

- (instancetype)initWithRxInternalOperatorsOperatorTake_TakeSubscriber:(RxInternalOperatorsOperatorTake_TakeSubscriber *)outer$
                                                        withRxProducer:(id<RxProducer>)producer {
  RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer_initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_(self, outer$, producer);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (n > 0 && !this$0_->completed_) {
    while (true) {
      jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
      jlong c = JavaLangMath_minWithLong_withLong_(n, this$0_->limit_ - r);
      if (c == 0) {
        break;
      }
      else if ([requested_ compareAndSetWithLong:r withLong:r + c]) {
        [((id<RxProducer>) nil_chk(producer_)) requestWithLong:c];
        break;
      }
    }
  }
}

- (void)__javaClone:(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (void)dealloc {
  RELEASE_(requested_);
  RELEASE_(producer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorTake_TakeSubscriber:withRxProducer:);
  methods[1].selector = @selector(requestWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTake_TakeSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "producer_", "LRxProducer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxProducer;", "request", "J", "Lrx/internal/operators/OperatorTake$TakeSubscriber<TT;>;", "LRxInternalOperatorsOperatorTake_TakeSubscriber;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer = { "TakeInnerProducer", "rx.internal.operators", ptrTable, methods, fields, 7, 0x2, 2, 3, 4, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer;
}

@end

void RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer_initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer *self, RxInternalOperatorsOperatorTake_TakeSubscriber *outer$, id<RxProducer> producer) {
  self->this$0_ = outer$;
  NSObject_init(self);
  JreStrongAssign(&self->producer_, producer);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(0));
}

RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer *new_RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer_initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_(RxInternalOperatorsOperatorTake_TakeSubscriber *outer$, id<RxProducer> producer) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer, initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_, outer$, producer)
}

RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer *create_RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer_initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_(RxInternalOperatorsOperatorTake_TakeSubscriber *outer$, id<RxProducer> producer) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer, initWithRxInternalOperatorsOperatorTake_TakeSubscriber_withRxProducer_, outer$, producer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTake_TakeSubscriber_TakeInnerProducer)
