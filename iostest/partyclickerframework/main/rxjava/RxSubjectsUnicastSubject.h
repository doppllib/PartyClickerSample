//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsUnicastSubject")
#ifdef RESTRICT_RxSubjectsUnicastSubject
#define INCLUDE_ALL_RxSubjectsUnicastSubject 0
#else
#define INCLUDE_ALL_RxSubjectsUnicastSubject 1
#endif
#undef RESTRICT_RxSubjectsUnicastSubject

#if !defined (RxSubjectsUnicastSubject_) && (INCLUDE_ALL_RxSubjectsUnicastSubject || defined(INCLUDE_RxSubjectsUnicastSubject))
#define RxSubjectsUnicastSubject_

#define RESTRICT_RxSubjectsSubject 1
#define INCLUDE_RxSubjectsSubject 1
#include "RxSubjectsSubject.h"

@class RxSubjectsUnicastSubject_State;
@protocol RxFunctionsAction0;

@interface RxSubjectsUnicastSubject : RxSubjectsSubject {
 @public
  RxSubjectsUnicastSubject_State *state_;
}

#pragma mark Public

+ (RxSubjectsUnicastSubject *)create;

+ (RxSubjectsUnicastSubject *)createWithInt:(jint)capacityHint;

+ (RxSubjectsUnicastSubject *)createWithInt:(jint)capacityHint
                     withRxFunctionsAction0:(id<RxFunctionsAction0>)onTerminated;

- (jboolean)hasObservers;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsUnicastSubject)

J2OBJC_FIELD_SETTER(RxSubjectsUnicastSubject, state_, RxSubjectsUnicastSubject_State *)

FOUNDATION_EXPORT RxSubjectsUnicastSubject *RxSubjectsUnicastSubject_create();

FOUNDATION_EXPORT RxSubjectsUnicastSubject *RxSubjectsUnicastSubject_createWithInt_(jint capacityHint);

FOUNDATION_EXPORT RxSubjectsUnicastSubject *RxSubjectsUnicastSubject_createWithInt_withRxFunctionsAction0_(jint capacityHint, id<RxFunctionsAction0> onTerminated);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsUnicastSubject)

#endif

#if !defined (RxSubjectsUnicastSubject_State_) && (INCLUDE_ALL_RxSubjectsUnicastSubject || defined(INCLUDE_RxSubjectsUnicastSubject_State))
#define RxSubjectsUnicastSubject_State_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "RxProducer.h"

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "RxObserver.h"

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "RxSubscription.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@class RxSubscriber;
@protocol JavaUtilQueue;
@protocol RxFunctionsAction0;

@interface RxSubjectsUnicastSubject_State : JavaUtilConcurrentAtomicAtomicLong < RxProducer, RxObserver, RxObservable_OnSubscribe, RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *subscriber_;
  id<JavaUtilQueue> queue_;
  JavaUtilConcurrentAtomicAtomicReference *terminateOnce_;
  NSException *error_;
  volatile_jboolean done_;
  jboolean emitting_;
  jboolean missed_;
  volatile_jboolean caughtUp_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacityHint
     withRxFunctionsAction0:(id<RxFunctionsAction0>)onTerminated;

- (void)callWithId:(RxSubscriber *)subscriber;

- (jboolean)isUnsubscribed;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)requestWithLong:(jlong)n;

- (void)unsubscribe;

#pragma mark Package-Private

- (jboolean)checkTerminatedWithBoolean:(jboolean)done
                           withBoolean:(jboolean)empty
                      withRxSubscriber:(RxSubscriber *)s;

- (void)doTerminate;

- (void)replay;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsUnicastSubject_State)

J2OBJC_FIELD_SETTER(RxSubjectsUnicastSubject_State, subscriber_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSubjectsUnicastSubject_State, queue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxSubjectsUnicastSubject_State, terminateOnce_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSubjectsUnicastSubject_State, error_, NSException *)

FOUNDATION_EXPORT void RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(RxSubjectsUnicastSubject_State *self, jint capacityHint, id<RxFunctionsAction0> onTerminated);

FOUNDATION_EXPORT RxSubjectsUnicastSubject_State *new_RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(jint capacityHint, id<RxFunctionsAction0> onTerminated) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsUnicastSubject_State *create_RxSubjectsUnicastSubject_State_initWithInt_withRxFunctionsAction0_(jint capacityHint, id<RxFunctionsAction0> onTerminated);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsUnicastSubject_State)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsUnicastSubject")
