//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/DatabaseField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CoTouchlabSqueakyFieldDatabaseField")
#ifdef RESTRICT_CoTouchlabSqueakyFieldDatabaseField
#define INCLUDE_ALL_CoTouchlabSqueakyFieldDatabaseField 0
#else
#define INCLUDE_ALL_CoTouchlabSqueakyFieldDatabaseField 1
#endif
#undef RESTRICT_CoTouchlabSqueakyFieldDatabaseField

#if !defined (CoTouchlabSqueakyFieldDatabaseField_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldDatabaseField || defined(INCLUDE_CoTouchlabSqueakyFieldDatabaseField))
#define CoTouchlabSqueakyFieldDatabaseField_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class CoTouchlabSqueakyFieldDataType;
@class IOSClass;

@protocol CoTouchlabSqueakyFieldDatabaseField < JavaLangAnnotationAnnotation >

@property (readonly) NSString *columnName;
@property (readonly) CoTouchlabSqueakyFieldDataType *dataType;
@property (readonly) NSString *defaultValue;
@property (readonly) jboolean canBeNull;
@property (readonly) jboolean id__;
@property (readonly) jboolean generatedId;
@property (readonly) jboolean foreign;
@property (readonly) jboolean useGetSet;
@property (readonly) NSString *format;
@property (readonly) jboolean unique;
@property (readonly) jboolean uniqueCombo;
@property (readonly) jboolean index;
@property (readonly) jboolean uniqueIndex;
@property (readonly) NSString *indexName;
@property (readonly) NSString *uniqueIndexName;
@property (readonly) jboolean foreignAutoRefresh;
@property (readonly) IOSClass *persisterClass;

@end

@interface CoTouchlabSqueakyFieldDatabaseField : NSObject < CoTouchlabSqueakyFieldDatabaseField > {
 @public
  NSString *columnName_;
  CoTouchlabSqueakyFieldDataType *dataType_;
  NSString *defaultValue_;
  jboolean canBeNull_;
  jboolean id___;
  jboolean generatedId_;
  jboolean foreign_;
  jboolean useGetSet_;
  NSString *format_;
  jboolean unique_;
  jboolean uniqueCombo_;
  jboolean index_;
  jboolean uniqueIndex_;
  NSString *indexName_;
  NSString *uniqueIndexName_;
  jboolean foreignAutoRefresh_;
  IOSClass *persisterClass_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldDatabaseField)

inline NSString *CoTouchlabSqueakyFieldDatabaseField_get_DEFAULT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CoTouchlabSqueakyFieldDatabaseField_DEFAULT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldDatabaseField, DEFAULT_STRING, NSString *)

FOUNDATION_EXPORT id<CoTouchlabSqueakyFieldDatabaseField> create_CoTouchlabSqueakyFieldDatabaseField(jboolean canBeNull, NSString *columnName, CoTouchlabSqueakyFieldDataType *dataType, NSString *defaultValue, jboolean foreign, jboolean foreignAutoRefresh, NSString *format, jboolean generatedId, jboolean id__, jboolean index, NSString *indexName, IOSClass *persisterClass, jboolean unique, jboolean uniqueCombo, jboolean uniqueIndex, NSString *uniqueIndexName, jboolean useGetSet);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldDatabaseField)

#endif

#pragma pop_macro("INCLUDE_ALL_CoTouchlabSqueakyFieldDatabaseField")
