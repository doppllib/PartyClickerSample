//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalSchedulersSleepingAction.h"
#include "RxInternalSchedulersTrampolineScheduler.h"
#include "RxScheduler.h"
#include "RxSubscription.h"
#include "RxSubscriptionsBooleanSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/PriorityBlockingQueue.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface RxInternalSchedulersTrampolineScheduler ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalSchedulersTrampolineScheduler_init(RxInternalSchedulersTrampolineScheduler *self);

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler *new_RxInternalSchedulersTrampolineScheduler_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler *create_RxInternalSchedulersTrampolineScheduler_init();

@interface RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler () {
 @public
  RxSubscriptionsBooleanSubscription *innerSubscription_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
}

- (id<RxSubscription>)enqueueWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                           withLong:(jlong)execTime;

@end

J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, innerSubscription_, RxSubscriptionsBooleanSubscription *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, wip_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static id<RxSubscription> RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self, id<RxFunctionsAction0> action, jlong execTime);

@interface RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *this$0_;
  RxInternalSchedulersTrampolineScheduler_TimedAction *val$timedAction_;
}

- (instancetype)initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *)outer$
                                    withRxInternalSchedulersTrampolineScheduler_TimedAction:(RxInternalSchedulersTrampolineScheduler_TimedAction *)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1)

__attribute__((unused)) static void RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1 *self, RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0);

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1 *new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1 *create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0);

J2OBJC_INITIALIZED_DEFN(RxInternalSchedulersTrampolineScheduler)

RxInternalSchedulersTrampolineScheduler *RxInternalSchedulersTrampolineScheduler_INSTANCE;

@implementation RxInternalSchedulersTrampolineScheduler

- (RxScheduler_Worker *)createWorker {
  return create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersTrampolineScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)compareWithInt:(jint)x
               withInt:(jint)y {
  return RxInternalSchedulersTrampolineScheduler_compareWithInt_withInt_(x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWorker);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(compareWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalSchedulersTrampolineScheduler;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "compare", "II", &RxInternalSchedulersTrampolineScheduler_INSTANCE, "LRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;LRxInternalSchedulersTrampolineScheduler_TimedAction;" };
  static const J2ObjcClassInfo _RxInternalSchedulersTrampolineScheduler = { "TrampolineScheduler", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, 3, -1, -1, -1 };
  return &_RxInternalSchedulersTrampolineScheduler;
}

+ (void)initialize {
  if (self == [RxInternalSchedulersTrampolineScheduler class]) {
    JreStrongAssignAndConsume(&RxInternalSchedulersTrampolineScheduler_INSTANCE, new_RxInternalSchedulersTrampolineScheduler_init());
    J2OBJC_SET_INITIALIZED(RxInternalSchedulersTrampolineScheduler)
  }
}

@end

void RxInternalSchedulersTrampolineScheduler_init(RxInternalSchedulersTrampolineScheduler *self) {
  RxScheduler_init(self);
}

RxInternalSchedulersTrampolineScheduler *new_RxInternalSchedulersTrampolineScheduler_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersTrampolineScheduler, init)
}

RxInternalSchedulersTrampolineScheduler *create_RxInternalSchedulersTrampolineScheduler_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersTrampolineScheduler, init)
}

jint RxInternalSchedulersTrampolineScheduler_compareWithInt_withInt_(jint x, jint y) {
  RxInternalSchedulersTrampolineScheduler_initialize();
  return (x < y) ? -1 : ((x == y) ? 0 : 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersTrampolineScheduler)

@implementation RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, action, [self now]);
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong execTime = [self now] + [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMillisWithLong:delayTime];
  return RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, create_RxInternalSchedulersSleepingAction_initWithRxFunctionsAction0_withRxScheduler_Worker_withLong_(action, self, execTime), execTime);
}

- (id<RxSubscription>)enqueueWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                           withLong:(jlong)execTime {
  return RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, action, execTime);
}

- (void)unsubscribe {
  [((RxSubscriptionsBooleanSubscription *) nil_chk(innerSubscription_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((RxSubscriptionsBooleanSubscription *) nil_chk(innerSubscription_)) isUnsubscribed];
}

- (void)dealloc {
  RELEASE_(counter_);
  RELEASE_(queue_);
  RELEASE_(innerSubscription_);
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(scheduleWithRxFunctionsAction0:);
  methods[2].selector = @selector(scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(enqueueWithRxFunctionsAction0:withLong:);
  methods[4].selector = @selector(unsubscribe);
  methods[5].selector = @selector(isUnsubscribed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LJavaUtilConcurrentPriorityBlockingQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "innerSubscription_", "LRxSubscriptionsBooleanSubscription;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LRxFunctionsAction0;", "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "enqueue", "LRxFunctionsAction0;J", "Ljava/util/concurrent/PriorityBlockingQueue<Lrx/internal/schedulers/TrampolineScheduler$TimedAction;>;", "LRxInternalSchedulersTrampolineScheduler;" };
  static const J2ObjcClassInfo _RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler = { "InnerCurrentThreadScheduler", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x18, 6, 4, 6, -1, -1, -1, -1 };
  return &_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;
}

@end

void RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self) {
  RxScheduler_Worker_init(self);
  JreStrongAssignAndConsume(&self->counter_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilConcurrentPriorityBlockingQueue_init());
  JreStrongAssignAndConsume(&self->innerSubscription_, new_RxSubscriptionsBooleanSubscription_init());
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, init)
}

RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, init)
}

id<RxSubscription> RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self, id<RxFunctionsAction0> action, jlong execTime) {
  if ([((RxSubscriptionsBooleanSubscription *) nil_chk(self->innerSubscription_)) isUnsubscribed]) {
    return RxSubscriptionsSubscriptions_unsubscribed();
  }
  RxInternalSchedulersTrampolineScheduler_TimedAction *timedAction = create_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(action, JavaLangLong_valueOfWithLong_(execTime), [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->counter_)) incrementAndGet]);
  [((JavaUtilConcurrentPriorityBlockingQueue *) nil_chk(self->queue_)) addWithId:timedAction];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->wip_)) getAndIncrement] == 0) {
    do {
      RxInternalSchedulersTrampolineScheduler_TimedAction *polled = [self->queue_ poll];
      if (polled != nil) {
        [((id<RxFunctionsAction0>) nil_chk(polled->action_)) call];
      }
    }
    while ([self->wip_ decrementAndGet] > 0);
    return RxSubscriptionsSubscriptions_unsubscribed();
  }
  else {
    return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(self, timedAction));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

@implementation RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1

- (instancetype)initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *)outer$
                                    withRxInternalSchedulersTrampolineScheduler_TimedAction:(RxInternalSchedulersTrampolineScheduler_TimedAction *)capture$0 {
  RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(self, outer$, capture$0);
  return self;
}

- (void)call {
  [((JavaUtilConcurrentPriorityBlockingQueue *) nil_chk(this$0_->queue_)) removeWithId:val$timedAction_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$timedAction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:withRxInternalSchedulersTrampolineScheduler_TimedAction:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timedAction_", "LRxInternalSchedulersTrampolineScheduler_TimedAction;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;", "enqueueWithRxFunctionsAction0:withLong:" };
  static const J2ObjcClassInfo _RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1;
}

@end

void RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1 *self, RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$timedAction_, capture$0);
  NSObject_init(self);
}

RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1 *new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1, initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_, outer$, capture$0)
}

RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1 *create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_1, initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_, outer$, capture$0)
}

@implementation RxInternalSchedulersTrampolineScheduler_TimedAction

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                          withJavaLangLong:(JavaLangLong *)execTime
                                   withInt:(jint)count {
  RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(self, action, execTime, count);
  return self;
}

- (jint)compareToWithId:(RxInternalSchedulersTrampolineScheduler_TimedAction *)that {
  cast_chk(that, [RxInternalSchedulersTrampolineScheduler_TimedAction class]);
  jint result = [((JavaLangLong *) nil_chk(execTime_)) compareToWithId:((RxInternalSchedulersTrampolineScheduler_TimedAction *) nil_chk(that))->execTime_];
  if (result == 0) {
    return RxInternalSchedulersTrampolineScheduler_compareWithInt_withInt_(count_, that->count_);
  }
  return result;
}

- (void)dealloc {
  RELEASE_(action_);
  RELEASE_(execTime_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxFunctionsAction0:withJavaLangLong:withInt:);
  methods[1].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "action_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "execTime_", "LJavaLangLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;LJavaLangLong;I", "compareTo", "LRxInternalSchedulersTrampolineScheduler_TimedAction;", "LRxInternalSchedulersTrampolineScheduler;", "Ljava/lang/Object;Ljava/lang/Comparable<Lrx/internal/schedulers/TrampolineScheduler$TimedAction;>;" };
  static const J2ObjcClassInfo _RxInternalSchedulersTrampolineScheduler_TimedAction = { "TimedAction", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x18, 2, 3, 3, -1, -1, 4, -1 };
  return &_RxInternalSchedulersTrampolineScheduler_TimedAction;
}

@end

void RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(RxInternalSchedulersTrampolineScheduler_TimedAction *self, id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  NSObject_init(self);
  JreStrongAssign(&self->action_, action);
  JreStrongAssign(&self->execTime_, execTime);
  self->count_ = count;
}

RxInternalSchedulersTrampolineScheduler_TimedAction *new_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersTrampolineScheduler_TimedAction, initWithRxFunctionsAction0_withJavaLangLong_withInt_, action, execTime, count)
}

RxInternalSchedulersTrampolineScheduler_TimedAction *create_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersTrampolineScheduler_TimedAction, initWithRxFunctionsAction0_withJavaLangLong_withInt_, action, execTime, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersTrampolineScheduler_TimedAction)
