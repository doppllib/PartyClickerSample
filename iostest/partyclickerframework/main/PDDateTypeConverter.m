//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "PDDateTypeConverter.h"
#include "java/lang/Long.h"
#include "java/util/Date.h"

@implementation PDDateTypeConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PDDateTypeConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaUtilDate *)fromTimestampWithJavaLangLong:(JavaLangLong *)value {
  return value == nil ? nil : create_JavaUtilDate_initWithLong_([value longLongValue]);
}

- (JavaLangLong *)dateToTimestampWithJavaUtilDate:(JavaUtilDate *)date {
  if (date == nil) {
    return nil;
  }
  else {
    return JavaLangLong_valueOfWithLong_([date getTime]);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromTimestampWithJavaLangLong:);
  methods[2].selector = @selector(dateToTimestampWithJavaUtilDate:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "fromTimestamp", "LJavaLangLong;", "dateToTimestamp", "LJavaUtilDate;" };
  static const J2ObjcClassInfo _PDDateTypeConverter = { "DateTypeConverter", "com.kgalligan.partyclicker.data", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_PDDateTypeConverter;
}

@end

void PDDateTypeConverter_init(PDDateTypeConverter *self) {
  NSObject_init(self);
}

PDDateTypeConverter *new_PDDateTypeConverter_init() {
  J2OBJC_NEW_IMPL(PDDateTypeConverter, init)
}

PDDateTypeConverter *create_PDDateTypeConverter_init() {
  J2OBJC_CREATE_IMPL(PDDateTypeConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDDateTypeConverter)
