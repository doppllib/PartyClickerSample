//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertComparatorAbstractComparator.h"
#include "OrgSkyscreamerJsonassertComparatorJSONCompareUtil.h"
#include "OrgSkyscreamerJsonassertJSONCompareResult.h"
#include "java/lang/Integer.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static OrgSkyscreamerJsonassertJSONCompareResult *OrgSkyscreamerJsonassertComparatorAbstractComparator_compareJSONWithOrgJsonJSONObject_withOrgJsonJSONObject_(OrgSkyscreamerJsonassertComparatorAbstractComparator *self, OrgJsonJSONObject *expected, OrgJsonJSONObject *actual);

__attribute__((unused)) static OrgSkyscreamerJsonassertJSONCompareResult *OrgSkyscreamerJsonassertComparatorAbstractComparator_compareJSONWithOrgJsonJSONArray_withOrgJsonJSONArray_(OrgSkyscreamerJsonassertComparatorAbstractComparator *self, OrgJsonJSONArray *expected, OrgJsonJSONArray *actual);

@implementation OrgSkyscreamerJsonassertComparatorAbstractComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSkyscreamerJsonassertComparatorAbstractComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgSkyscreamerJsonassertJSONCompareResult *)compareJSONWithOrgJsonJSONObject:(OrgJsonJSONObject *)expected
                                                          withOrgJsonJSONObject:(OrgJsonJSONObject *)actual {
  return OrgSkyscreamerJsonassertComparatorAbstractComparator_compareJSONWithOrgJsonJSONObject_withOrgJsonJSONObject_(self, expected, actual);
}

- (OrgSkyscreamerJsonassertJSONCompareResult *)compareJSONWithOrgJsonJSONArray:(OrgJsonJSONArray *)expected
                                                          withOrgJsonJSONArray:(OrgJsonJSONArray *)actual {
  return OrgSkyscreamerJsonassertComparatorAbstractComparator_compareJSONWithOrgJsonJSONArray_withOrgJsonJSONArray_(self, expected, actual);
}

- (void)checkJsonObjectKeysActualInExpectedWithNSString:(NSString *)prefix
                                  withOrgJsonJSONObject:(OrgJsonJSONObject *)expected
                                  withOrgJsonJSONObject:(OrgJsonJSONObject *)actual
          withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  id<JavaUtilSet> actualKeys = OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getKeysWithOrgJsonJSONObject_(actual);
  for (NSString * __strong key in nil_chk(actualKeys)) {
    if (![((OrgJsonJSONObject *) nil_chk(expected)) hasWithNSString:key]) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) unexpectedWithNSString:prefix withId:key];
    }
  }
}

- (void)checkJsonObjectKeysExpectedInActualWithNSString:(NSString *)prefix
                                  withOrgJsonJSONObject:(OrgJsonJSONObject *)expected
                                  withOrgJsonJSONObject:(OrgJsonJSONObject *)actual
          withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  id<JavaUtilSet> expectedKeys = OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getKeysWithOrgJsonJSONObject_(expected);
  for (NSString * __strong key in nil_chk(expectedKeys)) {
    id expectedValue = [((OrgJsonJSONObject *) nil_chk(expected)) getWithNSString:key];
    if ([((OrgJsonJSONObject *) nil_chk(actual)) hasWithNSString:key]) {
      id actualValue = [actual getWithNSString:key];
      [self compareValuesWithNSString:OrgSkyscreamerJsonassertComparatorJSONCompareUtil_qualifyWithNSString_withNSString_(prefix, key) withId:expectedValue withId:actualValue withOrgSkyscreamerJsonassertJSONCompareResult:result];
    }
    else {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) missingWithNSString:prefix withId:key];
    }
  }
}

- (void)compareJSONArrayOfJsonObjectsWithNSString:(NSString *)key
                             withOrgJsonJSONArray:(OrgJsonJSONArray *)expected
                             withOrgJsonJSONArray:(OrgJsonJSONArray *)actual
    withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  NSString *uniqueKey = OrgSkyscreamerJsonassertComparatorJSONCompareUtil_findUniqueKeyWithOrgJsonJSONArray_(expected);
  if (uniqueKey == nil || !OrgSkyscreamerJsonassertComparatorJSONCompareUtil_isUsableAsUniqueKeyWithNSString_withOrgJsonJSONArray_(uniqueKey, actual)) {
    [self recursivelyCompareJSONArrayWithNSString:key withOrgJsonJSONArray:expected withOrgJsonJSONArray:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
    return;
  }
  id<JavaUtilMap> expectedValueMap = OrgSkyscreamerJsonassertComparatorJSONCompareUtil_arrayOfJsonObjectToMapWithOrgJsonJSONArray_withNSString_(expected, uniqueKey);
  id<JavaUtilMap> actualValueMap = OrgSkyscreamerJsonassertComparatorJSONCompareUtil_arrayOfJsonObjectToMapWithOrgJsonJSONArray_withNSString_(actual, uniqueKey);
  for (id __strong id_ in nil_chk([((id<JavaUtilMap>) nil_chk(expectedValueMap)) keySet])) {
    if (![((id<JavaUtilMap>) nil_chk(actualValueMap)) containsKeyWithId:id_]) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) missingWithNSString:OrgSkyscreamerJsonassertComparatorJSONCompareUtil_formatUniqueKeyWithNSString_withNSString_withId_(key, uniqueKey, id_) withId:[expectedValueMap getWithId:id_]];
      continue;
    }
    OrgJsonJSONObject *expectedValue = [expectedValueMap getWithId:id_];
    OrgJsonJSONObject *actualValue = [actualValueMap getWithId:id_];
    [self compareValuesWithNSString:OrgSkyscreamerJsonassertComparatorJSONCompareUtil_formatUniqueKeyWithNSString_withNSString_withId_(key, uniqueKey, id_) withId:expectedValue withId:actualValue withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
  for (id __strong id_ in nil_chk([((id<JavaUtilMap>) nil_chk(actualValueMap)) keySet])) {
    if (![expectedValueMap containsKeyWithId:id_]) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) unexpectedWithNSString:OrgSkyscreamerJsonassertComparatorJSONCompareUtil_formatUniqueKeyWithNSString_withNSString_withId_(key, uniqueKey, id_) withId:[actualValueMap getWithId:id_]];
    }
  }
}

- (void)compareJSONArrayOfSimpleValuesWithNSString:(NSString *)key
                              withOrgJsonJSONArray:(OrgJsonJSONArray *)expected
                              withOrgJsonJSONArray:(OrgJsonJSONArray *)actual
     withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  id<JavaUtilMap> expectedCount = OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getCardinalityMapWithJavaUtilCollection_(OrgSkyscreamerJsonassertComparatorJSONCompareUtil_jsonArrayToListWithOrgJsonJSONArray_(expected));
  id<JavaUtilMap> actualCount = OrgSkyscreamerJsonassertComparatorJSONCompareUtil_getCardinalityMapWithJavaUtilCollection_(OrgSkyscreamerJsonassertComparatorJSONCompareUtil_jsonArrayToListWithOrgJsonJSONArray_(actual));
  for (id __strong o in nil_chk([((id<JavaUtilMap>) nil_chk(expectedCount)) keySet])) {
    if (![((id<JavaUtilMap>) nil_chk(actualCount)) containsKeyWithId:o]) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) missingWithNSString:JreStrcat("$$", key, @"[]") withId:o];
    }
    else if (![((JavaLangInteger *) nil_chk([actualCount getWithId:o])) isEqual:[expectedCount getWithId:o]]) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) failWithNSString:JreStrcat("$$@$@$@$", key, @"[]: Expected ", [expectedCount getWithId:o], @" occurrence(s) of ", o, @" but got ", [actualCount getWithId:o], @" occurrence(s)")];
    }
  }
  for (id __strong o in nil_chk([((id<JavaUtilMap>) nil_chk(actualCount)) keySet])) {
    if (![expectedCount containsKeyWithId:o]) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) unexpectedWithNSString:JreStrcat("$$", key, @"[]") withId:o];
    }
  }
}

- (void)compareJSONArrayWithStrictOrderWithNSString:(NSString *)key
                               withOrgJsonJSONArray:(OrgJsonJSONArray *)expected
                               withOrgJsonJSONArray:(OrgJsonJSONArray *)actual
      withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(expected)) length]; ++i) {
    id expectedValue = [expected getWithInt:i];
    id actualValue = [((OrgJsonJSONArray *) nil_chk(actual)) getWithInt:i];
    [self compareValuesWithNSString:JreStrcat("$CIC", key, '[', i, ']') withId:expectedValue withId:actualValue withOrgSkyscreamerJsonassertJSONCompareResult:result];
  }
}

- (void)recursivelyCompareJSONArrayWithNSString:(NSString *)key
                           withOrgJsonJSONArray:(OrgJsonJSONArray *)expected
                           withOrgJsonJSONArray:(OrgJsonJSONArray *)actual
  withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  id<JavaUtilSet> matched = create_JavaUtilHashSet_init();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(expected)) length]; ++i) {
    id expectedElement = [expected getWithInt:i];
    jboolean matchFound = false;
    for (jint j = 0; j < [((OrgJsonJSONArray *) nil_chk(actual)) length]; ++j) {
      id actualElement = [actual getWithInt:j];
      if ([matched containsWithId:JavaLangInteger_valueOfWithInt_(j)] || ![[nil_chk(actualElement) java_getClass] isEqual:[nil_chk(expectedElement) java_getClass]]) {
        continue;
      }
      if ([expectedElement isKindOfClass:[OrgJsonJSONObject class]]) {
        if ([((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(OrgSkyscreamerJsonassertComparatorAbstractComparator_compareJSONWithOrgJsonJSONObject_withOrgJsonJSONObject_(self, (OrgJsonJSONObject *) cast_chk(expectedElement, [OrgJsonJSONObject class]), (OrgJsonJSONObject *) cast_chk(actualElement, [OrgJsonJSONObject class])))) passed]) {
          [matched addWithId:JavaLangInteger_valueOfWithInt_(j)];
          matchFound = true;
          break;
        }
      }
      else if ([expectedElement isKindOfClass:[OrgJsonJSONArray class]]) {
        if ([((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(OrgSkyscreamerJsonassertComparatorAbstractComparator_compareJSONWithOrgJsonJSONArray_withOrgJsonJSONArray_(self, (OrgJsonJSONArray *) cast_chk(expectedElement, [OrgJsonJSONArray class]), (OrgJsonJSONArray *) cast_chk(actualElement, [OrgJsonJSONArray class])))) passed]) {
          [matched addWithId:JavaLangInteger_valueOfWithInt_(j)];
          matchFound = true;
          break;
        }
      }
      else if ([nil_chk(expectedElement) isEqual:actualElement]) {
        [matched addWithId:JavaLangInteger_valueOfWithInt_(j)];
        matchFound = true;
        break;
      }
    }
    if (!matchFound) {
      [((OrgSkyscreamerJsonassertJSONCompareResult *) nil_chk(result)) failWithNSString:JreStrcat("$CI$@", key, '[', i, @"] Could not find match for element ", expectedElement)];
      return;
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSkyscreamerJsonassertJSONCompareResult;", 0x11, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSkyscreamerJsonassertJSONCompareResult;", 0x11, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 8, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareJSONWithOrgJsonJSONObject:withOrgJsonJSONObject:);
  methods[2].selector = @selector(compareJSONWithOrgJsonJSONArray:withOrgJsonJSONArray:);
  methods[3].selector = @selector(checkJsonObjectKeysActualInExpectedWithNSString:withOrgJsonJSONObject:withOrgJsonJSONObject:withOrgSkyscreamerJsonassertJSONCompareResult:);
  methods[4].selector = @selector(checkJsonObjectKeysExpectedInActualWithNSString:withOrgJsonJSONObject:withOrgJsonJSONObject:withOrgSkyscreamerJsonassertJSONCompareResult:);
  methods[5].selector = @selector(compareJSONArrayOfJsonObjectsWithNSString:withOrgJsonJSONArray:withOrgJsonJSONArray:withOrgSkyscreamerJsonassertJSONCompareResult:);
  methods[6].selector = @selector(compareJSONArrayOfSimpleValuesWithNSString:withOrgJsonJSONArray:withOrgJsonJSONArray:withOrgSkyscreamerJsonassertJSONCompareResult:);
  methods[7].selector = @selector(compareJSONArrayWithStrictOrderWithNSString:withOrgJsonJSONArray:withOrgJsonJSONArray:withOrgSkyscreamerJsonassertJSONCompareResult:);
  methods[8].selector = @selector(recursivelyCompareJSONArrayWithNSString:withOrgJsonJSONArray:withOrgJsonJSONArray:withOrgSkyscreamerJsonassertJSONCompareResult:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compareJSON", "LOrgJsonJSONObject;LOrgJsonJSONObject;", "LOrgJsonJSONException;", "LOrgJsonJSONArray;LOrgJsonJSONArray;", "checkJsonObjectKeysActualInExpected", "LNSString;LOrgJsonJSONObject;LOrgJsonJSONObject;LOrgSkyscreamerJsonassertJSONCompareResult;", "checkJsonObjectKeysExpectedInActual", "compareJSONArrayOfJsonObjects", "LNSString;LOrgJsonJSONArray;LOrgJsonJSONArray;LOrgSkyscreamerJsonassertJSONCompareResult;", "compareJSONArrayOfSimpleValues", "compareJSONArrayWithStrictOrder", "recursivelyCompareJSONArray" };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertComparatorAbstractComparator = { "AbstractComparator", "org.skyscreamer.jsonassert.comparator", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, -1, -1 };
  return &_OrgSkyscreamerJsonassertComparatorAbstractComparator;
}

@end

void OrgSkyscreamerJsonassertComparatorAbstractComparator_init(OrgSkyscreamerJsonassertComparatorAbstractComparator *self) {
  NSObject_init(self);
}

OrgSkyscreamerJsonassertJSONCompareResult *OrgSkyscreamerJsonassertComparatorAbstractComparator_compareJSONWithOrgJsonJSONObject_withOrgJsonJSONObject_(OrgSkyscreamerJsonassertComparatorAbstractComparator *self, OrgJsonJSONObject *expected, OrgJsonJSONObject *actual) {
  OrgSkyscreamerJsonassertJSONCompareResult *result = create_OrgSkyscreamerJsonassertJSONCompareResult_init();
  [self compareJSONWithNSString:@"" withOrgJsonJSONObject:expected withOrgJsonJSONObject:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
  return result;
}

OrgSkyscreamerJsonassertJSONCompareResult *OrgSkyscreamerJsonassertComparatorAbstractComparator_compareJSONWithOrgJsonJSONArray_withOrgJsonJSONArray_(OrgSkyscreamerJsonassertComparatorAbstractComparator *self, OrgJsonJSONArray *expected, OrgJsonJSONArray *actual) {
  OrgSkyscreamerJsonassertJSONCompareResult *result = create_OrgSkyscreamerJsonassertJSONCompareResult_init();
  [self compareJSONArrayWithNSString:@"" withOrgJsonJSONArray:expected withOrgJsonJSONArray:actual withOrgSkyscreamerJsonassertJSONCompareResult:result];
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertComparatorAbstractComparator)
