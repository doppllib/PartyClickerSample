//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSupportSQLiteDatabase.h"
#include "AndroidArchPersistenceDbSupportSQLiteOpenHelper.h"
#include "AndroidContentContext.h"
#include "AndroidDatabaseDatabaseErrorHandler.h"
#include "AndroidDatabaseDefaultDatabaseErrorHandler.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteException.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"

@interface AndroidArchPersistenceDbSupportSQLiteOpenHelper : NSObject

@end

@interface AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory : NSObject

@end

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteDatabase;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteDatabase;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getDatabaseName);
  methods[1].selector = @selector(setWriteAheadLoggingEnabledWithBoolean:);
  methods[2].selector = @selector(getWritableDatabase);
  methods[3].selector = @selector(getReadableDatabase);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setWriteAheadLoggingEnabled", "Z", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper = { "SupportSQLiteOpenHelper", "android.arch.persistence.db", ptrTable, methods, NULL, 7, 0x609, 5, 0, -1, 2, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
}

- (void)onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db
                                                           withInt:(jint)oldVersion
                                                           withInt:(jint)newVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onDowngradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db
                                                             withInt:(jint)oldVersion
                                                             withInt:(jint)newVersion {
  @throw create_AndroidDatabaseSqliteSQLiteException_initWithNSString_(JreStrcat("$I$I", @"Can't downgrade database from version ", oldVersion, @" to ", newVersion));
}

- (void)onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[2].selector = @selector(onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[3].selector = @selector(onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:withInt:withInt:);
  methods[4].selector = @selector(onDowngradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:withInt:withInt:);
  methods[5].selector = @selector(onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onConfigure", "LAndroidArchPersistenceDbSupportSQLiteDatabase;", "onCreate", "onUpgrade", "LAndroidArchPersistenceDbSupportSQLiteDatabase;II", "onDowngrade", "onOpen", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback = { "Callback", "android.arch.persistence.db", ptrTable, methods, NULL, 7, 0x409, 6, 0, 7, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;
}

@end

void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_init(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSString:(NSString *)name
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                      withInt:(jint)version_
      withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler
withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)callback {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(self, context, name, factory, version_, errorHandler, callback);
  return self;
}

+ (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)builderWithAndroidContentContext:(AndroidContentContext *)context {
  return AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_builderWithAndroidContentContext_(context);
}

- (void)dealloc {
  RELEASE_(context_);
  RELEASE_(name_);
  RELEASE_(factory_);
  RELEASE_(callback_);
  RELEASE_(errorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x9, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:withNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:);
  methods[1].selector = @selector(builderWithAndroidContentContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "factory_", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x11, 3, -1, -1, -1 },
    { "callback_", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "errorHandler_", "LAndroidDatabaseDatabaseErrorHandler;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ILAndroidDatabaseDatabaseErrorHandler;LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", "builder", "LAndroidContentContext;", "version", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration = { "Configuration", "android.arch.persistence.db", ptrTable, methods, fields, 7, 0x9, 2, 6, 4, 5, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;
}

@end

void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  NSObject_init(self);
  JreStrongAssign(&self->context_, context);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->factory_, factory);
  self->version__ = version_;
  JreStrongAssign(&self->callback_, callback);
  JreStrongAssign(&self->errorHandler_, errorHandler);
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *new_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration, initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_, context, name, factory, version_, errorHandler, callback)
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration, initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_, context, name, factory, version_, errorHandler, callback)
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_builderWithAndroidContentContext_(AndroidContentContext *context) {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initialize();
  return create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(context);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *)build {
  if (mCallback_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must set a callback to create the configuration.");
  }
  if (mContext_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must set a non-null context to create the configuration.");
  }
  if (mErrorHandler_ == nil) {
    JreStrongAssignAndConsume(&mErrorHandler_, new_AndroidDatabaseDefaultDatabaseErrorHandler_init());
  }
  return create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(mContext_, mName_, mFactory_, mVersion_, mErrorHandler_, mCallback_);
}

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(self, context);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)errorHandlerWithAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  JreStrongAssign(&mErrorHandler_, errorHandler);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)nameWithNSString:(NSString *)name {
  JreStrongAssign(&mName_, name);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)factoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  JreStrongAssign(&mFactory_, factory);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)callbackWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)callback {
  JreStrongAssign(&mCallback_, callback);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)version__WithInt:(jint)version_ {
  mVersion_ = version_;
  return self;
}

- (void)dealloc {
  RELEASE_(mContext_);
  RELEASE_(mName_);
  RELEASE_(mFactory_);
  RELEASE_(mCallback_);
  RELEASE_(mErrorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(build);
  methods[1].selector = @selector(initWithAndroidContentContext:);
  methods[2].selector = @selector(errorHandlerWithAndroidDatabaseDatabaseErrorHandler:);
  methods[3].selector = @selector(nameWithNSString:);
  methods[4].selector = @selector(factoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[5].selector = @selector(callbackWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:);
  methods[6].selector = @selector(version__WithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mContext_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFactory_", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVersion_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCallback_", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mErrorHandler_", "LAndroidDatabaseDatabaseErrorHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;", "errorHandler", "LAndroidDatabaseDatabaseErrorHandler;", "name", "LNSString;", "factory", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "callback", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", "version", "I", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder = { "Builder", "android.arch.persistence.db", ptrTable, methods, fields, 7, 0x9, 7, 6, 11, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;
}

@end

void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *self, AndroidContentContext *context) {
  NSObject_init(self);
  self->mVersion_ = 1;
  JreStrongAssign(&self->mContext_, context);
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *new_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidContentContext *context) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder, initWithAndroidContentContext_, context)
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidContentContext *context) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder, initWithAndroidContentContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory = { "Factory", "android.arch.persistence.db", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory)
