//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/types/FloatType.java
//

#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesFloatObjectType.h"
#include "CoTouchlabSqueakyFieldTypesFloatType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"

@interface CoTouchlabSqueakyFieldTypesFloatType ()

- (instancetype)init;

@end

inline CoTouchlabSqueakyFieldTypesFloatType *CoTouchlabSqueakyFieldTypesFloatType_get_singleTon();
static CoTouchlabSqueakyFieldTypesFloatType *CoTouchlabSqueakyFieldTypesFloatType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesFloatType, singleTon, CoTouchlabSqueakyFieldTypesFloatType *)

__attribute__((unused)) static void CoTouchlabSqueakyFieldTypesFloatType_init(CoTouchlabSqueakyFieldTypesFloatType *self);

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesFloatType *new_CoTouchlabSqueakyFieldTypesFloatType_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesFloatType *create_CoTouchlabSqueakyFieldTypesFloatType_init();

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesFloatType)

@implementation CoTouchlabSqueakyFieldTypesFloatType

+ (CoTouchlabSqueakyFieldTypesFloatType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesFloatType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesFloatType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesFloatType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (jboolean)isPrimitive {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCoTouchlabSqueakyFieldTypesFloatType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getSingleton);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:);
  methods[3].selector = @selector(isPrimitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "singleTon", "LCoTouchlabSqueakyFieldTypesFloatType;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldSqlType;[LIOSClass;", "(Lco/touchlab/squeaky/field/SqlType;[Ljava/lang/Class<*>;)V", &CoTouchlabSqueakyFieldTypesFloatType_singleTon };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesFloatType = { "FloatType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesFloatType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesFloatType class]) {
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesFloatType_singleTon, new_CoTouchlabSqueakyFieldTypesFloatType_init());
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesFloatType)
  }
}

@end

CoTouchlabSqueakyFieldTypesFloatType *CoTouchlabSqueakyFieldTypesFloatType_getSingleton() {
  CoTouchlabSqueakyFieldTypesFloatType_initialize();
  return CoTouchlabSqueakyFieldTypesFloatType_singleTon;
}

void CoTouchlabSqueakyFieldTypesFloatType_init(CoTouchlabSqueakyFieldTypesFloatType *self) {
  CoTouchlabSqueakyFieldTypesFloatObjectType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, FLOAT), [IOSObjectArray arrayWithObjects:(id[]){ [IOSClass floatClass] } count:1 type:IOSClass_class_()]);
}

CoTouchlabSqueakyFieldTypesFloatType *new_CoTouchlabSqueakyFieldTypesFloatType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesFloatType, init)
}

CoTouchlabSqueakyFieldTypesFloatType *create_CoTouchlabSqueakyFieldTypesFloatType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesFloatType, init)
}

void CoTouchlabSqueakyFieldTypesFloatType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesFloatType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesFloatObjectType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
}

CoTouchlabSqueakyFieldTypesFloatType *new_CoTouchlabSqueakyFieldTypesFloatType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesFloatType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

CoTouchlabSqueakyFieldTypesFloatType *create_CoTouchlabSqueakyFieldTypesFloatType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesFloatType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesFloatType)
