//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSkipLast")
#ifdef RESTRICT_RxInternalOperatorsOperatorSkipLast
#define INCLUDE_ALL_RxInternalOperatorsOperatorSkipLast 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorSkipLast 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorSkipLast

#if !defined (RxInternalOperatorsOperatorSkipLast_) && (INCLUDE_ALL_RxInternalOperatorsOperatorSkipLast || defined(INCLUDE_RxInternalOperatorsOperatorSkipLast))
#define RxInternalOperatorsOperatorSkipLast_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "RxObservable.h"

@class RxSubscriber;

@interface RxInternalOperatorsOperatorSkipLast : NSObject < RxObservable_Operator > {
 @public
  jint count_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)count;

- (RxSubscriber *)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipLast)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorSkipLast_initWithInt_(RxInternalOperatorsOperatorSkipLast *self, jint count);

FOUNDATION_EXPORT RxInternalOperatorsOperatorSkipLast *new_RxInternalOperatorsOperatorSkipLast_initWithInt_(jint count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorSkipLast *create_RxInternalOperatorsOperatorSkipLast_initWithInt_(jint count);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSkipLast)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSkipLast")
