//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalOperatorsOperatorTimeInterval.h"
#include "RxScheduler.h"
#include "RxSchedulersTimeInterval.h"
#include "RxSubscriber.h"

@interface RxInternalOperatorsOperatorTimeInterval_1 : RxSubscriber {
 @public
  RxInternalOperatorsOperatorTimeInterval *this$0_;
  RxSubscriber *val$subscriber_;
  jlong lastTimestamp_;
}

- (instancetype)initWithRxInternalOperatorsOperatorTimeInterval:(RxInternalOperatorsOperatorTimeInterval *)outer$
                                               withRxSubscriber:(RxSubscriber *)capture$0
                                               withRxSubscriber:(RxSubscriber *)subscriber;

- (void)onNextWithId:(id)args;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeInterval_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeInterval_1_initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorTimeInterval_1 *self, RxInternalOperatorsOperatorTimeInterval *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeInterval_1 *new_RxInternalOperatorsOperatorTimeInterval_1_initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorTimeInterval *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeInterval_1 *create_RxInternalOperatorsOperatorTimeInterval_1_initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorTimeInterval *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber);

@implementation RxInternalOperatorsOperatorTimeInterval

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler {
  RxInternalOperatorsOperatorTimeInterval_initWithRxScheduler_(self, scheduler);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)subscriber {
  return create_RxInternalOperatorsOperatorTimeInterval_1_initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_(self, subscriber, subscriber);
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxSubscriber;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxScheduler:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/schedulers/TimeInterval<TT;>;>;)Lrx/Subscriber<-TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<Lrx/schedulers/TimeInterval<TT;>;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeInterval = { "OperatorTimeInterval", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 4, -1 };
  return &_RxInternalOperatorsOperatorTimeInterval;
}

@end

void RxInternalOperatorsOperatorTimeInterval_initWithRxScheduler_(RxInternalOperatorsOperatorTimeInterval *self, RxScheduler *scheduler) {
  NSObject_init(self);
  JreStrongAssign(&self->scheduler_, scheduler);
}

RxInternalOperatorsOperatorTimeInterval *new_RxInternalOperatorsOperatorTimeInterval_initWithRxScheduler_(RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeInterval, initWithRxScheduler_, scheduler)
}

RxInternalOperatorsOperatorTimeInterval *create_RxInternalOperatorsOperatorTimeInterval_initWithRxScheduler_(RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeInterval, initWithRxScheduler_, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTimeInterval)

@implementation RxInternalOperatorsOperatorTimeInterval_1

- (instancetype)initWithRxInternalOperatorsOperatorTimeInterval:(RxInternalOperatorsOperatorTimeInterval *)outer$
                                               withRxSubscriber:(RxSubscriber *)capture$0
                                               withRxSubscriber:(RxSubscriber *)subscriber {
  RxInternalOperatorsOperatorTimeInterval_1_initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_(self, outer$, capture$0, subscriber);
  return self;
}

- (void)onNextWithId:(id)args {
  jlong nowTimestamp = [((RxScheduler *) nil_chk(this$0_->scheduler_)) now];
  [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:create_RxSchedulersTimeInterval_initWithLong_withId_(nowTimestamp - lastTimestamp_, args)];
  lastTimestamp_ = nowTimestamp;
}

- (void)onCompleted {
  [((RxSubscriber *) nil_chk(val$subscriber_)) onCompleted];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriber *) nil_chk(val$subscriber_)) onErrorWithNSException:e];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorTimeInterval:withRxSubscriber:withRxSubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(onErrorWithNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTimeInterval;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
    { "lastTimestamp_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<*>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/internal/operators/OperatorTimeInterval<TT;>;", "Lrx/Subscriber<-Lrx/schedulers/TimeInterval<TT;>;>;", "LRxInternalOperatorsOperatorTimeInterval;", "callWithId:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeInterval_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 4, 3, 9, -1, 10, 11, -1 };
  return &_RxInternalOperatorsOperatorTimeInterval_1;
}

@end

void RxInternalOperatorsOperatorTimeInterval_1_initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorTimeInterval_1 *self, RxInternalOperatorsOperatorTimeInterval *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  RxSubscriber_initWithRxSubscriber_(self, subscriber);
  self->lastTimestamp_ = [((RxScheduler *) nil_chk(outer$->scheduler_)) now];
}

RxInternalOperatorsOperatorTimeInterval_1 *new_RxInternalOperatorsOperatorTimeInterval_1_initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorTimeInterval *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeInterval_1, initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_, outer$, capture$0, subscriber)
}

RxInternalOperatorsOperatorTimeInterval_1 *create_RxInternalOperatorsOperatorTimeInterval_1_initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorTimeInterval *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeInterval_1, initWithRxInternalOperatorsOperatorTimeInterval_withRxSubscriber_withRxSubscriber_, outer$, capture$0, subscriber)
}
