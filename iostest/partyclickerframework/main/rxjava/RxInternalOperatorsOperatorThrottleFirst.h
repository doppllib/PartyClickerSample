//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorThrottleFirst")
#ifdef RESTRICT_RxInternalOperatorsOperatorThrottleFirst
#define INCLUDE_ALL_RxInternalOperatorsOperatorThrottleFirst 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorThrottleFirst 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorThrottleFirst

#if !defined (RxInternalOperatorsOperatorThrottleFirst_) && (INCLUDE_ALL_RxInternalOperatorsOperatorThrottleFirst || defined(INCLUDE_RxInternalOperatorsOperatorThrottleFirst))
#define RxInternalOperatorsOperatorThrottleFirst_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "RxObservable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubscriber;

@interface RxInternalOperatorsOperatorThrottleFirst : NSObject < RxObservable_Operator > {
 @public
  jlong timeInMilliseconds_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)windowDuration
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler;

- (RxSubscriber *)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorThrottleFirst)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirst, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorThrottleFirst_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOperatorThrottleFirst *self, jlong windowDuration, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOperatorThrottleFirst *new_RxInternalOperatorsOperatorThrottleFirst_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong windowDuration, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorThrottleFirst *create_RxInternalOperatorsOperatorThrottleFirst_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong windowDuration, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorThrottleFirst)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorThrottleFirst")
