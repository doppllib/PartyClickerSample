//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface RxSubscriptionsCompositeSubscription () {
 @public
  id<JavaUtilSet> subscriptions_;
  volatile_jboolean unsubscribed_;
}

+ (void)unsubscribeFromAllWithJavaUtilCollection:(id<JavaUtilCollection>)subscriptions;

@end

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscription, subscriptions_, id<JavaUtilSet>)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscription_unsubscribeFromAllWithJavaUtilCollection_(id<JavaUtilCollection> subscriptions);

@implementation RxSubscriptionsCompositeSubscription

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsCompositeSubscription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithRxSubscriptionArray:(IOSObjectArray *)subscriptions {
  RxSubscriptionsCompositeSubscription_initWithRxSubscriptionArray_(self, subscriptions);
  return self;
}

- (jboolean)isUnsubscribed {
  return JreLoadVolatileBoolean(&unsubscribed_);
}

- (void)addWithRxSubscription:(id<RxSubscription>)s {
  if ([((id<RxSubscription>) nil_chk(s)) isUnsubscribed]) {
    return;
  }
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    @synchronized(self) {
      if (!JreLoadVolatileBoolean(&unsubscribed_)) {
        if (subscriptions_ == nil) {
          JreStrongAssignAndConsume(&subscriptions_, new_JavaUtilHashSet_initWithInt_(4));
        }
        [subscriptions_ addWithId:s];
        return;
      }
    }
  }
  [s unsubscribe];
}

- (void)addAllWithRxSubscriptionArray:(IOSObjectArray *)subscriptions {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    @synchronized(self) {
      if (!JreLoadVolatileBoolean(&unsubscribed_)) {
        if (self->subscriptions_ == nil) {
          JreStrongAssignAndConsume(&self->subscriptions_, new_JavaUtilHashSet_initWithInt_(((IOSObjectArray *) nil_chk(subscriptions))->size_));
        }
        {
          IOSObjectArray *a__ = subscriptions;
          id<RxSubscription> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<RxSubscription> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<RxSubscription> s = *b__++;
            if (![((id<RxSubscription>) nil_chk(s)) isUnsubscribed]) {
              [((id<JavaUtilSet>) nil_chk(self->subscriptions_)) addWithId:s];
            }
          }
        }
        return;
      }
    }
  }
  {
    IOSObjectArray *a__ = subscriptions;
    id<RxSubscription> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<RxSubscription> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<RxSubscription> s = *b__++;
      [((id<RxSubscription>) nil_chk(s)) unsubscribe];
    }
  }
}

- (void)removeWithRxSubscription:(id<RxSubscription>)s {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    jboolean unsubscribe;
    @synchronized(self) {
      if (JreLoadVolatileBoolean(&unsubscribed_) || subscriptions_ == nil) {
        return;
      }
      unsubscribe = [subscriptions_ removeWithId:s];
    }
    if (unsubscribe) {
      [((id<RxSubscription>) nil_chk(s)) unsubscribe];
    }
  }
}

- (void)clear {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    id<JavaUtilCollection> unsubscribe;
    @synchronized(self) {
      if (JreLoadVolatileBoolean(&unsubscribed_) || subscriptions_ == nil) {
        return;
      }
      else {
        unsubscribe = subscriptions_;
        JreStrongAssign(&subscriptions_, nil);
      }
    }
    RxSubscriptionsCompositeSubscription_unsubscribeFromAllWithJavaUtilCollection_(unsubscribe);
  }
}

- (void)unsubscribe {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    id<JavaUtilCollection> unsubscribe;
    @synchronized(self) {
      if (JreLoadVolatileBoolean(&unsubscribed_)) {
        return;
      }
      JreAssignVolatileBoolean(&unsubscribed_, true);
      unsubscribe = subscriptions_;
      JreStrongAssign(&subscriptions_, nil);
    }
    RxSubscriptionsCompositeSubscription_unsubscribeFromAllWithJavaUtilCollection_(unsubscribe);
  }
}

+ (void)unsubscribeFromAllWithJavaUtilCollection:(id<JavaUtilCollection>)subscriptions {
  RxSubscriptionsCompositeSubscription_unsubscribeFromAllWithJavaUtilCollection_(subscriptions);
}

- (jboolean)hasSubscriptions {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    @synchronized(self) {
      return !JreLoadVolatileBoolean(&unsubscribed_) && subscriptions_ != nil && ![subscriptions_ isEmpty];
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(subscriptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithRxSubscriptionArray:);
  methods[2].selector = @selector(isUnsubscribed);
  methods[3].selector = @selector(addWithRxSubscription:);
  methods[4].selector = @selector(addAllWithRxSubscriptionArray:);
  methods[5].selector = @selector(removeWithRxSubscription:);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(unsubscribe);
  methods[8].selector = @selector(unsubscribeFromAllWithJavaUtilCollection:);
  methods[9].selector = @selector(hasSubscriptions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subscriptions_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "unsubscribed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LRxSubscription;", "add", "LRxSubscription;", "addAll", "remove", "unsubscribeFromAll", "LJavaUtilCollection;", "(Ljava/util/Collection<Lrx/Subscription;>;)V", "Ljava/util/Set<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscription = { "CompositeSubscription", "rx.subscriptions", ptrTable, methods, fields, 7, 0x11, 10, 2, -1, -1, -1, -1, -1 };
  return &_RxSubscriptionsCompositeSubscription;
}

@end

void RxSubscriptionsCompositeSubscription_init(RxSubscriptionsCompositeSubscription *self) {
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscription *new_RxSubscriptionsCompositeSubscription_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscription, init)
}

RxSubscriptionsCompositeSubscription *create_RxSubscriptionsCompositeSubscription_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscription, init)
}

void RxSubscriptionsCompositeSubscription_initWithRxSubscriptionArray_(RxSubscriptionsCompositeSubscription *self, IOSObjectArray *subscriptions) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->subscriptions_, new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(subscriptions)));
}

RxSubscriptionsCompositeSubscription *new_RxSubscriptionsCompositeSubscription_initWithRxSubscriptionArray_(IOSObjectArray *subscriptions) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscription, initWithRxSubscriptionArray_, subscriptions)
}

RxSubscriptionsCompositeSubscription *create_RxSubscriptionsCompositeSubscription_initWithRxSubscriptionArray_(IOSObjectArray *subscriptions) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscription, initWithRxSubscriptionArray_, subscriptions)
}

void RxSubscriptionsCompositeSubscription_unsubscribeFromAllWithJavaUtilCollection_(id<JavaUtilCollection> subscriptions) {
  RxSubscriptionsCompositeSubscription_initialize();
  if (subscriptions == nil) {
    return;
  }
  id<JavaUtilList> es = nil;
  for (id<RxSubscription> __strong s in subscriptions) {
    @try {
      [((id<RxSubscription>) nil_chk(s)) unsubscribe];
    }
    @catch (NSException *e) {
      if (es == nil) {
        es = create_JavaUtilArrayList_init();
      }
      [es addWithId:e];
    }
  }
  RxExceptionsExceptions_throwIfAnyWithJavaUtilList_(es);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsCompositeSubscription)
