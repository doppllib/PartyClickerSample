//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersExecutorScheduler")
#ifdef RESTRICT_RxInternalSchedulersExecutorScheduler
#define INCLUDE_ALL_RxInternalSchedulersExecutorScheduler 0
#else
#define INCLUDE_ALL_RxInternalSchedulersExecutorScheduler 1
#endif
#undef RESTRICT_RxInternalSchedulersExecutorScheduler

#if !defined (RxInternalSchedulersExecutorScheduler_) && (INCLUDE_ALL_RxInternalSchedulersExecutorScheduler || defined(INCLUDE_RxInternalSchedulersExecutorScheduler))
#define RxInternalSchedulersExecutorScheduler_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler 1
#include "RxScheduler.h"

@class RxScheduler_Worker;
@protocol JavaUtilConcurrentExecutor;

@interface RxInternalSchedulersExecutorScheduler : RxScheduler {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (RxScheduler_Worker *)createWorker;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorScheduler)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler, executor_, id<JavaUtilConcurrentExecutor>)

FOUNDATION_EXPORT void RxInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(RxInternalSchedulersExecutorScheduler *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT RxInternalSchedulersExecutorScheduler *new_RxInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersExecutorScheduler *create_RxInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersExecutorScheduler)

#endif

#if !defined (RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_) && (INCLUDE_ALL_RxInternalSchedulersExecutorScheduler || defined(INCLUDE_RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker))
#define RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler_Worker 1
#include "RxScheduler.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentConcurrentLinkedQueue;
@class JavaUtilConcurrentTimeUnit;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilConcurrentExecutor;
@protocol JavaUtilConcurrentScheduledExecutorService;
@protocol RxFunctionsAction0;
@protocol RxSubscription;

@interface RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker : RxScheduler_Worker < JavaLangRunnable > {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
  RxSubscriptionsCompositeSubscription *tasks_;
  JavaUtilConcurrentConcurrentLinkedQueue *queue_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
  id<JavaUtilConcurrentScheduledExecutorService> service_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (jboolean)isUnsubscribed;

- (void)run;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, tasks_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, queue_, JavaUtilConcurrentConcurrentLinkedQueue *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, service_, id<JavaUtilConcurrentScheduledExecutorService>)

FOUNDATION_EXPORT void RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *new_RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *create_RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersExecutorScheduler")
