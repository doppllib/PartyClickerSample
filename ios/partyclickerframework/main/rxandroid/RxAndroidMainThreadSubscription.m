//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsLooper.h"
#include "J2ObjC_source.h"
#include "RxAndroidMainThreadSubscription.h"
#include "RxAndroidSchedulersAndroidSchedulers.h"
#include "RxFunctionsAction0.h"
#include "RxScheduler.h"
#include "RxSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface RxAndroidMainThreadSubscription () {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed_;
}

@end

J2OBJC_FIELD_SETTER(RxAndroidMainThreadSubscription, unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

@interface RxAndroidMainThreadSubscription_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxAndroidMainThreadSubscription *this$0_;
}

- (instancetype)initWithRxAndroidMainThreadSubscription:(RxAndroidMainThreadSubscription *)outer$;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidMainThreadSubscription_1)

__attribute__((unused)) static void RxAndroidMainThreadSubscription_1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription_1 *self, RxAndroidMainThreadSubscription *outer$);

__attribute__((unused)) static RxAndroidMainThreadSubscription_1 *new_RxAndroidMainThreadSubscription_1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidMainThreadSubscription_1 *create_RxAndroidMainThreadSubscription_1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription *outer$);

@implementation RxAndroidMainThreadSubscription

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidMainThreadSubscription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)verifyMainThread {
  RxAndroidMainThreadSubscription_verifyMainThread();
}

- (jboolean)isUnsubscribed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(unsubscribed_)) get];
}

- (void)unsubscribe {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(unsubscribed_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if (AndroidOsLooper_myLooper() == AndroidOsLooper_getMainLooper()) {
      [self onUnsubscribe];
    }
    else {
      [((RxScheduler_Worker *) nil_chk([((RxScheduler *) nil_chk(RxAndroidSchedulersAndroidSchedulers_mainThread())) createWorker])) scheduleWithRxFunctionsAction0:create_RxAndroidMainThreadSubscription_1_initWithRxAndroidMainThreadSubscription_(self)];
    }
  }
}

- (void)onUnsubscribe {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verifyMainThread);
  methods[2].selector = @selector(isUnsubscribed);
  methods[3].selector = @selector(unsubscribe);
  methods[4].selector = @selector(onUnsubscribe);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscription = { "MainThreadSubscription", "rx.android", NULL, methods, fields, 7, 0x401, 5, 1, -1, -1, -1, -1, -1 };
  return &_RxAndroidMainThreadSubscription;
}

@end

void RxAndroidMainThreadSubscription_init(RxAndroidMainThreadSubscription *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->unsubscribed_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

void RxAndroidMainThreadSubscription_verifyMainThread() {
  RxAndroidMainThreadSubscription_initialize();
  if (AndroidOsLooper_myLooper() != AndroidOsLooper_getMainLooper()) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Expected to be called on the main thread but was ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidMainThreadSubscription)

@implementation RxAndroidMainThreadSubscription_1

- (instancetype)initWithRxAndroidMainThreadSubscription:(RxAndroidMainThreadSubscription *)outer$ {
  RxAndroidMainThreadSubscription_1_initWithRxAndroidMainThreadSubscription_(self, outer$);
  return self;
}

- (void)call {
  [this$0_ onUnsubscribe];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxAndroidMainThreadSubscription:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxAndroidMainThreadSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidMainThreadSubscription;", "unsubscribe" };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscription_1 = { "", "rx.android", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxAndroidMainThreadSubscription_1;
}

@end

void RxAndroidMainThreadSubscription_1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription_1 *self, RxAndroidMainThreadSubscription *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxAndroidMainThreadSubscription_1 *new_RxAndroidMainThreadSubscription_1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription *outer$) {
  J2OBJC_NEW_IMPL(RxAndroidMainThreadSubscription_1, initWithRxAndroidMainThreadSubscription_, outer$)
}

RxAndroidMainThreadSubscription_1 *create_RxAndroidMainThreadSubscription_1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription *outer$) {
  J2OBJC_CREATE_IMPL(RxAndroidMainThreadSubscription_1, initWithRxAndroidMainThreadSubscription_, outer$)
}
