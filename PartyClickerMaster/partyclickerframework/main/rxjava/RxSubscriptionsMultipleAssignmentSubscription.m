//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalSubscriptionsSequentialSubscription.h"
#include "RxSubscription.h"
#include "RxSubscriptionsMultipleAssignmentSubscription.h"
#include "java/lang/IllegalArgumentException.h"

@implementation RxSubscriptionsMultipleAssignmentSubscription

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsMultipleAssignmentSubscription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isUnsubscribed {
  return [((RxInternalSubscriptionsSequentialSubscription *) nil_chk(state_)) isUnsubscribed];
}

- (void)unsubscribe {
  [((RxInternalSubscriptionsSequentialSubscription *) nil_chk(state_)) unsubscribe];
}

- (void)setWithRxSubscription:(id<RxSubscription>)s {
  if (s == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Subscription can not be null");
  }
  [((RxInternalSubscriptionsSequentialSubscription *) nil_chk(state_)) replaceWithRxSubscription:s];
}

- (id<RxSubscription>)get {
  return [((RxInternalSubscriptionsSequentialSubscription *) nil_chk(state_)) current];
}

- (void)dealloc {
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(unsubscribe);
  methods[3].selector = @selector(setWithRxSubscription:);
  methods[4].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LRxInternalSubscriptionsSequentialSubscription;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "set", "LRxSubscription;" };
  static const J2ObjcClassInfo _RxSubscriptionsMultipleAssignmentSubscription = { "MultipleAssignmentSubscription", "rx.subscriptions", ptrTable, methods, fields, 7, 0x11, 5, 1, -1, -1, -1, -1, -1 };
  return &_RxSubscriptionsMultipleAssignmentSubscription;
}

@end

void RxSubscriptionsMultipleAssignmentSubscription_init(RxSubscriptionsMultipleAssignmentSubscription *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->state_, new_RxInternalSubscriptionsSequentialSubscription_init());
}

RxSubscriptionsMultipleAssignmentSubscription *new_RxSubscriptionsMultipleAssignmentSubscription_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsMultipleAssignmentSubscription, init)
}

RxSubscriptionsMultipleAssignmentSubscription *create_RxSubscriptionsMultipleAssignmentSubscription_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsMultipleAssignmentSubscription, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsMultipleAssignmentSubscription)
