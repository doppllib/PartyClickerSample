//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/types/DateTimeType.java
//

#include "AndroidDatabaseCursor.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseDataType.h"
#include "CoTouchlabSqueakyFieldTypesDateTimeType.h"
#include "CoTouchlabSqueakyMiscSqlExceptionUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/sql/SQLException.h"

@interface CoTouchlabSqueakyFieldTypesDateTimeType ()

- (instancetype)init;

- (id)createInstanceWithJavaLangLong:(JavaLangLong *)sqlArg;

- (JavaLangLong *)extractMillisWithId:(id)javaObject;

- (IOSClass *)getDateTimeClass;

@end

inline CoTouchlabSqueakyFieldTypesDateTimeType *CoTouchlabSqueakyFieldTypesDateTimeType_get_singleTon();
static CoTouchlabSqueakyFieldTypesDateTimeType *CoTouchlabSqueakyFieldTypesDateTimeType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesDateTimeType, singleTon, CoTouchlabSqueakyFieldTypesDateTimeType *)

inline IOSClass *CoTouchlabSqueakyFieldTypesDateTimeType_get_dateTimeClass();
inline IOSClass *CoTouchlabSqueakyFieldTypesDateTimeType_set_dateTimeClass(IOSClass *value);
static IOSClass *CoTouchlabSqueakyFieldTypesDateTimeType_dateTimeClass;
J2OBJC_STATIC_FIELD_OBJ(CoTouchlabSqueakyFieldTypesDateTimeType, dateTimeClass, IOSClass *)

inline JavaLangReflectMethod *CoTouchlabSqueakyFieldTypesDateTimeType_get_getMillisMethod();
inline JavaLangReflectMethod *CoTouchlabSqueakyFieldTypesDateTimeType_set_getMillisMethod(JavaLangReflectMethod *value);
static JavaLangReflectMethod *CoTouchlabSqueakyFieldTypesDateTimeType_getMillisMethod;
J2OBJC_STATIC_FIELD_OBJ(CoTouchlabSqueakyFieldTypesDateTimeType, getMillisMethod, JavaLangReflectMethod *)

inline JavaLangReflectConstructor *CoTouchlabSqueakyFieldTypesDateTimeType_get_millisConstructor();
inline JavaLangReflectConstructor *CoTouchlabSqueakyFieldTypesDateTimeType_set_millisConstructor(JavaLangReflectConstructor *value);
static JavaLangReflectConstructor *CoTouchlabSqueakyFieldTypesDateTimeType_millisConstructor;
J2OBJC_STATIC_FIELD_OBJ(CoTouchlabSqueakyFieldTypesDateTimeType, millisConstructor, JavaLangReflectConstructor *)

inline IOSObjectArray *CoTouchlabSqueakyFieldTypesDateTimeType_get_associatedClassNames();
static IOSObjectArray *CoTouchlabSqueakyFieldTypesDateTimeType_associatedClassNames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesDateTimeType, associatedClassNames, IOSObjectArray *)

__attribute__((unused)) static void CoTouchlabSqueakyFieldTypesDateTimeType_init(CoTouchlabSqueakyFieldTypesDateTimeType *self);

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesDateTimeType *new_CoTouchlabSqueakyFieldTypesDateTimeType_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesDateTimeType *create_CoTouchlabSqueakyFieldTypesDateTimeType_init();

__attribute__((unused)) static id CoTouchlabSqueakyFieldTypesDateTimeType_createInstanceWithJavaLangLong_(CoTouchlabSqueakyFieldTypesDateTimeType *self, JavaLangLong *sqlArg);

__attribute__((unused)) static JavaLangLong *CoTouchlabSqueakyFieldTypesDateTimeType_extractMillisWithId_(CoTouchlabSqueakyFieldTypesDateTimeType *self, id javaObject);

__attribute__((unused)) static IOSClass *CoTouchlabSqueakyFieldTypesDateTimeType_getDateTimeClass(CoTouchlabSqueakyFieldTypesDateTimeType *self);

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesDateTimeType)

@implementation CoTouchlabSqueakyFieldTypesDateTimeType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesDateTimeType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesDateTimeType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

+ (CoTouchlabSqueakyFieldTypesDateTimeType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesDateTimeType_getSingleton();
}

- (IOSObjectArray *)getAssociatedClassNames {
  return CoTouchlabSqueakyFieldTypesDateTimeType_associatedClassNames;
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)javaObject {
  return CoTouchlabSqueakyFieldTypesDateTimeType_extractMillisWithId_(self, javaObject);
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  @try {
    return JavaLangLong_valueOfWithLong_(JavaLangLong_parseLongWithNSString_(defaultStr));
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$@$$", @"Problems with field ", fieldType, @" parsing default DateTime value: ", defaultStr), e);
  }
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return JavaLangLong_valueOfWithLong_([((id<AndroidDatabaseCursor>) nil_chk(results)) getLongWithInt:columnPos]);
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  return CoTouchlabSqueakyFieldTypesDateTimeType_createInstanceWithJavaLangLong_(self, (JavaLangLong *) cast_chk(sqlArg, [JavaLangLong class]));
}

- (jboolean)isEscapedValue {
  return false;
}

- (id)createInstanceWithJavaLangLong:(JavaLangLong *)sqlArg {
  return CoTouchlabSqueakyFieldTypesDateTimeType_createInstanceWithJavaLangLong_(self, sqlArg);
}

- (JavaLangLong *)extractMillisWithId:(id)javaObject {
  return CoTouchlabSqueakyFieldTypesDateTimeType_extractMillisWithId_(self, javaObject);
}

- (IOSClass *)getDateTimeClass {
  return CoTouchlabSqueakyFieldTypesDateTimeType_getDateTimeClass(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LCoTouchlabSqueakyFieldTypesDateTimeType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 11, 12, 4, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x2, 13, 14, 4, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x2, -1, -1, 15, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:);
  methods[2].selector = @selector(getSingleton);
  methods[3].selector = @selector(getAssociatedClassNames);
  methods[4].selector = @selector(javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:);
  methods[5].selector = @selector(parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:);
  methods[6].selector = @selector(resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:);
  methods[7].selector = @selector(sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:);
  methods[8].selector = @selector(isEscapedValue);
  methods[9].selector = @selector(createInstanceWithJavaLangLong:);
  methods[10].selector = @selector(extractMillisWithId:);
  methods[11].selector = @selector(getDateTimeClass);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "singleTon", "LCoTouchlabSqueakyFieldTypesDateTimeType;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "dateTimeClass", "LIOSClass;", .constantValue.asLong = 0, 0xa, -1, 18, 19, -1 },
    { "getMillisMethod", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "millisConstructor", "LJavaLangReflectConstructor;", .constantValue.asLong = 0, 0xa, -1, 21, 22, -1 },
    { "associatedClassNames", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldSqlType;[LIOSClass;", "(Lco/touchlab/squeaky/field/SqlType;[Ljava/lang/Class<*>;)V", "javaToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LNSObject;", "LJavaSqlSQLException;", "parseDefaultString", "LCoTouchlabSqueakyFieldFieldType;LNSString;", "resultToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LAndroidDatabaseCursor;I", "sqlArgToJava", "LCoTouchlabSqueakyFieldFieldType;LNSObject;I", "createInstance", "LJavaLangLong;", "extractMillis", "LNSObject;", "LJavaLangClassNotFoundException;", "()Ljava/lang/Class<*>;", &CoTouchlabSqueakyFieldTypesDateTimeType_singleTon, &CoTouchlabSqueakyFieldTypesDateTimeType_dateTimeClass, "Ljava/lang/Class<*>;", &CoTouchlabSqueakyFieldTypesDateTimeType_getMillisMethod, &CoTouchlabSqueakyFieldTypesDateTimeType_millisConstructor, "Ljava/lang/reflect/Constructor<*>;", &CoTouchlabSqueakyFieldTypesDateTimeType_associatedClassNames };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesDateTimeType = { "DateTimeType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesDateTimeType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesDateTimeType class]) {
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesDateTimeType_singleTon, new_CoTouchlabSqueakyFieldTypesDateTimeType_init());
    JreStrongAssign(&CoTouchlabSqueakyFieldTypesDateTimeType_dateTimeClass, nil);
    JreStrongAssign(&CoTouchlabSqueakyFieldTypesDateTimeType_getMillisMethod, nil);
    JreStrongAssign(&CoTouchlabSqueakyFieldTypesDateTimeType_millisConstructor, nil);
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesDateTimeType_associatedClassNames, [IOSObjectArray newArrayWithObjects:(id[]){ @"org.joda.time.DateTime" } count:1 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesDateTimeType)
  }
}

@end

void CoTouchlabSqueakyFieldTypesDateTimeType_init(CoTouchlabSqueakyFieldTypesDateTimeType *self) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, LONG));
}

CoTouchlabSqueakyFieldTypesDateTimeType *new_CoTouchlabSqueakyFieldTypesDateTimeType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesDateTimeType, init)
}

CoTouchlabSqueakyFieldTypesDateTimeType *create_CoTouchlabSqueakyFieldTypesDateTimeType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesDateTimeType, init)
}

void CoTouchlabSqueakyFieldTypesDateTimeType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesDateTimeType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
}

CoTouchlabSqueakyFieldTypesDateTimeType *new_CoTouchlabSqueakyFieldTypesDateTimeType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesDateTimeType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

CoTouchlabSqueakyFieldTypesDateTimeType *create_CoTouchlabSqueakyFieldTypesDateTimeType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesDateTimeType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

CoTouchlabSqueakyFieldTypesDateTimeType *CoTouchlabSqueakyFieldTypesDateTimeType_getSingleton() {
  CoTouchlabSqueakyFieldTypesDateTimeType_initialize();
  return CoTouchlabSqueakyFieldTypesDateTimeType_singleTon;
}

id CoTouchlabSqueakyFieldTypesDateTimeType_createInstanceWithJavaLangLong_(CoTouchlabSqueakyFieldTypesDateTimeType *self, JavaLangLong *sqlArg) {
  @try {
    if (CoTouchlabSqueakyFieldTypesDateTimeType_millisConstructor == nil) {
      IOSClass *clazz = CoTouchlabSqueakyFieldTypesDateTimeType_getDateTimeClass(self);
      JreStrongAssign(&CoTouchlabSqueakyFieldTypesDateTimeType_millisConstructor, [((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass longClass] } count:1 type:IOSClass_class_()]]);
    }
    return [((JavaLangReflectConstructor *) nil_chk(CoTouchlabSqueakyFieldTypesDateTimeType_millisConstructor)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ sqlArg } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(@"Could not use reflection to construct a Joda DateTime", e);
  }
}

JavaLangLong *CoTouchlabSqueakyFieldTypesDateTimeType_extractMillisWithId_(CoTouchlabSqueakyFieldTypesDateTimeType *self, id javaObject) {
  @try {
    if (CoTouchlabSqueakyFieldTypesDateTimeType_getMillisMethod == nil) {
      IOSClass *clazz = CoTouchlabSqueakyFieldTypesDateTimeType_getDateTimeClass(self);
      JreStrongAssign(&CoTouchlabSqueakyFieldTypesDateTimeType_getMillisMethod, [((IOSClass *) nil_chk(clazz)) getMethod:@"getMillis" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]]);
    }
    if (javaObject == nil) {
      return nil;
    }
    else {
      return (JavaLangLong *) cast_chk([((JavaLangReflectMethod *) nil_chk(CoTouchlabSqueakyFieldTypesDateTimeType_getMillisMethod)) invokeWithId:javaObject withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangLong class]);
    }
  }
  @catch (JavaLangException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$@", @"Could not use reflection to get millis from Joda DateTime: ", javaObject), e);
  }
}

IOSClass *CoTouchlabSqueakyFieldTypesDateTimeType_getDateTimeClass(CoTouchlabSqueakyFieldTypesDateTimeType *self) {
  if (CoTouchlabSqueakyFieldTypesDateTimeType_dateTimeClass == nil) {
    JreStrongAssign(&CoTouchlabSqueakyFieldTypesDateTimeType_dateTimeClass, IOSClass_forName_(@"org.joda.time.DateTime"));
  }
  return CoTouchlabSqueakyFieldTypesDateTimeType_dateTimeClass;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesDateTimeType)
