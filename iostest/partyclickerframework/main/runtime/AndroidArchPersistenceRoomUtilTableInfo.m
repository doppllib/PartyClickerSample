//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSupportSQLiteDatabase.h"
#include "AndroidArchPersistenceRoomUtilStringUtil.h"
#include "AndroidArchPersistenceRoomUtilTableInfo.h"
#include "AndroidDatabaseCursor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface AndroidArchPersistenceRoomUtilTableInfo ()

+ (id<JavaUtilSet>)readForeignKeysWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database
                                                                       withNSString:(NSString *)tableName;

+ (id<JavaUtilList>)readForeignKeyFieldMappingsWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

+ (id<JavaUtilMap>)readColumnsWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database
                                                                   withNSString:(NSString *)tableName;

@end

__attribute__((unused)) static id<JavaUtilSet> AndroidArchPersistenceRoomUtilTableInfo_readForeignKeysWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(id<AndroidArchPersistenceDbSupportSQLiteDatabase> database, NSString *tableName);

__attribute__((unused)) static id<JavaUtilList> AndroidArchPersistenceRoomUtilTableInfo_readForeignKeyFieldMappingsWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor);

__attribute__((unused)) static id<JavaUtilMap> AndroidArchPersistenceRoomUtilTableInfo_readColumnsWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(id<AndroidArchPersistenceDbSupportSQLiteDatabase> database, NSString *tableName);

@implementation AndroidArchPersistenceRoomUtilTableInfo

- (instancetype)initWithNSString:(NSString *)name
                 withJavaUtilMap:(id<JavaUtilMap>)columns
                 withJavaUtilSet:(id<JavaUtilSet>)foreignKeys {
  AndroidArchPersistenceRoomUtilTableInfo_initWithNSString_withJavaUtilMap_withJavaUtilSet_(self, name, columns, foreignKeys);
  return self;
}

+ (AndroidArchPersistenceRoomUtilTableInfo *)readWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database
                                                                                      withNSString:(NSString *)tableName {
  return AndroidArchPersistenceRoomUtilTableInfo_readWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(database, tableName);
}

+ (id<JavaUtilSet>)readForeignKeysWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database
                                                                       withNSString:(NSString *)tableName {
  return AndroidArchPersistenceRoomUtilTableInfo_readForeignKeysWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(database, tableName);
}

+ (id<JavaUtilList>)readForeignKeyFieldMappingsWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  return AndroidArchPersistenceRoomUtilTableInfo_readForeignKeyFieldMappingsWithAndroidDatabaseCursor_(cursor);
}

+ (id<JavaUtilMap>)readColumnsWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database
                                                                   withNSString:(NSString *)tableName {
  return AndroidArchPersistenceRoomUtilTableInfo_readColumnsWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(database, tableName);
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  __unused AndroidArchPersistenceRoomUtilTableInfo *tableInfo = (AndroidArchPersistenceRoomUtilTableInfo *) cast_chk(o, [AndroidArchPersistenceRoomUtilTableInfo class]);
  if (![((NSString *) nil_chk(name_)) isEqual:tableInfo->name_]) return false;
  if (![((id<JavaUtilMap>) nil_chk(columns_)) isEqual:tableInfo->columns_]) return false;
  return [((id<JavaUtilSet>) nil_chk(foreignKeys_)) isEqual:tableInfo->foreignKeys_];
}

- (NSUInteger)hash {
  __unused jint result = ((jint) [((NSString *) nil_chk(name_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilMap>) nil_chk(columns_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilSet>) nil_chk(foreignKeys_)) hash]);
  return result;
}

- (NSString *)description {
  return JreStrcat("$$$@$@C", @"TableInfo{name='", name_, @"', columns=", columns_, @", foreignKeys=", foreignKeys_, '}');
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(columns_);
  RELEASE_(foreignKeys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomUtilTableInfo;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xa, 4, 3, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 9, 3, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaUtilMap:withJavaUtilSet:);
  methods[1].selector = @selector(readWithAndroidArchPersistenceDbSupportSQLiteDatabase:withNSString:);
  methods[2].selector = @selector(readForeignKeysWithAndroidArchPersistenceDbSupportSQLiteDatabase:withNSString:);
  methods[3].selector = @selector(readForeignKeyFieldMappingsWithAndroidDatabaseCursor:);
  methods[4].selector = @selector(readColumnsWithAndroidArchPersistenceDbSupportSQLiteDatabase:withNSString:);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "columns_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x11, -1, -1, 15, -1 },
    { "foreignKeys_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x11, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilMap;LJavaUtilSet;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Landroid/arch/persistence/room/util/TableInfo$Column;>;Ljava/util/Set<Landroid/arch/persistence/room/util/TableInfo$ForeignKey;>;)V", "read", "LAndroidArchPersistenceDbSupportSQLiteDatabase;LNSString;", "readForeignKeys", "(Landroid/arch/persistence/db/SupportSQLiteDatabase;Ljava/lang/String;)Ljava/util/Set<Landroid/arch/persistence/room/util/TableInfo$ForeignKey;>;", "readForeignKeyFieldMappings", "LAndroidDatabaseCursor;", "(Landroid/database/Cursor;)Ljava/util/List<Landroid/arch/persistence/room/util/TableInfo$ForeignKeyWithSequence;>;", "readColumns", "(Landroid/arch/persistence/db/SupportSQLiteDatabase;Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Landroid/arch/persistence/room/util/TableInfo$Column;>;", "equals", "LNSObject;", "hashCode", "toString", "Ljava/util/Map<Ljava/lang/String;Landroid/arch/persistence/room/util/TableInfo$Column;>;", "Ljava/util/Set<Landroid/arch/persistence/room/util/TableInfo$ForeignKey;>;", "LAndroidArchPersistenceRoomUtilTableInfo_Column;LAndroidArchPersistenceRoomUtilTableInfo_ForeignKey;LAndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomUtilTableInfo = { "TableInfo", "android.arch.persistence.room.util", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, 17, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomUtilTableInfo;
}

@end

void AndroidArchPersistenceRoomUtilTableInfo_initWithNSString_withJavaUtilMap_withJavaUtilSet_(AndroidArchPersistenceRoomUtilTableInfo *self, NSString *name, id<JavaUtilMap> columns, id<JavaUtilSet> foreignKeys) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->columns_, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(columns));
  JreStrongAssign(&self->foreignKeys_, JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(foreignKeys));
}

AndroidArchPersistenceRoomUtilTableInfo *new_AndroidArchPersistenceRoomUtilTableInfo_initWithNSString_withJavaUtilMap_withJavaUtilSet_(NSString *name, id<JavaUtilMap> columns, id<JavaUtilSet> foreignKeys) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomUtilTableInfo, initWithNSString_withJavaUtilMap_withJavaUtilSet_, name, columns, foreignKeys)
}

AndroidArchPersistenceRoomUtilTableInfo *create_AndroidArchPersistenceRoomUtilTableInfo_initWithNSString_withJavaUtilMap_withJavaUtilSet_(NSString *name, id<JavaUtilMap> columns, id<JavaUtilSet> foreignKeys) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomUtilTableInfo, initWithNSString_withJavaUtilMap_withJavaUtilSet_, name, columns, foreignKeys)
}

AndroidArchPersistenceRoomUtilTableInfo *AndroidArchPersistenceRoomUtilTableInfo_readWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(id<AndroidArchPersistenceDbSupportSQLiteDatabase> database, NSString *tableName) {
  AndroidArchPersistenceRoomUtilTableInfo_initialize();
  __unused id<JavaUtilMap> columns = AndroidArchPersistenceRoomUtilTableInfo_readColumnsWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(database, tableName);
  __unused id<JavaUtilSet> foreignKeys = AndroidArchPersistenceRoomUtilTableInfo_readForeignKeysWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(database, tableName);
  return create_AndroidArchPersistenceRoomUtilTableInfo_initWithNSString_withJavaUtilMap_withJavaUtilSet_(tableName, columns, foreignKeys);
}

id<JavaUtilSet> AndroidArchPersistenceRoomUtilTableInfo_readForeignKeysWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(id<AndroidArchPersistenceDbSupportSQLiteDatabase> database, NSString *tableName) {
  AndroidArchPersistenceRoomUtilTableInfo_initialize();
  __unused id<JavaUtilSet> foreignKeys = create_JavaUtilHashSet_init();
  __unused id<AndroidDatabaseCursor> cursor = [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(database)) rawQueryWithNSString:JreStrcat("$$$", @"PRAGMA foreign_key_list(`", tableName, @"`)") withNSStringArray:JreLoadStatic(AndroidArchPersistenceRoomUtilStringUtil, EMPTY_STRING_ARRAY)];
  @try {
    __unused jint idColumnIndex = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:@"id"];
    __unused jint seqColumnIndex = [cursor getColumnIndexWithNSString:@"seq"];
    __unused jint tableColumnIndex = [cursor getColumnIndexWithNSString:@"table"];
    __unused jint onDeleteColumnIndex = [cursor getColumnIndexWithNSString:@"on_delete"];
    __unused jint onUpdateColumnIndex = [cursor getColumnIndexWithNSString:@"on_update"];
    __unused id<JavaUtilList> ordered = AndroidArchPersistenceRoomUtilTableInfo_readForeignKeyFieldMappingsWithAndroidDatabaseCursor_(cursor);
    __unused jint count = [cursor getCount];
    for (jint position = 0; position < count; position++) {
      [cursor moveToPositionWithInt:position];
      __unused jint seq = [cursor getIntWithInt:seqColumnIndex];
      if (seq != 0) {
        continue;
      }
      __unused jint id_ = [cursor getIntWithInt:idColumnIndex];
      __unused id<JavaUtilList> myColumns = create_JavaUtilArrayList_init();
      __unused id<JavaUtilList> refColumns = create_JavaUtilArrayList_init();
      for (AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence * __strong key in nil_chk(ordered)) {
        if (((AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence *) nil_chk(key))->mId_ == id_) {
          [myColumns addWithId:key->mFrom_];
          [refColumns addWithId:key->mTo_];
        }
      }
      [foreignKeys addWithId:create_AndroidArchPersistenceRoomUtilTableInfo_ForeignKey_initWithNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilList_([cursor getStringWithInt:tableColumnIndex], [cursor getStringWithInt:onDeleteColumnIndex], [cursor getStringWithInt:onUpdateColumnIndex], myColumns, refColumns)];
    }
  }
  @finally {
    [cursor close];
  }
  return foreignKeys;
}

id<JavaUtilList> AndroidArchPersistenceRoomUtilTableInfo_readForeignKeyFieldMappingsWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidArchPersistenceRoomUtilTableInfo_initialize();
  __unused jint idColumnIndex = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:@"id"];
  __unused jint seqColumnIndex = [cursor getColumnIndexWithNSString:@"seq"];
  __unused jint fromColumnIndex = [cursor getColumnIndexWithNSString:@"from"];
  __unused jint toColumnIndex = [cursor getColumnIndexWithNSString:@"to"];
  __unused jint count = [cursor getCount];
  __unused id<JavaUtilList> result = create_JavaUtilArrayList_init();
  for (jint i = 0; i < count; i++) {
    [cursor moveToPositionWithInt:i];
    [result addWithId:create_AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence_initWithInt_withInt_withNSString_withNSString_([cursor getIntWithInt:idColumnIndex], [cursor getIntWithInt:seqColumnIndex], [cursor getStringWithInt:fromColumnIndex], [cursor getStringWithInt:toColumnIndex])];
  }
  JavaUtilCollections_sortWithJavaUtilList_(result);
  return result;
}

id<JavaUtilMap> AndroidArchPersistenceRoomUtilTableInfo_readColumnsWithAndroidArchPersistenceDbSupportSQLiteDatabase_withNSString_(id<AndroidArchPersistenceDbSupportSQLiteDatabase> database, NSString *tableName) {
  AndroidArchPersistenceRoomUtilTableInfo_initialize();
  __unused id<AndroidDatabaseCursor> cursor = [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(database)) rawQueryWithNSString:JreStrcat("$$$", @"PRAGMA table_info(`", tableName, @"`)") withNSStringArray:JreLoadStatic(AndroidArchPersistenceRoomUtilStringUtil, EMPTY_STRING_ARRAY)];
  __unused id<JavaUtilMap> columns = create_JavaUtilHashMap_init();
  @try {
    if ([((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnCount] > 0) {
      __unused jint nameIndex = [cursor getColumnIndexWithNSString:@"name"];
      __unused jint typeIndex = [cursor getColumnIndexWithNSString:@"type"];
      __unused jint pkIndex = [cursor getColumnIndexWithNSString:@"pk"];
      while ([cursor moveToNext]) {
        __unused NSString *name = [cursor getStringWithInt:nameIndex];
        __unused NSString *type = [cursor getStringWithInt:typeIndex];
        __unused jint primaryKeyPosition = [cursor getIntWithInt:pkIndex];
        [columns putWithId:name withId:create_AndroidArchPersistenceRoomUtilTableInfo_Column_initWithNSString_withNSString_withInt_(name, type, primaryKeyPosition)];
      }
    }
  }
  @finally {
    [cursor close];
  }
  return columns;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomUtilTableInfo)

@implementation AndroidArchPersistenceRoomUtilTableInfo_Column

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)type
                         withInt:(jint)primaryKeyPosition {
  AndroidArchPersistenceRoomUtilTableInfo_Column_initWithNSString_withNSString_withInt_(self, name, type, primaryKeyPosition);
  return self;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  __unused AndroidArchPersistenceRoomUtilTableInfo_Column *column = (AndroidArchPersistenceRoomUtilTableInfo_Column *) cast_chk(o, [AndroidArchPersistenceRoomUtilTableInfo_Column class]);
  {
    if (primaryKeyPosition_ != column->primaryKeyPosition_) return false;
  }
  if (![((NSString *) nil_chk(name_)) isEqual:column->name_]) return false;
  return type_ != nil ? [type_ isEqual:column->type_] : column->type_ == nil;
}

- (jboolean)isPrimaryKey {
  return primaryKeyPosition_ > 0;
}

- (NSUInteger)hash {
  __unused jint result = ((jint) [((NSString *) nil_chk(name_)) hash]);
  result = 31 * result + (type_ != nil ? ((jint) [type_ hash]) : 0);
  result = 31 * result + primaryKeyPosition_;
  return result;
}

- (NSString *)description {
  return JreStrcat("$$$$$IC", @"Column{name='", name_, @"', type='", type_, @"', primaryKeyPosition=", primaryKeyPosition_, '}');
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withInt:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(isPrimaryKey);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "primaryKeyPosition_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;I", "equals", "LNSObject;", "hashCode", "toString", "LAndroidArchPersistenceRoomUtilTableInfo;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomUtilTableInfo_Column = { "Column", "android.arch.persistence.room.util", ptrTable, methods, fields, 7, 0x9, 5, 3, 5, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomUtilTableInfo_Column;
}

@end

void AndroidArchPersistenceRoomUtilTableInfo_Column_initWithNSString_withNSString_withInt_(AndroidArchPersistenceRoomUtilTableInfo_Column *self, NSString *name, NSString *type, jint primaryKeyPosition) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->type_, type);
  self->primaryKeyPosition_ = primaryKeyPosition;
}

AndroidArchPersistenceRoomUtilTableInfo_Column *new_AndroidArchPersistenceRoomUtilTableInfo_Column_initWithNSString_withNSString_withInt_(NSString *name, NSString *type, jint primaryKeyPosition) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomUtilTableInfo_Column, initWithNSString_withNSString_withInt_, name, type, primaryKeyPosition)
}

AndroidArchPersistenceRoomUtilTableInfo_Column *create_AndroidArchPersistenceRoomUtilTableInfo_Column_initWithNSString_withNSString_withInt_(NSString *name, NSString *type, jint primaryKeyPosition) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomUtilTableInfo_Column, initWithNSString_withNSString_withInt_, name, type, primaryKeyPosition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomUtilTableInfo_Column)

@implementation AndroidArchPersistenceRoomUtilTableInfo_ForeignKey

- (instancetype)initWithNSString:(NSString *)referenceTable
                    withNSString:(NSString *)onDelete
                    withNSString:(NSString *)onUpdate
                withJavaUtilList:(id<JavaUtilList>)columnNames
                withJavaUtilList:(id<JavaUtilList>)referenceColumnNames {
  AndroidArchPersistenceRoomUtilTableInfo_ForeignKey_initWithNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilList_(self, referenceTable, onDelete, onUpdate, columnNames, referenceColumnNames);
  return self;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  __unused AndroidArchPersistenceRoomUtilTableInfo_ForeignKey *that = (AndroidArchPersistenceRoomUtilTableInfo_ForeignKey *) cast_chk(o, [AndroidArchPersistenceRoomUtilTableInfo_ForeignKey class]);
  if (![((NSString *) nil_chk(referenceTable_)) isEqual:that->referenceTable_]) return false;
  if (![((NSString *) nil_chk(onDelete_)) isEqual:that->onDelete_]) return false;
  if (![((NSString *) nil_chk(onUpdate_)) isEqual:that->onUpdate_]) return false;
  if (![((id<JavaUtilList>) nil_chk(columnNames_)) isEqual:that->columnNames_]) return false;
  return [((id<JavaUtilList>) nil_chk(referenceColumnNames_)) isEqual:that->referenceColumnNames_];
}

- (NSUInteger)hash {
  __unused jint result = ((jint) [((NSString *) nil_chk(referenceTable_)) hash]);
  result = 31 * result + ((jint) [((NSString *) nil_chk(onDelete_)) hash]);
  result = 31 * result + ((jint) [((NSString *) nil_chk(onUpdate_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(columnNames_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(referenceColumnNames_)) hash]);
  return result;
}

- (NSString *)description {
  return JreStrcat("$$$$$$$@$@C", @"ForeignKey{referenceTable='", referenceTable_, @"', onDelete='", onDelete_, @"', onUpdate='", onUpdate_, @"', columnNames=", columnNames_, @", referenceColumnNames=", referenceColumnNames_, '}');
}

- (void)dealloc {
  RELEASE_(referenceTable_);
  RELEASE_(onDelete_);
  RELEASE_(onUpdate_);
  RELEASE_(columnNames_);
  RELEASE_(referenceColumnNames_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:withJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "referenceTable_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "onDelete_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "onUpdate_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "columnNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x11, -1, -1, 6, -1 },
    { "referenceColumnNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x11, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;LJavaUtilList;LJavaUtilList;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;)V", "equals", "LNSObject;", "hashCode", "toString", "Ljava/util/List<Ljava/lang/String;>;", "LAndroidArchPersistenceRoomUtilTableInfo;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomUtilTableInfo_ForeignKey = { "ForeignKey", "android.arch.persistence.room.util", ptrTable, methods, fields, 7, 0x9, 4, 5, 7, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomUtilTableInfo_ForeignKey;
}

@end

void AndroidArchPersistenceRoomUtilTableInfo_ForeignKey_initWithNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilList_(AndroidArchPersistenceRoomUtilTableInfo_ForeignKey *self, NSString *referenceTable, NSString *onDelete, NSString *onUpdate, id<JavaUtilList> columnNames, id<JavaUtilList> referenceColumnNames) {
  NSObject_init(self);
  JreStrongAssign(&self->referenceTable_, referenceTable);
  JreStrongAssign(&self->onDelete_, onDelete);
  JreStrongAssign(&self->onUpdate_, onUpdate);
  JreStrongAssign(&self->columnNames_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(columnNames));
  JreStrongAssign(&self->referenceColumnNames_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(referenceColumnNames));
}

AndroidArchPersistenceRoomUtilTableInfo_ForeignKey *new_AndroidArchPersistenceRoomUtilTableInfo_ForeignKey_initWithNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilList_(NSString *referenceTable, NSString *onDelete, NSString *onUpdate, id<JavaUtilList> columnNames, id<JavaUtilList> referenceColumnNames) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomUtilTableInfo_ForeignKey, initWithNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilList_, referenceTable, onDelete, onUpdate, columnNames, referenceColumnNames)
}

AndroidArchPersistenceRoomUtilTableInfo_ForeignKey *create_AndroidArchPersistenceRoomUtilTableInfo_ForeignKey_initWithNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilList_(NSString *referenceTable, NSString *onDelete, NSString *onUpdate, id<JavaUtilList> columnNames, id<JavaUtilList> referenceColumnNames) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomUtilTableInfo_ForeignKey, initWithNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilList_, referenceTable, onDelete, onUpdate, columnNames, referenceColumnNames)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomUtilTableInfo_ForeignKey)

@implementation AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence

- (instancetype)initWithInt:(jint)id_
                    withInt:(jint)sequence
               withNSString:(NSString *)from
               withNSString:(NSString *)to {
  AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence_initWithInt_withInt_withNSString_withNSString_(self, id_, sequence, from, to);
  return self;
}

- (jint)compareToWithId:(AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence *)o {
  cast_chk(o, [AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence class]);
  __unused jint idCmp = mId_ - ((AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence *) nil_chk(o))->mId_;
  if (idCmp == 0) {
    return mSequence_ - o->mSequence_;
  }
  else {
    return idCmp;
  }
}

- (void)dealloc {
  RELEASE_(mFrom_);
  RELEASE_(mTo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withNSString:withNSString:);
  methods[1].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mId_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mSequence_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mFrom_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mTo_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILNSString;LNSString;", "compareTo", "LAndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence;", "LAndroidArchPersistenceRoomUtilTableInfo;", "Ljava/lang/Object;Ljava/lang/Comparable<Landroid/arch/persistence/room/util/TableInfo$ForeignKeyWithSequence;>;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence = { "ForeignKeyWithSequence", "android.arch.persistence.room.util", ptrTable, methods, fields, 7, 0x8, 2, 4, 3, -1, -1, 4, -1 };
  return &_AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence;
}

@end

void AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence_initWithInt_withInt_withNSString_withNSString_(AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence *self, jint id_, jint sequence, NSString *from, NSString *to) {
  NSObject_init(self);
  self->mId_ = id_;
  self->mSequence_ = sequence;
  JreStrongAssign(&self->mFrom_, from);
  JreStrongAssign(&self->mTo_, to);
}

AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence *new_AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence_initWithInt_withInt_withNSString_withNSString_(jint id_, jint sequence, NSString *from, NSString *to) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence, initWithInt_withInt_withNSString_withNSString_, id_, sequence, from, to)
}

AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence *create_AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence_initWithInt_withInt_withNSString_withNSString_(jint id_, jint sequence, NSString *from, NSString *to) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence, initWithInt_withInt_withNSString_withNSString_, id_, sequence, from, to)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomUtilTableInfo_ForeignKeyWithSequence)
