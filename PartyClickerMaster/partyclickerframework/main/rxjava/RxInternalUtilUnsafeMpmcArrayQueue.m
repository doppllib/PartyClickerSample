//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue.h"
#include "RxInternalUtilUnsafeMpmcArrayQueue.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "sun/misc/Unsafe.h"

@interface RxInternalUtilUnsafeMpmcArrayQueueProducerField () {
 @public
  volatile_jlong producerIndex_;
}

@end

inline jlong RxInternalUtilUnsafeMpmcArrayQueueProducerField_get_P_INDEX_OFFSET();
static jlong RxInternalUtilUnsafeMpmcArrayQueueProducerField_P_INDEX_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeMpmcArrayQueueProducerField, P_INDEX_OFFSET, jlong)

__attribute__((unused)) static jlong RxInternalUtilUnsafeMpmcArrayQueueProducerField_lvProducerIndex(RxInternalUtilUnsafeMpmcArrayQueueProducerField *self);

__attribute__((unused)) static jboolean RxInternalUtilUnsafeMpmcArrayQueueProducerField_casProducerIndexWithLong_withLong_(RxInternalUtilUnsafeMpmcArrayQueueProducerField *self, jlong expect, jlong newValue);

@interface RxInternalUtilUnsafeMpmcArrayQueueConsumerField () {
 @public
  volatile_jlong consumerIndex_;
}

@end

inline jlong RxInternalUtilUnsafeMpmcArrayQueueConsumerField_get_C_INDEX_OFFSET();
static jlong RxInternalUtilUnsafeMpmcArrayQueueConsumerField_C_INDEX_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeMpmcArrayQueueConsumerField, C_INDEX_OFFSET, jlong)

__attribute__((unused)) static jlong RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(RxInternalUtilUnsafeMpmcArrayQueueConsumerField *self);

__attribute__((unused)) static jboolean RxInternalUtilUnsafeMpmcArrayQueueConsumerField_casConsumerIndexWithLong_withLong_(RxInternalUtilUnsafeMpmcArrayQueueConsumerField *self, jlong expect, jlong newValue);

@implementation RxInternalUtilUnsafeMpmcArrayQueueL1Pad

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilUnsafeMpmcArrayQueueL1Pad_initWithInt_(self, capacity);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p10_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p11_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p12_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p13_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p14_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p15_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p16_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p30_MpmcArrayQueueL1Pad_", "J", .constantValue.asLong = 0, 0x0, 1, -1, -1, -1 },
    { "p31_MpmcArrayQueueL1Pad_", "J", .constantValue.asLong = 0, 0x0, 2, -1, -1, -1 },
    { "p32_MpmcArrayQueueL1Pad_", "J", .constantValue.asLong = 0, 0x0, 3, -1, -1, -1 },
    { "p33_MpmcArrayQueueL1Pad_", "J", .constantValue.asLong = 0, 0x0, 4, -1, -1, -1 },
    { "p34_MpmcArrayQueueL1Pad_", "J", .constantValue.asLong = 0, 0x0, 5, -1, -1, -1 },
    { "p35_MpmcArrayQueueL1Pad_", "J", .constantValue.asLong = 0, 0x0, 6, -1, -1, -1 },
    { "p36_MpmcArrayQueueL1Pad_", "J", .constantValue.asLong = 0, 0x0, 7, -1, -1, -1 },
    { "p37_MpmcArrayQueueL1Pad_", "J", .constantValue.asLong = 0, 0x0, 8, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/ConcurrentSequencedCircularArrayQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeMpmcArrayQueueL1Pad = { "MpmcArrayQueueL1Pad", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x400, 1, 15, -1, -1, -1, 9, -1 };
  return &_RxInternalUtilUnsafeMpmcArrayQueueL1Pad;
}

@end

void RxInternalUtilUnsafeMpmcArrayQueueL1Pad_initWithInt_(RxInternalUtilUnsafeMpmcArrayQueueL1Pad *self, jint capacity) {
  RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_initWithInt_(self, capacity);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeMpmcArrayQueueL1Pad)

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUnsafeMpmcArrayQueueProducerField)

@implementation RxInternalUtilUnsafeMpmcArrayQueueProducerField

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilUnsafeMpmcArrayQueueProducerField_initWithInt_(self, capacity);
  return self;
}

- (jlong)lvProducerIndex {
  return RxInternalUtilUnsafeMpmcArrayQueueProducerField_lvProducerIndex(self);
}

- (jboolean)casProducerIndexWithLong:(jlong)expect
                            withLong:(jlong)newValue {
  return RxInternalUtilUnsafeMpmcArrayQueueProducerField_casProducerIndexWithLong_withLong_(self, expect, newValue);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(lvProducerIndex);
  methods[2].selector = @selector(casProducerIndexWithLong:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "P_INDEX_OFFSET", "J", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "producerIndex_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "casProducerIndex", "JJ", &RxInternalUtilUnsafeMpmcArrayQueueProducerField_P_INDEX_OFFSET, "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/MpmcArrayQueueL1Pad<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeMpmcArrayQueueProducerField = { "MpmcArrayQueueProducerField", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x400, 3, 2, -1, -1, -1, 4, -1 };
  return &_RxInternalUtilUnsafeMpmcArrayQueueProducerField;
}

+ (void)initialize {
  if (self == [RxInternalUtilUnsafeMpmcArrayQueueProducerField class]) {
    RxInternalUtilUnsafeMpmcArrayQueueProducerField_P_INDEX_OFFSET = RxInternalUtilUnsafeUnsafeAccess_addressOfWithIOSClass_withNSString_(RxInternalUtilUnsafeMpmcArrayQueueProducerField_class_(), @"producerIndex");
    J2OBJC_SET_INITIALIZED(RxInternalUtilUnsafeMpmcArrayQueueProducerField)
  }
}

@end

void RxInternalUtilUnsafeMpmcArrayQueueProducerField_initWithInt_(RxInternalUtilUnsafeMpmcArrayQueueProducerField *self, jint capacity) {
  RxInternalUtilUnsafeMpmcArrayQueueL1Pad_initWithInt_(self, capacity);
}

jlong RxInternalUtilUnsafeMpmcArrayQueueProducerField_lvProducerIndex(RxInternalUtilUnsafeMpmcArrayQueueProducerField *self) {
  return JreLoadVolatileLong(&self->producerIndex_);
}

jboolean RxInternalUtilUnsafeMpmcArrayQueueProducerField_casProducerIndexWithLong_withLong_(RxInternalUtilUnsafeMpmcArrayQueueProducerField *self, jlong expect, jlong newValue) {
  return [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) compareAndSwapLongWithId:self withLong:RxInternalUtilUnsafeMpmcArrayQueueProducerField_P_INDEX_OFFSET withLong:expect withLong:newValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeMpmcArrayQueueProducerField)

@implementation RxInternalUtilUnsafeMpmcArrayQueueL2Pad

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilUnsafeMpmcArrayQueueL2Pad_initWithInt_(self, capacity);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p20_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p21_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p22_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p23_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p24_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p25_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p26_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p30_MpmcArrayQueueL2Pad_", "J", .constantValue.asLong = 0, 0x0, 1, -1, -1, -1 },
    { "p31_MpmcArrayQueueL2Pad_", "J", .constantValue.asLong = 0, 0x0, 2, -1, -1, -1 },
    { "p32_MpmcArrayQueueL2Pad_", "J", .constantValue.asLong = 0, 0x0, 3, -1, -1, -1 },
    { "p33_MpmcArrayQueueL2Pad_", "J", .constantValue.asLong = 0, 0x0, 4, -1, -1, -1 },
    { "p34_MpmcArrayQueueL2Pad_", "J", .constantValue.asLong = 0, 0x0, 5, -1, -1, -1 },
    { "p35_MpmcArrayQueueL2Pad_", "J", .constantValue.asLong = 0, 0x0, 6, -1, -1, -1 },
    { "p36_MpmcArrayQueueL2Pad_", "J", .constantValue.asLong = 0, 0x0, 7, -1, -1, -1 },
    { "p37_MpmcArrayQueueL2Pad_", "J", .constantValue.asLong = 0, 0x0, 8, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/MpmcArrayQueueProducerField<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeMpmcArrayQueueL2Pad = { "MpmcArrayQueueL2Pad", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x400, 1, 15, -1, -1, -1, 9, -1 };
  return &_RxInternalUtilUnsafeMpmcArrayQueueL2Pad;
}

@end

void RxInternalUtilUnsafeMpmcArrayQueueL2Pad_initWithInt_(RxInternalUtilUnsafeMpmcArrayQueueL2Pad *self, jint capacity) {
  RxInternalUtilUnsafeMpmcArrayQueueProducerField_initWithInt_(self, capacity);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeMpmcArrayQueueL2Pad)

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUnsafeMpmcArrayQueueConsumerField)

@implementation RxInternalUtilUnsafeMpmcArrayQueueConsumerField

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilUnsafeMpmcArrayQueueConsumerField_initWithInt_(self, capacity);
  return self;
}

- (jlong)lvConsumerIndex {
  return RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(self);
}

- (jboolean)casConsumerIndexWithLong:(jlong)expect
                            withLong:(jlong)newValue {
  return RxInternalUtilUnsafeMpmcArrayQueueConsumerField_casConsumerIndexWithLong_withLong_(self, expect, newValue);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(lvConsumerIndex);
  methods[2].selector = @selector(casConsumerIndexWithLong:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "C_INDEX_OFFSET", "J", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "consumerIndex_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "casConsumerIndex", "JJ", &RxInternalUtilUnsafeMpmcArrayQueueConsumerField_C_INDEX_OFFSET, "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/MpmcArrayQueueL2Pad<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeMpmcArrayQueueConsumerField = { "MpmcArrayQueueConsumerField", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x400, 3, 2, -1, -1, -1, 4, -1 };
  return &_RxInternalUtilUnsafeMpmcArrayQueueConsumerField;
}

+ (void)initialize {
  if (self == [RxInternalUtilUnsafeMpmcArrayQueueConsumerField class]) {
    RxInternalUtilUnsafeMpmcArrayQueueConsumerField_C_INDEX_OFFSET = RxInternalUtilUnsafeUnsafeAccess_addressOfWithIOSClass_withNSString_(RxInternalUtilUnsafeMpmcArrayQueueConsumerField_class_(), @"consumerIndex");
    J2OBJC_SET_INITIALIZED(RxInternalUtilUnsafeMpmcArrayQueueConsumerField)
  }
}

@end

void RxInternalUtilUnsafeMpmcArrayQueueConsumerField_initWithInt_(RxInternalUtilUnsafeMpmcArrayQueueConsumerField *self, jint capacity) {
  RxInternalUtilUnsafeMpmcArrayQueueL2Pad_initWithInt_(self, capacity);
}

jlong RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(RxInternalUtilUnsafeMpmcArrayQueueConsumerField *self) {
  return JreLoadVolatileLong(&self->consumerIndex_);
}

jboolean RxInternalUtilUnsafeMpmcArrayQueueConsumerField_casConsumerIndexWithLong_withLong_(RxInternalUtilUnsafeMpmcArrayQueueConsumerField *self, jlong expect, jlong newValue) {
  return [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) compareAndSwapLongWithId:self withLong:RxInternalUtilUnsafeMpmcArrayQueueConsumerField_C_INDEX_OFFSET withLong:expect withLong:newValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeMpmcArrayQueueConsumerField)

@implementation RxInternalUtilUnsafeMpmcArrayQueue

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(self, capacity);
  return self;
}

- (jboolean)offerWithId:(id)e {
  if (nil == e) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Null is not a valid element");
  }
  jlong capacity = mask_ + 1;
  IOSLongArray *lSequenceBuffer = sequenceBuffer_;
  jlong currentProducerIndex;
  jlong seqOffset;
  jlong cIndex = JavaLangLong_MAX_VALUE;
  while (true) {
    currentProducerIndex = RxInternalUtilUnsafeMpmcArrayQueueProducerField_lvProducerIndex(self);
    seqOffset = [self calcSequenceOffsetWithLong:currentProducerIndex];
    jlong seq = [self lvSequenceWithLongArray:lSequenceBuffer withLong:seqOffset];
    jlong delta = seq - currentProducerIndex;
    if (delta == 0) {
      if (RxInternalUtilUnsafeMpmcArrayQueueProducerField_casProducerIndexWithLong_withLong_(self, currentProducerIndex, currentProducerIndex + 1)) {
        break;
      }
    }
    else if (delta < 0 && currentProducerIndex - capacity <= cIndex && currentProducerIndex - capacity <= (cIndex = RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(self))) {
      return false;
    }
  }
  jlong elementOffset = [self calcElementOffsetWithLong:currentProducerIndex];
  [self spElementWithLong:elementOffset withId:e];
  [self soSequenceWithLongArray:lSequenceBuffer withLong:seqOffset withLong:currentProducerIndex + 1];
  return true;
}

- (id)poll {
  IOSLongArray *lSequenceBuffer = sequenceBuffer_;
  jlong currentConsumerIndex;
  jlong seqOffset;
  jlong pIndex = -1;
  while (true) {
    currentConsumerIndex = RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(self);
    seqOffset = [self calcSequenceOffsetWithLong:currentConsumerIndex];
    jlong seq = [self lvSequenceWithLongArray:lSequenceBuffer withLong:seqOffset];
    jlong delta = seq - (currentConsumerIndex + 1);
    if (delta == 0) {
      if (RxInternalUtilUnsafeMpmcArrayQueueConsumerField_casConsumerIndexWithLong_withLong_(self, currentConsumerIndex, currentConsumerIndex + 1)) {
        break;
      }
    }
    else if (delta < 0 && currentConsumerIndex >= pIndex && currentConsumerIndex == (pIndex = RxInternalUtilUnsafeMpmcArrayQueueProducerField_lvProducerIndex(self))) {
      return nil;
    }
  }
  jlong offset = [self calcElementOffsetWithLong:currentConsumerIndex];
  id e = [self lpElementWithLong:offset];
  [self spElementWithLong:offset withId:nil];
  [self soSequenceWithLongArray:lSequenceBuffer withLong:seqOffset withLong:currentConsumerIndex + mask_ + 1];
  return e;
}

- (id)peek {
  jlong currConsumerIndex;
  id e;
  do {
    currConsumerIndex = RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(self);
    e = [self lpElementWithLong:[self calcElementOffsetWithLong:currConsumerIndex]];
  }
  while (e == nil && currConsumerIndex != RxInternalUtilUnsafeMpmcArrayQueueProducerField_lvProducerIndex(self));
  return e;
}

- (jint)size {
  jlong after = RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(self);
  while (true) {
    jlong before = after;
    jlong currentProducerIndex = RxInternalUtilUnsafeMpmcArrayQueueProducerField_lvProducerIndex(self);
    after = RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(self);
    if (before == after) {
      return (jint) (currentProducerIndex - after);
    }
  }
}

- (jboolean)isEmpty {
  return RxInternalUtilUnsafeMpmcArrayQueueConsumerField_lvConsumerIndex(self) == RxInternalUtilUnsafeMpmcArrayQueueProducerField_lvProducerIndex(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(offerWithId:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(peek);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p40_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p41_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p42_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p43_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p44_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p45_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p46_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p30_MpmcArrayQueue_", "J", .constantValue.asLong = 0, 0x0, 5, -1, -1, -1 },
    { "p31_MpmcArrayQueue_", "J", .constantValue.asLong = 0, 0x0, 6, -1, -1, -1 },
    { "p32_MpmcArrayQueue_", "J", .constantValue.asLong = 0, 0x0, 7, -1, -1, -1 },
    { "p33_MpmcArrayQueue_", "J", .constantValue.asLong = 0, 0x0, 8, -1, -1, -1 },
    { "p34_MpmcArrayQueue_", "J", .constantValue.asLong = 0, 0x0, 9, -1, -1, -1 },
    { "p35_MpmcArrayQueue_", "J", .constantValue.asLong = 0, 0x0, 10, -1, -1, -1 },
    { "p36_MpmcArrayQueue_", "J", .constantValue.asLong = 0, 0x0, 11, -1, -1, -1 },
    { "p37_MpmcArrayQueue_", "J", .constantValue.asLong = 0, 0x0, 12, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "offer", "LNSObject;", "(TE;)Z", "()TE;", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/MpmcArrayQueueConsumerField<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeMpmcArrayQueue = { "MpmcArrayQueue", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x1, 6, 15, -1, -1, -1, 13, -1 };
  return &_RxInternalUtilUnsafeMpmcArrayQueue;
}

@end

void RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(RxInternalUtilUnsafeMpmcArrayQueue *self, jint capacity) {
  RxInternalUtilUnsafeMpmcArrayQueueConsumerField_initWithInt_(self, JavaLangMath_maxWithInt_withInt_(2, capacity));
}

RxInternalUtilUnsafeMpmcArrayQueue *new_RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(RxInternalUtilUnsafeMpmcArrayQueue, initWithInt_, capacity)
}

RxInternalUtilUnsafeMpmcArrayQueue *create_RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(RxInternalUtilUnsafeMpmcArrayQueue, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeMpmcArrayQueue)
