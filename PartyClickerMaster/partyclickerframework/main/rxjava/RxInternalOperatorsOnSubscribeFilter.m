//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxExceptionsOnErrorThrowable.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOnSubscribeFilter.h"
#include "RxObservable.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Boolean.h"

@implementation RxInternalOperatorsOnSubscribeFilter

- (instancetype)initWithRxObservable:(RxObservable *)source
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate {
  RxInternalOperatorsOnSubscribeFilter_initWithRxObservable_withRxFunctionsFunc1_(self, source, predicate);
  return self;
}

- (void)callWithId:(RxSubscriber *)child {
  RxInternalOperatorsOnSubscribeFilter_FilterSubscriber *parent = create_RxInternalOperatorsOnSubscribeFilter_FilterSubscriber_initWithRxSubscriber_withRxFunctionsFunc1_(child, predicate_);
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:parent];
  [((RxObservable *) nil_chk(source_)) unsafeSubscribeWithRxSubscriber:parent];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(predicate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObservable:withRxFunctionsFunc1:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxObservable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "predicate_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LRxObservable;LRxFunctionsFunc1;", "(Lrx/Observable<TT;>;Lrx/functions/Func1<-TT;Ljava/lang/Boolean;>;)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "Lrx/Observable<TT;>;", "Lrx/functions/Func1<-TT;Ljava/lang/Boolean;>;", "LRxInternalOperatorsOnSubscribeFilter_FilterSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeFilter = { "OnSubscribeFilter", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_RxInternalOperatorsOnSubscribeFilter;
}

@end

void RxInternalOperatorsOnSubscribeFilter_initWithRxObservable_withRxFunctionsFunc1_(RxInternalOperatorsOnSubscribeFilter *self, RxObservable *source, id<RxFunctionsFunc1> predicate) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->predicate_, predicate);
}

RxInternalOperatorsOnSubscribeFilter *new_RxInternalOperatorsOnSubscribeFilter_initWithRxObservable_withRxFunctionsFunc1_(RxObservable *source, id<RxFunctionsFunc1> predicate) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeFilter, initWithRxObservable_withRxFunctionsFunc1_, source, predicate)
}

RxInternalOperatorsOnSubscribeFilter *create_RxInternalOperatorsOnSubscribeFilter_initWithRxObservable_withRxFunctionsFunc1_(RxObservable *source, id<RxFunctionsFunc1> predicate) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeFilter, initWithRxObservable_withRxFunctionsFunc1_, source, predicate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeFilter)

@implementation RxInternalOperatorsOnSubscribeFilter_FilterSubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate {
  RxInternalOperatorsOnSubscribeFilter_FilterSubscriber_initWithRxSubscriber_withRxFunctionsFunc1_(self, actual, predicate);
  return self;
}

- (void)onNextWithId:(id)t {
  jboolean result;
  @try {
    result = [((JavaLangBoolean *) nil_chk([((id<RxFunctionsFunc1>) nil_chk(predicate_)) callWithId:t])) booleanValue];
  }
  @catch (NSException *ex) {
    RxExceptionsExceptions_throwIfFatalWithNSException_(ex);
    [self unsubscribe];
    [self onErrorWithNSException:RxExceptionsOnErrorThrowable_addValueAsLastCauseWithNSException_withId_(ex, t)];
    return;
  }
  if (result) {
    [((RxSubscriber *) nil_chk(actual_)) onNextWithId:t];
  }
  else {
    [self requestWithLong:1];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  if (done_) {
    RxPluginsRxJavaHooks_onErrorWithNSException_(e);
    return;
  }
  done_ = true;
  [((RxSubscriber *) nil_chk(actual_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  if (done_) {
    return;
  }
  [((RxSubscriber *) nil_chk(actual_)) onCompleted];
}

- (void)setProducerWithRxProducer:(id<RxProducer>)p {
  [super setProducerWithRxProducer:p];
  [((RxSubscriber *) nil_chk(actual_)) setProducerWithRxProducer:p];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(predicate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:withRxFunctionsFunc1:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(setProducerWithRxProducer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "predicate_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LRxFunctionsFunc1;", "(Lrx/Subscriber<-TT;>;Lrx/functions/Func1<-TT;Ljava/lang/Boolean;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "setProducer", "LRxProducer;", "Lrx/Subscriber<-TT;>;", "Lrx/functions/Func1<-TT;Ljava/lang/Boolean;>;", "LRxInternalOperatorsOnSubscribeFilter;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeFilter_FilterSubscriber = { "FilterSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 5, 3, 11, -1, -1, 12, -1 };
  return &_RxInternalOperatorsOnSubscribeFilter_FilterSubscriber;
}

@end

void RxInternalOperatorsOnSubscribeFilter_FilterSubscriber_initWithRxSubscriber_withRxFunctionsFunc1_(RxInternalOperatorsOnSubscribeFilter_FilterSubscriber *self, RxSubscriber *actual, id<RxFunctionsFunc1> predicate) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->predicate_, predicate);
  [self requestWithLong:0];
}

RxInternalOperatorsOnSubscribeFilter_FilterSubscriber *new_RxInternalOperatorsOnSubscribeFilter_FilterSubscriber_initWithRxSubscriber_withRxFunctionsFunc1_(RxSubscriber *actual, id<RxFunctionsFunc1> predicate) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeFilter_FilterSubscriber, initWithRxSubscriber_withRxFunctionsFunc1_, actual, predicate)
}

RxInternalOperatorsOnSubscribeFilter_FilterSubscriber *create_RxInternalOperatorsOnSubscribeFilter_FilterSubscriber_initWithRxSubscriber_withRxFunctionsFunc1_(RxSubscriber *actual, id<RxFunctionsFunc1> predicate) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeFilter_FilterSubscriber, initWithRxSubscriber_withRxFunctionsFunc1_, actual, predicate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeFilter_FilterSubscriber)
