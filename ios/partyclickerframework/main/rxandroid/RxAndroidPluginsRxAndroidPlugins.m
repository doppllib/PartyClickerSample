//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxAndroidPluginsRxAndroidPlugins.h"
#include "RxAndroidPluginsRxAndroidSchedulersHook.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface RxAndroidPluginsRxAndroidPlugins () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *schedulersHook_;
}

@end

J2OBJC_FIELD_SETTER(RxAndroidPluginsRxAndroidPlugins, schedulersHook_, JavaUtilConcurrentAtomicAtomicReference *)

inline RxAndroidPluginsRxAndroidPlugins *RxAndroidPluginsRxAndroidPlugins_get_INSTANCE();
static RxAndroidPluginsRxAndroidPlugins *RxAndroidPluginsRxAndroidPlugins_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxAndroidPluginsRxAndroidPlugins, INSTANCE, RxAndroidPluginsRxAndroidPlugins *)

J2OBJC_INITIALIZED_DEFN(RxAndroidPluginsRxAndroidPlugins)

@implementation RxAndroidPluginsRxAndroidPlugins

+ (RxAndroidPluginsRxAndroidPlugins *)getInstance {
  return RxAndroidPluginsRxAndroidPlugins_getInstance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidPluginsRxAndroidPlugins_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(schedulersHook_)) setWithId:nil];
}

- (RxAndroidPluginsRxAndroidSchedulersHook *)getSchedulersHook {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(schedulersHook_)) get] == nil) {
    [schedulersHook_ compareAndSetWithId:nil withId:RxAndroidPluginsRxAndroidSchedulersHook_getDefaultInstance()];
  }
  return [schedulersHook_ get];
}

- (void)registerSchedulersHookWithRxAndroidPluginsRxAndroidSchedulersHook:(RxAndroidPluginsRxAndroidSchedulersHook *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(schedulersHook_)) compareAndSetWithId:nil withId:impl]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [schedulersHook_ get]));
  }
}

- (void)dealloc {
  RELEASE_(schedulersHook_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxAndroidPluginsRxAndroidPlugins;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxAndroidPluginsRxAndroidSchedulersHook;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(getSchedulersHook);
  methods[4].selector = @selector(registerSchedulersHookWithRxAndroidPluginsRxAndroidSchedulersHook:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxAndroidPluginsRxAndroidPlugins;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
    { "schedulersHook_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "registerSchedulersHook", "LRxAndroidPluginsRxAndroidSchedulersHook;", &RxAndroidPluginsRxAndroidPlugins_INSTANCE, "Ljava/util/concurrent/atomic/AtomicReference<Lrx/android/plugins/RxAndroidSchedulersHook;>;" };
  static const J2ObjcClassInfo _RxAndroidPluginsRxAndroidPlugins = { "RxAndroidPlugins", "rx.android.plugins", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, -1, -1 };
  return &_RxAndroidPluginsRxAndroidPlugins;
}

+ (void)initialize {
  if (self == [RxAndroidPluginsRxAndroidPlugins class]) {
    JreStrongAssignAndConsume(&RxAndroidPluginsRxAndroidPlugins_INSTANCE, new_RxAndroidPluginsRxAndroidPlugins_init());
    J2OBJC_SET_INITIALIZED(RxAndroidPluginsRxAndroidPlugins)
  }
}

@end

RxAndroidPluginsRxAndroidPlugins *RxAndroidPluginsRxAndroidPlugins_getInstance() {
  RxAndroidPluginsRxAndroidPlugins_initialize();
  return RxAndroidPluginsRxAndroidPlugins_INSTANCE;
}

void RxAndroidPluginsRxAndroidPlugins_init(RxAndroidPluginsRxAndroidPlugins *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->schedulersHook_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

RxAndroidPluginsRxAndroidPlugins *new_RxAndroidPluginsRxAndroidPlugins_init() {
  J2OBJC_NEW_IMPL(RxAndroidPluginsRxAndroidPlugins, init)
}

RxAndroidPluginsRxAndroidPlugins *create_RxAndroidPluginsRxAndroidPlugins_init() {
  J2OBJC_CREATE_IMPL(RxAndroidPluginsRxAndroidPlugins, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidPluginsRxAndroidPlugins)
