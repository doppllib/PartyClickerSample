//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeFromCallable
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeFromCallable

#if !defined (RxInternalOperatorsOnSubscribeFromCallable_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable || defined(INCLUDE_RxInternalOperatorsOnSubscribeFromCallable))
#define RxInternalOperatorsOnSubscribeFromCallable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

@class RxSubscriber;
@protocol JavaUtilConcurrentCallable;

@interface RxInternalOperatorsOnSubscribeFromCallable : NSObject < RxObservable_OnSubscribe >

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resultFactory;

- (void)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeFromCallable)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeFromCallable_initWithJavaUtilConcurrentCallable_(RxInternalOperatorsOnSubscribeFromCallable *self, id<JavaUtilConcurrentCallable> resultFactory);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromCallable *new_RxInternalOperatorsOnSubscribeFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> resultFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromCallable *create_RxInternalOperatorsOnSubscribeFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> resultFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeFromCallable)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable")
