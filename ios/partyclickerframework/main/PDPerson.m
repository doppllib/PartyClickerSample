//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "PDPerson.h"
#include "java/text/DateFormat.h"
#include "java/util/Date.h"

@interface PDPerson () {
 @public
  jint id__;
  JavaUtilDate *recorded_;
  jshort val_;
  jint partyId_;
}

@end

J2OBJC_FIELD_SETTER(PDPerson, recorded_, JavaUtilDate *)

inline JavaTextDateFormat *PDPerson_get_standardTimeFormat();
static JavaTextDateFormat *PDPerson_standardTimeFormat;
J2OBJC_STATIC_FIELD_OBJ_FINAL(PDPerson, standardTimeFormat, JavaTextDateFormat *)

J2OBJC_INITIALIZED_DEFN(PDPerson)

@implementation PDPerson

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PDPerson_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)recordedString {
  return [((JavaTextDateFormat *) nil_chk(PDPerson_standardTimeFormat)) formatWithJavaUtilDate:recorded_];
}

- (jint)getId {
  return id__;
}

- (void)setIdWithInt:(jint)id_ {
  self->id__ = id_;
}

- (JavaUtilDate *)getRecorded {
  return recorded_;
}

- (void)setRecordedWithJavaUtilDate:(JavaUtilDate *)recorded {
  JreStrongAssign(&self->recorded_, recorded);
}

- (jshort)getVal {
  return val_;
}

- (void)setValWithShort:(jshort)val {
  self->val_ = val;
}

- (jint)getPartyId {
  return partyId_;
}

- (void)setPartyIdWithInt:(jint)partyId {
  self->partyId_ = partyId;
}

- (void)dealloc {
  RELEASE_(recorded_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(recordedString);
  methods[2].selector = @selector(getId);
  methods[3].selector = @selector(setIdWithInt:);
  methods[4].selector = @selector(getRecorded);
  methods[5].selector = @selector(setRecordedWithJavaUtilDate:);
  methods[6].selector = @selector(getVal);
  methods[7].selector = @selector(setValWithShort:);
  methods[8].selector = @selector(getPartyId);
  methods[9].selector = @selector(setPartyIdWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "standardTimeFormat", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "id__", "I", .constantValue.asLong = 0, 0x2, 8, -1, -1, -1 },
    { "recorded_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "val_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "partyId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setId", "I", "setRecorded", "LJavaUtilDate;", "setVal", "S", "setPartyId", &PDPerson_standardTimeFormat, "id" };
  static const J2ObjcClassInfo _PDPerson = { "Person", "com.kgalligan.partyclicker.data", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_PDPerson;
}

+ (void)initialize {
  if (self == [PDPerson class]) {
    JreStrongAssign(&PDPerson_standardTimeFormat, JavaTextDateFormat_getTimeInstanceWithInt_(JavaTextDateFormat_MEDIUM));
    J2OBJC_SET_INITIALIZED(PDPerson)
  }
}

@end

void PDPerson_init(PDPerson *self) {
  NSObject_init(self);
}

PDPerson *new_PDPerson_init() {
  J2OBJC_NEW_IMPL(PDPerson, init)
}

PDPerson *create_PDPerson_init() {
  J2OBJC_CREATE_IMPL(PDPerson, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PDPerson)
