//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalOperatorsOnSubscribeThrow.h"
#include "RxSubscriber.h"

@interface RxInternalOperatorsOnSubscribeThrow () {
 @public
  NSException *exception_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeThrow, exception_, NSException *)

@implementation RxInternalOperatorsOnSubscribeThrow

- (instancetype)initWithNSException:(NSException *)exception {
  RxInternalOperatorsOnSubscribeThrow_initWithNSException_(self, exception);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) onErrorWithNSException:exception_];
}

- (void)dealloc {
  RELEASE_(exception_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSException:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "exception_", "LNSException;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeThrow = { "OnSubscribeThrow", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeThrow;
}

@end

void RxInternalOperatorsOnSubscribeThrow_initWithNSException_(RxInternalOperatorsOnSubscribeThrow *self, NSException *exception) {
  NSObject_init(self);
  JreStrongAssign(&self->exception_, exception);
}

RxInternalOperatorsOnSubscribeThrow *new_RxInternalOperatorsOnSubscribeThrow_initWithNSException_(NSException *exception) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeThrow, initWithNSException_, exception)
}

RxInternalOperatorsOnSubscribeThrow *create_RxInternalOperatorsOnSubscribeThrow_initWithNSException_(NSException *exception) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeThrow, initWithNSException_, exception)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeThrow)
