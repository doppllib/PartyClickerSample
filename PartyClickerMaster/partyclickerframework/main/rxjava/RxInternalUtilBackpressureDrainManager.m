//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalUtilBackpressureDrainManager.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong RxInternalUtilBackpressureDrainManager_get_serialVersionUID();
#define RxInternalUtilBackpressureDrainManager_serialVersionUID 2826241102729529449LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalUtilBackpressureDrainManager, serialVersionUID, jlong)

@interface RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback : NSObject

@end

@implementation RxInternalUtilBackpressureDrainManager

- (instancetype)initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback:(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>)actual {
  RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(self, actual);
  return self;
}

- (jboolean)isTerminated {
  return JreLoadVolatileBoolean(&terminated_);
}

- (void)terminate {
  JreAssignVolatileBoolean(&terminated_, true);
}

- (void)terminateWithNSException:(NSException *)error {
  if (!JreLoadVolatileBoolean(&terminated_)) {
    JreStrongAssign(&exception_, error);
    JreAssignVolatileBoolean(&terminated_, true);
  }
}

- (void)terminateAndDrain {
  JreAssignVolatileBoolean(&terminated_, true);
  [self drain];
}

- (void)terminateAndDrainWithNSException:(NSException *)error {
  if (!JreLoadVolatileBoolean(&terminated_)) {
    JreStrongAssign(&exception_, error);
    JreAssignVolatileBoolean(&terminated_, true);
    [self drain];
  }
}

- (void)requestWithLong:(jlong)n {
  if (n == 0) {
    return;
  }
  jboolean mayDrain;
  jlong r;
  jlong u;
  do {
    r = [self get];
    mayDrain = (r == 0);
    if (r == JavaLangLong_MAX_VALUE) {
      break;
    }
    if (n == JavaLangLong_MAX_VALUE) {
      u = n;
      mayDrain = true;
    }
    else {
      if (r > JavaLangLong_MAX_VALUE - n) {
        u = JavaLangLong_MAX_VALUE;
      }
      else {
        u = r + n;
      }
    }
  }
  while (![self compareAndSetWithLong:r withLong:u]);
  if (mayDrain) {
    [self drain];
  }
}

- (void)drain {
  jboolean term;
  @synchronized(self) {
    if (emitting_) {
      return;
    }
    emitting_ = true;
    term = JreLoadVolatileBoolean(&terminated_);
  }
  jlong n = [self get];
  jboolean skipFinal = false;
  @try {
    id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> a = actual_;
    while (true) {
      jint emitted = 0;
      while (n > 0 || term) {
        id o;
        if (term) {
          o = [((id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>) nil_chk(a)) peek];
          if (o == nil) {
            skipFinal = true;
            NSException *e = exception_;
            [a completeWithNSException:e];
            return;
          }
          if (n == 0) {
            break;
          }
        }
        o = [((id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>) nil_chk(a)) poll];
        if (o == nil) {
          break;
        }
        else {
          if ([a acceptWithId:o]) {
            skipFinal = true;
            return;
          }
          n--;
          emitted++;
        }
      }
      @synchronized(self) {
        term = JreLoadVolatileBoolean(&terminated_);
        jboolean more = [((id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>) nil_chk(a)) peek] != nil;
        if ([self get] == JavaLangLong_MAX_VALUE) {
          if (!more && !term) {
            skipFinal = true;
            emitting_ = false;
            return;
          }
          n = JavaLangLong_MAX_VALUE;
        }
        else {
          n = [self addAndGetWithLong:-emitted];
          if ((n == 0 || !more) && (!term || more)) {
            skipFinal = true;
            emitting_ = false;
            return;
          }
        }
      }
    }
  }
  @finally {
    if (!skipFinal) {
      @synchronized(self) {
        emitting_ = false;
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(exception_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback:);
  methods[1].selector = @selector(isTerminated);
  methods[2].selector = @selector(terminate);
  methods[3].selector = @selector(terminateWithNSException:);
  methods[4].selector = @selector(terminateAndDrain);
  methods[5].selector = @selector(terminateAndDrainWithNSException:);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalUtilBackpressureDrainManager_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "terminated_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "exception_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "actual_", "LRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback;", "terminate", "LNSException;", "terminateAndDrain", "request", "J" };
  static const J2ObjcClassInfo _RxInternalUtilBackpressureDrainManager = { "BackpressureDrainManager", "rx.internal.util", ptrTable, methods, fields, 7, 0x11, 8, 5, -1, 0, -1, -1, -1 };
  return &_RxInternalUtilBackpressureDrainManager;
}

@end

void RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(RxInternalUtilBackpressureDrainManager *self, id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->actual_, actual);
}

RxInternalUtilBackpressureDrainManager *new_RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual) {
  J2OBJC_NEW_IMPL(RxInternalUtilBackpressureDrainManager, initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_, actual)
}

RxInternalUtilBackpressureDrainManager *create_RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual) {
  J2OBJC_CREATE_IMPL(RxInternalUtilBackpressureDrainManager, initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilBackpressureDrainManager)

@implementation RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(peek);
  methods[1].selector = @selector(poll);
  methods[2].selector = @selector(acceptWithId:);
  methods[3].selector = @selector(completeWithNSException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "LNSObject;", "complete", "LNSException;", "LRxInternalUtilBackpressureDrainManager;" };
  static const J2ObjcClassInfo _RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback = { "BackpressureQueueCallback", "rx.internal.util", ptrTable, methods, NULL, 7, 0x609, 4, 0, 4, -1, -1, -1, -1 };
  return &_RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback)
