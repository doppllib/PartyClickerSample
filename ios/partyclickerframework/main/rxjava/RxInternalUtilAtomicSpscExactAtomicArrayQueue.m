//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilAtomicSpscExactAtomicArrayQueue.h"
#include "RxInternalUtilUnsafePow2.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"
#include "java/util/stream/Stream.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline jlong RxInternalUtilAtomicSpscExactAtomicArrayQueue_get_serialVersionUID();
#define RxInternalUtilAtomicSpscExactAtomicArrayQueue_serialVersionUID 6210984603741293445LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalUtilAtomicSpscExactAtomicArrayQueue, serialVersionUID, jlong)

@implementation RxInternalUtilAtomicSpscExactAtomicArrayQueue

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(self, capacity);
  return self;
}

- (jboolean)offerWithId:(id)value {
  if (value == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  jlong pi = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(producerIndex_)) get];
  jint m = mask_;
  jint fullCheck = (jint) (pi + capacitySkip_) & m;
  if ([self getWithInt:fullCheck] != nil) {
    return false;
  }
  jint offset = (jint) pi & m;
  [producerIndex_ lazySetWithLong:pi + 1];
  [self lazySetWithInt:offset withId:value];
  return true;
}

- (id)poll {
  jlong ci = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(consumerIndex_)) get];
  jint offset = (jint) ci & mask_;
  id value = [self getWithInt:offset];
  if (value == nil) {
    return nil;
  }
  [consumerIndex_ lazySetWithLong:ci + 1];
  [self lazySetWithInt:offset withId:nil];
  return value;
}

- (id)peek {
  return [self getWithInt:(jint) [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(consumerIndex_)) get] & mask_];
}

- (void)clear {
  while ([self poll] != nil || ![self isEmpty]) ;
}

- (jboolean)isEmpty {
  return producerIndex_ == consumerIndex_;
}

- (jint)size {
  jlong ci = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(consumerIndex_)) get];
  for (; ; ) {
    jlong pi = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(producerIndex_)) get];
    jlong ci2 = [consumerIndex_ get];
    if (ci == ci2) {
      return (jint) (pi - ci2);
    }
    ci = ci2;
  }
}

- (jboolean)containsWithId:(id)o {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilIterator>)iterator {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)toArray {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)removeWithId:(id)o {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)addWithId:(id)e {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)element {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilCollection_removeIfWithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilCollection_spliterator(self);
}

- (id<JavaUtilStreamStream>)stream {
  return JavaUtilCollection_stream(self);
}

- (id<JavaUtilStreamStream>)parallelStream {
  return JavaUtilCollection_parallelStream(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(producerIndex_);
  RELEASE_(consumerIndex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 14, 12, -1, 15, -1, -1 },
    { NULL, "Z", 0x1, 16, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 17, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 18, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(offerWithId:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(peek);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(isEmpty);
  methods[6].selector = @selector(size);
  methods[7].selector = @selector(containsWithId:);
  methods[8].selector = @selector(iterator);
  methods[9].selector = @selector(toArray);
  methods[10].selector = @selector(toArrayWithNSObjectArray:);
  methods[11].selector = @selector(removeWithId:);
  methods[12].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[13].selector = @selector(addAllWithJavaUtilCollection:);
  methods[14].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[15].selector = @selector(retainAllWithJavaUtilCollection:);
  methods[16].selector = @selector(addWithId:);
  methods[17].selector = @selector(remove);
  methods[18].selector = @selector(element);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalUtilAtomicSpscExactAtomicArrayQueue_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "mask_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "capacitySkip_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "producerIndex_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "consumerIndex_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "offer", "LNSObject;", "(TT;)Z", "()TT;", "contains", "()Ljava/util/Iterator<TT;>;", "toArray", "[LNSObject;", "<E:Ljava/lang/Object;>([TE;)[TE;", "remove", "containsAll", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)Z", "addAll", "(Ljava/util/Collection<+TT;>;)Z", "removeAll", "retainAll", "add", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReferenceArray<TT;>;Ljava/util/Queue<TT;>;" };
  static const J2ObjcClassInfo _RxInternalUtilAtomicSpscExactAtomicArrayQueue = { "SpscExactAtomicArrayQueue", "rx.internal.util.atomic", ptrTable, methods, fields, 7, 0x11, 19, 5, -1, -1, -1, 19, -1 };
  return &_RxInternalUtilAtomicSpscExactAtomicArrayQueue;
}

@end

void RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(RxInternalUtilAtomicSpscExactAtomicArrayQueue *self, jint capacity) {
  JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(self, RxInternalUtilUnsafePow2_roundToPowerOfTwoWithInt_(capacity));
  jint len = [self length];
  self->mask_ = len - 1;
  self->capacitySkip_ = len - capacity;
  JreStrongAssignAndConsume(&self->producerIndex_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->consumerIndex_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

RxInternalUtilAtomicSpscExactAtomicArrayQueue *new_RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(RxInternalUtilAtomicSpscExactAtomicArrayQueue, initWithInt_, capacity)
}

RxInternalUtilAtomicSpscExactAtomicArrayQueue *create_RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(RxInternalUtilAtomicSpscExactAtomicArrayQueue, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilAtomicSpscExactAtomicArrayQueue)
