//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgSkyscreamerJsonassertArrayValueMatcher.h"
#include "OrgSkyscreamerJsonassertComparatorJSONComparator.h"
#include "OrgSkyscreamerJsonassertJSONCompareResult.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/text/MessageFormat.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONException.h"

@interface OrgSkyscreamerJsonassertArrayValueMatcher () {
 @public
  id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator_;
  jint from_;
  jint to_;
}

@end

J2OBJC_FIELD_SETTER(OrgSkyscreamerJsonassertArrayValueMatcher, comparator_, id<OrgSkyscreamerJsonassertComparatorJSONComparator>)

@implementation OrgSkyscreamerJsonassertArrayValueMatcher

- (instancetype)initWithOrgSkyscreamerJsonassertComparatorJSONComparator:(id<OrgSkyscreamerJsonassertComparatorJSONComparator>)comparator {
  OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_(self, comparator);
  return self;
}

- (instancetype)initWithOrgSkyscreamerJsonassertComparatorJSONComparator:(id<OrgSkyscreamerJsonassertComparatorJSONComparator>)comparator
                                                                 withInt:(jint)index {
  OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_(self, comparator, index);
  return self;
}

- (instancetype)initWithOrgSkyscreamerJsonassertComparatorJSONComparator:(id<OrgSkyscreamerJsonassertComparatorJSONComparator>)comparator
                                                                 withInt:(jint)from
                                                                 withInt:(jint)to {
  OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_withInt_(self, comparator, from, to);
  return self;
}

- (jboolean)equalWithId:(id)o1
                 withId:(id)o2 {
  return false;
}

- (jboolean)equalWithNSString:(NSString *)prefix
                       withId:(id)actual
                       withId:(id)expected
withOrgSkyscreamerJsonassertJSONCompareResult:(OrgSkyscreamerJsonassertJSONCompareResult *)result {
  if (!([actual isKindOfClass:[OrgJsonJSONArray class]])) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"ArrayValueMatcher applied to non-array actual value");
  }
  @try {
    OrgJsonJSONArray *actualArray = (OrgJsonJSONArray *) cast_chk(actual, [OrgJsonJSONArray class]);
    OrgJsonJSONArray *expectedArray = [expected isKindOfClass:[OrgJsonJSONArray class]] ? (OrgJsonJSONArray *) cast_chk(expected, [OrgJsonJSONArray class]) : create_OrgJsonJSONArray_initWithId_([IOSObjectArray arrayWithObjects:(id[]){ expected } count:1 type:NSObject_class_()]);
    jint first = JavaLangMath_maxWithInt_withInt_(0, from_);
    jint last = JavaLangMath_minWithInt_withInt_([((OrgJsonJSONArray *) nil_chk(actualArray)) length] - 1, to_);
    jint expectedLen = [expectedArray length];
    for (jint i = first; i <= last; i++) {
      NSString *elementPrefix = JavaTextMessageFormat_formatWithNSString_withNSObjectArray_(@"{0}[{1}]", [IOSObjectArray arrayWithObjects:(id[]){ prefix, JavaLangInteger_valueOfWithInt_(i) } count:2 type:NSObject_class_()]);
      id actualElement = [actualArray getWithInt:i];
      id expectedElement = [expectedArray getWithInt:(i - first) % expectedLen];
      [((id<OrgSkyscreamerJsonassertComparatorJSONComparator>) nil_chk(comparator_)) compareValuesWithNSString:elementPrefix withId:expectedElement withId:actualElement withOrgSkyscreamerJsonassertJSONCompareResult:result];
    }
    return true;
  }
  @catch (OrgJsonJSONException *e) {
    return false;
  }
}

- (void)dealloc {
  RELEASE_(comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 3, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgSkyscreamerJsonassertComparatorJSONComparator:);
  methods[1].selector = @selector(initWithOrgSkyscreamerJsonassertComparatorJSONComparator:withInt:);
  methods[2].selector = @selector(initWithOrgSkyscreamerJsonassertComparatorJSONComparator:withInt:withInt:);
  methods[3].selector = @selector(equalWithId:withId:);
  methods[4].selector = @selector(equalWithNSString:withId:withId:withOrgSkyscreamerJsonassertJSONCompareResult:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "comparator_", "LOrgSkyscreamerJsonassertComparatorJSONComparator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "from_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "to_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSkyscreamerJsonassertComparatorJSONComparator;", "LOrgSkyscreamerJsonassertComparatorJSONComparator;I", "LOrgSkyscreamerJsonassertComparatorJSONComparator;II", "equal", "LNSObject;LNSObject;", "(TT;TT;)Z", "LNSString;LNSObject;LNSObject;LOrgSkyscreamerJsonassertJSONCompareResult;", "(Ljava/lang/String;TT;TT;Lorg/skyscreamer/jsonassert/JSONCompareResult;)Z", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/skyscreamer/jsonassert/LocationAwareValueMatcher<TT;>;" };
  static const J2ObjcClassInfo _OrgSkyscreamerJsonassertArrayValueMatcher = { "ArrayValueMatcher", "org.skyscreamer.jsonassert", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, 8, -1 };
  return &_OrgSkyscreamerJsonassertArrayValueMatcher;
}

@end

void OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_(OrgSkyscreamerJsonassertArrayValueMatcher *self, id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator) {
  OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_withInt_(self, comparator, 0, JavaLangInteger_MAX_VALUE);
}

OrgSkyscreamerJsonassertArrayValueMatcher *new_OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_(id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertArrayValueMatcher, initWithOrgSkyscreamerJsonassertComparatorJSONComparator_, comparator)
}

OrgSkyscreamerJsonassertArrayValueMatcher *create_OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_(id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertArrayValueMatcher, initWithOrgSkyscreamerJsonassertComparatorJSONComparator_, comparator)
}

void OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_(OrgSkyscreamerJsonassertArrayValueMatcher *self, id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator, jint index) {
  OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_withInt_(self, comparator, index, index);
}

OrgSkyscreamerJsonassertArrayValueMatcher *new_OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_(id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator, jint index) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertArrayValueMatcher, initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_, comparator, index)
}

OrgSkyscreamerJsonassertArrayValueMatcher *create_OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_(id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator, jint index) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertArrayValueMatcher, initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_, comparator, index)
}

void OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_withInt_(OrgSkyscreamerJsonassertArrayValueMatcher *self, id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator, jint from, jint to) {
  NSObject_init(self);
  JreAssert((comparator != nil), (@"comparator null"));
  JreAssert((from >= 0), (JavaTextMessageFormat_formatWithNSString_withNSObjectArray_(@"from({0}) < 0", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(from) } count:1 type:NSObject_class_()])));
  JreAssert((to >= from), (JavaTextMessageFormat_formatWithNSString_withNSObjectArray_(@"to({0}) < from({1})", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(to), JavaLangInteger_valueOfWithInt_(from) } count:2 type:NSObject_class_()])));
  JreStrongAssign(&self->comparator_, comparator);
  self->from_ = from;
  self->to_ = to;
}

OrgSkyscreamerJsonassertArrayValueMatcher *new_OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_withInt_(id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator, jint from, jint to) {
  J2OBJC_NEW_IMPL(OrgSkyscreamerJsonassertArrayValueMatcher, initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_withInt_, comparator, from, to)
}

OrgSkyscreamerJsonassertArrayValueMatcher *create_OrgSkyscreamerJsonassertArrayValueMatcher_initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_withInt_(id<OrgSkyscreamerJsonassertComparatorJSONComparator> comparator, jint from, jint to) {
  J2OBJC_CREATE_IMPL(OrgSkyscreamerJsonassertArrayValueMatcher, initWithOrgSkyscreamerJsonassertComparatorJSONComparator_withInt_withInt_, comparator, from, to)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSkyscreamerJsonassertArrayValueMatcher)
