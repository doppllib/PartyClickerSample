//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilAtomicAtomicReferenceArrayQueue")
#ifdef RESTRICT_RxInternalUtilAtomicAtomicReferenceArrayQueue
#define INCLUDE_ALL_RxInternalUtilAtomicAtomicReferenceArrayQueue 0
#else
#define INCLUDE_ALL_RxInternalUtilAtomicAtomicReferenceArrayQueue 1
#endif
#undef RESTRICT_RxInternalUtilAtomicAtomicReferenceArrayQueue

#if !defined (RxInternalUtilAtomicAtomicReferenceArrayQueue_) && (INCLUDE_ALL_RxInternalUtilAtomicAtomicReferenceArrayQueue || defined(INCLUDE_RxInternalUtilAtomicAtomicReferenceArrayQueue))
#define RxInternalUtilAtomicAtomicReferenceArrayQueue_

#define RESTRICT_JavaUtilAbstractQueue 1
#define INCLUDE_JavaUtilAbstractQueue 1
#include "java/util/AbstractQueue.h"

@class JavaUtilConcurrentAtomicAtomicReferenceArray;
@protocol JavaUtilIterator;

@interface RxInternalUtilAtomicAtomicReferenceArrayQueue : JavaUtilAbstractQueue {
 @public
  JavaUtilConcurrentAtomicAtomicReferenceArray *buffer_;
  jint mask_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (void)clear;

- (id<JavaUtilIterator>)iterator;

#pragma mark Protected

- (jint)calcElementOffsetWithLong:(jlong)index;

- (jint)calcElementOffsetWithLong:(jlong)index
                          withInt:(jint)mask;

- (id)lpElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                        withInt:(jint)offset;

- (id)lpElementWithInt:(jint)offset;

- (id)lvElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                        withInt:(jint)offset;

- (id)lvElementWithInt:(jint)offset;

- (void)soElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                          withInt:(jint)offset
                                                           withId:(id)value;

- (void)soElementWithInt:(jint)offset
                  withId:(id)value;

- (void)spElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                          withInt:(jint)offset
                                                           withId:(id)value;

- (void)spElementWithInt:(jint)offset
                  withId:(id)value;

- (void)svElementWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray *)buffer
                                                          withInt:(jint)offset
                                                           withId:(id)value;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilAtomicAtomicReferenceArrayQueue)

J2OBJC_FIELD_SETTER(RxInternalUtilAtomicAtomicReferenceArrayQueue, buffer_, JavaUtilConcurrentAtomicAtomicReferenceArray *)

FOUNDATION_EXPORT void RxInternalUtilAtomicAtomicReferenceArrayQueue_initWithInt_(RxInternalUtilAtomicAtomicReferenceArrayQueue *self, jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilAtomicAtomicReferenceArrayQueue)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilAtomicAtomicReferenceArrayQueue")
