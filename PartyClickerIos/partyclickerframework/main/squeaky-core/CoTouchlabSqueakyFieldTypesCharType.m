//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/field/types/CharType.java
//

#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesCharType.h"
#include "CoTouchlabSqueakyFieldTypesCharacterObjectType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"

@interface CoTouchlabSqueakyFieldTypesCharType ()

- (instancetype)init;

@end

inline CoTouchlabSqueakyFieldTypesCharType *CoTouchlabSqueakyFieldTypesCharType_get_singleTon();
static CoTouchlabSqueakyFieldTypesCharType *CoTouchlabSqueakyFieldTypesCharType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesCharType, singleTon, CoTouchlabSqueakyFieldTypesCharType *)

__attribute__((unused)) static void CoTouchlabSqueakyFieldTypesCharType_init(CoTouchlabSqueakyFieldTypesCharType *self);

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesCharType *new_CoTouchlabSqueakyFieldTypesCharType_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesCharType *create_CoTouchlabSqueakyFieldTypesCharType_init();

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesCharType)

@implementation CoTouchlabSqueakyFieldTypesCharType

+ (CoTouchlabSqueakyFieldTypesCharType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesCharType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesCharType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesCharType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)javaObject {
  JavaLangCharacter *character = (JavaLangCharacter *) cast_chk(javaObject, [JavaLangCharacter class]);
  if (character == nil || [character charValue] == 0) {
    return nil;
  }
  else {
    return character;
  }
}

- (jboolean)isPrimitive {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LCoTouchlabSqueakyFieldTypesCharType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getSingleton);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:);
  methods[3].selector = @selector(javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:);
  methods[4].selector = @selector(isPrimitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "singleTon", "LCoTouchlabSqueakyFieldTypesCharType;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldSqlType;[LIOSClass;", "javaToSqlArg", "LCoTouchlabSqueakyFieldFieldType;LNSObject;", &CoTouchlabSqueakyFieldTypesCharType_singleTon };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesCharType = { "CharType", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldTypesCharType;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesCharType class]) {
    JreStrongAssignAndConsume(&CoTouchlabSqueakyFieldTypesCharType_singleTon, new_CoTouchlabSqueakyFieldTypesCharType_init());
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesCharType)
  }
}

@end

CoTouchlabSqueakyFieldTypesCharType *CoTouchlabSqueakyFieldTypesCharType_getSingleton() {
  CoTouchlabSqueakyFieldTypesCharType_initialize();
  return CoTouchlabSqueakyFieldTypesCharType_singleTon;
}

void CoTouchlabSqueakyFieldTypesCharType_init(CoTouchlabSqueakyFieldTypesCharType *self) {
  CoTouchlabSqueakyFieldTypesCharacterObjectType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, CHAR), [IOSObjectArray arrayWithObjects:(id[]){ [IOSClass charClass] } count:1 type:IOSClass_class_()]);
}

CoTouchlabSqueakyFieldTypesCharType *new_CoTouchlabSqueakyFieldTypesCharType_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesCharType, init)
}

CoTouchlabSqueakyFieldTypesCharType *create_CoTouchlabSqueakyFieldTypesCharType_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesCharType, init)
}

void CoTouchlabSqueakyFieldTypesCharType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesCharType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesCharacterObjectType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
}

CoTouchlabSqueakyFieldTypesCharType *new_CoTouchlabSqueakyFieldTypesCharType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesCharType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

CoTouchlabSqueakyFieldTypesCharType *create_CoTouchlabSqueakyFieldTypesCharType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesCharType, initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_, sqlType, classes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesCharType)
