//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorTimeout.h"
#include "RxInternalOperatorsOperatorTimeoutBase.h"
#include "RxObservable.h"
#include "RxScheduler.h"
#include "RxSubscription.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/TimeUnit.h"

@interface RxInternalOperatorsOperatorTimeout_1 : NSObject < RxInternalOperatorsOperatorTimeoutBase_FirstTimeoutStub > {
 @public
  jlong val$timeout_;
  JavaUtilConcurrentTimeUnit *val$timeUnit_;
}

- (instancetype)initWithLong:(jlong)capture$0
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$1;

- (id<RxSubscription>)callWithId:(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *)timeoutSubscriber
                          withId:(JavaLangLong *)seqId
                          withId:(RxScheduler_Worker *)inner;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeout_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeout_1_initWithLong_withJavaUtilConcurrentTimeUnit_(RxInternalOperatorsOperatorTimeout_1 *self, jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeout_1 *new_RxInternalOperatorsOperatorTimeout_1_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeout_1 *create_RxInternalOperatorsOperatorTimeout_1_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1);

@interface RxInternalOperatorsOperatorTimeout_1_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *val$timeoutSubscriber_;
  JavaLangLong *val$seqId_;
}

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber:(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *)capture$0
                                                                withJavaLangLong:(JavaLangLong *)capture$1;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeout_1_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeout_1_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeout_1_1 *self, RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeout_1_1 *new_RxInternalOperatorsOperatorTimeout_1_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeout_1_1 *create_RxInternalOperatorsOperatorTimeout_1_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1);

@interface RxInternalOperatorsOperatorTimeout_2 : NSObject < RxInternalOperatorsOperatorTimeoutBase_TimeoutStub > {
 @public
  jlong val$timeout_;
  JavaUtilConcurrentTimeUnit *val$timeUnit_;
}

- (instancetype)initWithLong:(jlong)capture$0
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$1;

- (id<RxSubscription>)callWithId:(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *)timeoutSubscriber
                          withId:(JavaLangLong *)seqId
                          withId:(id)value
                          withId:(RxScheduler_Worker *)inner;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeout_2)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeout_2_initWithLong_withJavaUtilConcurrentTimeUnit_(RxInternalOperatorsOperatorTimeout_2 *self, jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeout_2 *new_RxInternalOperatorsOperatorTimeout_2_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeout_2 *create_RxInternalOperatorsOperatorTimeout_2_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1);

@interface RxInternalOperatorsOperatorTimeout_2_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *val$timeoutSubscriber_;
  JavaLangLong *val$seqId_;
}

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber:(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *)capture$0
                                                                withJavaLangLong:(JavaLangLong *)capture$1;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeout_2_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeout_2_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeout_2_1 *self, RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeout_2_1 *new_RxInternalOperatorsOperatorTimeout_2_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeout_2_1 *create_RxInternalOperatorsOperatorTimeout_2_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1);

@implementation RxInternalOperatorsOperatorTimeout

- (instancetype)initWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
            withRxObservable:(RxObservable *)other
             withRxScheduler:(RxScheduler *)scheduler {
  RxInternalOperatorsOperatorTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_(self, timeout, timeUnit, other, scheduler);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withJavaUtilConcurrentTimeUnit:withRxObservable:withRxScheduler:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "JLJavaUtilConcurrentTimeUnit;LRxObservable;LRxScheduler;", "(JLjava/util/concurrent/TimeUnit;Lrx/Observable<+TT;>;Lrx/Scheduler;)V", "<T:Ljava/lang/Object;>Lrx/internal/operators/OperatorTimeoutBase<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeout = { "OperatorTimeout", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, -1, -1, 2, -1 };
  return &_RxInternalOperatorsOperatorTimeout;
}

@end

void RxInternalOperatorsOperatorTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_(RxInternalOperatorsOperatorTimeout *self, jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit, RxObservable *other, RxScheduler *scheduler) {
  RxInternalOperatorsOperatorTimeoutBase_initWithRxInternalOperatorsOperatorTimeoutBase_FirstTimeoutStub_withRxInternalOperatorsOperatorTimeoutBase_TimeoutStub_withRxObservable_withRxScheduler_(self, create_RxInternalOperatorsOperatorTimeout_1_initWithLong_withJavaUtilConcurrentTimeUnit_(timeout, timeUnit), create_RxInternalOperatorsOperatorTimeout_2_initWithLong_withJavaUtilConcurrentTimeUnit_(timeout, timeUnit), other, scheduler);
}

RxInternalOperatorsOperatorTimeout *new_RxInternalOperatorsOperatorTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_(jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit, RxObservable *other, RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeout, initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_, timeout, timeUnit, other, scheduler)
}

RxInternalOperatorsOperatorTimeout *create_RxInternalOperatorsOperatorTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_(jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit, RxObservable *other, RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeout, initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_, timeout, timeUnit, other, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTimeout)

@implementation RxInternalOperatorsOperatorTimeout_1

- (instancetype)initWithLong:(jlong)capture$0
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$1 {
  RxInternalOperatorsOperatorTimeout_1_initWithLong_withJavaUtilConcurrentTimeUnit_(self, capture$0, capture$1);
  return self;
}

- (id<RxSubscription>)callWithId:(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *)timeoutSubscriber
                          withId:(JavaLangLong *)seqId
                          withId:(RxScheduler_Worker *)inner {
  return [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorTimeout_1_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(timeoutSubscriber, seqId) withLong:val$timeout_ withJavaUtilConcurrentTimeUnit:val$timeUnit_];
}

- (void)dealloc {
  RELEASE_(val$timeUnit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(callWithId:withId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeUnit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber;LJavaLangLong;LRxScheduler_Worker;", "(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber<TT;>;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;", "LRxInternalOperatorsOperatorTimeout;", "initWithLong:withJavaUtilConcurrentTimeUnit:withRxObservable:withRxScheduler:", "Ljava/lang/Object;Lrx/internal/operators/OperatorTimeoutBase$FirstTimeoutStub<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeout_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeout_1;
}

@end

void RxInternalOperatorsOperatorTimeout_1_initWithLong_withJavaUtilConcurrentTimeUnit_(RxInternalOperatorsOperatorTimeout_1 *self, jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1) {
  self->val$timeout_ = capture$0;
  JreStrongAssign(&self->val$timeUnit_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeout_1 *new_RxInternalOperatorsOperatorTimeout_1_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeout_1, initWithLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1)
}

RxInternalOperatorsOperatorTimeout_1 *create_RxInternalOperatorsOperatorTimeout_1_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeout_1, initWithLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorTimeout_1_1

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber:(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *)capture$0
                                                                withJavaLangLong:(JavaLangLong *)capture$1 {
  RxInternalOperatorsOperatorTimeout_1_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(self, capture$0, capture$1);
  return self;
}

- (void)call {
  [((RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *) nil_chk(val$timeoutSubscriber_)) onTimeoutWithLong:[((JavaLangLong *) nil_chk(val$seqId_)) longLongValue]];
}

- (void)dealloc {
  RELEASE_(val$timeoutSubscriber_);
  RELEASE_(val$seqId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber:withJavaLangLong:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeoutSubscriber_", "LRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$seqId_", "LJavaLangLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber<TT;>;", "LRxInternalOperatorsOperatorTimeout_1;", "callWithId:withId:withId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeout_1_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorTimeout_1_1;
}

@end

void RxInternalOperatorsOperatorTimeout_1_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeout_1_1 *self, RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1) {
  JreStrongAssign(&self->val$timeoutSubscriber_, capture$0);
  JreStrongAssign(&self->val$seqId_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeout_1_1 *new_RxInternalOperatorsOperatorTimeout_1_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeout_1_1, initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_, capture$0, capture$1)
}

RxInternalOperatorsOperatorTimeout_1_1 *create_RxInternalOperatorsOperatorTimeout_1_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeout_1_1, initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorTimeout_2

- (instancetype)initWithLong:(jlong)capture$0
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$1 {
  RxInternalOperatorsOperatorTimeout_2_initWithLong_withJavaUtilConcurrentTimeUnit_(self, capture$0, capture$1);
  return self;
}

- (id<RxSubscription>)callWithId:(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *)timeoutSubscriber
                          withId:(JavaLangLong *)seqId
                          withId:(id)value
                          withId:(RxScheduler_Worker *)inner {
  return [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorTimeout_2_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(timeoutSubscriber, seqId) withLong:val$timeout_ withJavaUtilConcurrentTimeUnit:val$timeUnit_];
}

- (void)dealloc {
  RELEASE_(val$timeUnit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(callWithId:withId:withId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeUnit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber;LJavaLangLong;LNSObject;LRxScheduler_Worker;", "(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber<TT;>;Ljava/lang/Long;TT;Lrx/Scheduler$Worker;)Lrx/Subscription;", "LRxInternalOperatorsOperatorTimeout;", "initWithLong:withJavaUtilConcurrentTimeUnit:withRxObservable:withRxScheduler:", "Ljava/lang/Object;Lrx/internal/operators/OperatorTimeoutBase$TimeoutStub<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeout_2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeout_2;
}

@end

void RxInternalOperatorsOperatorTimeout_2_initWithLong_withJavaUtilConcurrentTimeUnit_(RxInternalOperatorsOperatorTimeout_2 *self, jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1) {
  self->val$timeout_ = capture$0;
  JreStrongAssign(&self->val$timeUnit_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeout_2 *new_RxInternalOperatorsOperatorTimeout_2_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeout_2, initWithLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1)
}

RxInternalOperatorsOperatorTimeout_2 *create_RxInternalOperatorsOperatorTimeout_2_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, JavaUtilConcurrentTimeUnit *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeout_2, initWithLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorTimeout_2_1

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber:(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *)capture$0
                                                                withJavaLangLong:(JavaLangLong *)capture$1 {
  RxInternalOperatorsOperatorTimeout_2_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(self, capture$0, capture$1);
  return self;
}

- (void)call {
  [((RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *) nil_chk(val$timeoutSubscriber_)) onTimeoutWithLong:[((JavaLangLong *) nil_chk(val$seqId_)) longLongValue]];
}

- (void)dealloc {
  RELEASE_(val$timeoutSubscriber_);
  RELEASE_(val$seqId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber:withJavaLangLong:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeoutSubscriber_", "LRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$seqId_", "LJavaLangLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber<TT;>;", "LRxInternalOperatorsOperatorTimeout_2;", "callWithId:withId:withId:withId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeout_2_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorTimeout_2_1;
}

@end

void RxInternalOperatorsOperatorTimeout_2_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeout_2_1 *self, RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1) {
  JreStrongAssign(&self->val$timeoutSubscriber_, capture$0);
  JreStrongAssign(&self->val$seqId_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeout_2_1 *new_RxInternalOperatorsOperatorTimeout_2_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeout_2_1, initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_, capture$0, capture$1)
}

RxInternalOperatorsOperatorTimeout_2_1 *create_RxInternalOperatorsOperatorTimeout_2_1_initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_(RxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber *capture$0, JavaLangLong *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeout_2_1, initWithRxInternalOperatorsOperatorTimeoutBase_TimeoutSubscriber_withJavaLangLong_, capture$0, capture$1)
}
