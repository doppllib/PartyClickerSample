//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "CoTouchlabSqueakyDaoSqueakyContext.h"
#include "CoTouchlabSqueakyFieldFieldType.h"
#include "CoTouchlabSqueakySqlSqlHelper.h"
#include "CoTouchlabSqueakyStmtJoinAlias.h"
#include "CoTouchlabSqueakyStmtQueryBaseComparison.h"
#include "CoTouchlabSqueakyStmtQueryBetween.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/List.h"

@interface CoTouchlabSqueakyStmtQueryBetween () {
 @public
  id low_;
  id high_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyStmtQueryBetween, low_, id)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyStmtQueryBetween, high_, id)

@implementation CoTouchlabSqueakyStmtQueryBetween

- (instancetype)initWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                                 withId:(id)low
                                                 withId:(id)high
                     withCoTouchlabSqueakyStmtJoinAlias:(CoTouchlabSqueakyStmtJoinAlias *)joinAlias {
  CoTouchlabSqueakyStmtQueryBetween_initWithCoTouchlabSqueakyFieldFieldType_withId_withId_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, low, high, joinAlias);
  return self;
}

- (NSString *)getOperation {
  return @"BETWEEN ? AND ?";
}

- (void)appendValueWithCoTouchlabSqueakyDaoSqueakyContext:(CoTouchlabSqueakyDaoSqueakyContext *)squeakyContext
                                         withJavaUtilList:(id<JavaUtilList>)params {
  if (low_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"BETWEEN low value for '", [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType_)) getColumnName], @"' is null"));
  }
  if (high_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"BETWEEN high value for '", [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType_)) getColumnName], @"' is null"));
  }
  CoTouchlabSqueakySqlSqlHelper_appendArgOrValueWithCoTouchlabSqueakyDaoSqueakyContext_withCoTouchlabSqueakyFieldFieldType_withJavaUtilList_withId_(squeakyContext, fieldType_, params, low_);
  CoTouchlabSqueakySqlSqlHelper_appendArgOrValueWithCoTouchlabSqueakyDaoSqueakyContext_withCoTouchlabSqueakyFieldFieldType_withJavaUtilList_withId_(squeakyContext, fieldType_, params, high_);
}

- (void)dealloc {
  RELEASE_(low_);
  RELEASE_(high_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCoTouchlabSqueakyFieldFieldType:withId:withId:withCoTouchlabSqueakyStmtJoinAlias:);
  methods[1].selector = @selector(getOperation);
  methods[2].selector = @selector(appendValueWithCoTouchlabSqueakyDaoSqueakyContext:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "low_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "high_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabSqueakyFieldFieldType;LNSObject;LNSObject;LCoTouchlabSqueakyStmtJoinAlias;", "LJavaSqlSQLException;", "appendValue", "LCoTouchlabSqueakyDaoSqueakyContext;LJavaUtilList;", "(Lco/touchlab/squeaky/dao/SqueakyContext;Ljava/util/List<Ljava/lang/String;>;)V" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyStmtQueryBetween = { "Between", "co.touchlab.squeaky.stmt.query", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyStmtQueryBetween;
}

@end

void CoTouchlabSqueakyStmtQueryBetween_initWithCoTouchlabSqueakyFieldFieldType_withId_withId_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyStmtQueryBetween *self, CoTouchlabSqueakyFieldFieldType *fieldType, id low, id high, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  CoTouchlabSqueakyStmtQueryBaseComparison_initWithCoTouchlabSqueakyFieldFieldType_withId_withBoolean_withCoTouchlabSqueakyStmtJoinAlias_(self, fieldType, nil, true, joinAlias);
  JreStrongAssign(&self->low_, low);
  JreStrongAssign(&self->high_, high);
}

CoTouchlabSqueakyStmtQueryBetween *new_CoTouchlabSqueakyStmtQueryBetween_initWithCoTouchlabSqueakyFieldFieldType_withId_withId_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, id low, id high, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyStmtQueryBetween, initWithCoTouchlabSqueakyFieldFieldType_withId_withId_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, low, high, joinAlias)
}

CoTouchlabSqueakyStmtQueryBetween *create_CoTouchlabSqueakyStmtQueryBetween_initWithCoTouchlabSqueakyFieldFieldType_withId_withId_withCoTouchlabSqueakyStmtJoinAlias_(CoTouchlabSqueakyFieldFieldType *fieldType, id low, id high, CoTouchlabSqueakyStmtJoinAlias *joinAlias) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyStmtQueryBetween, initWithCoTouchlabSqueakyFieldFieldType_withId_withId_withCoTouchlabSqueakyStmtJoinAlias_, fieldType, low, high, joinAlias)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyStmtQueryBetween)
