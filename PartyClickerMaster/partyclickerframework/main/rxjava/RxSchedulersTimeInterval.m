//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "RxSchedulersTimeInterval.h"

@interface RxSchedulersTimeInterval () {
 @public
  jlong intervalInMilliseconds_;
  id value_;
}

@end

J2OBJC_FIELD_SETTER(RxSchedulersTimeInterval, value_, id)

@implementation RxSchedulersTimeInterval

- (instancetype)initWithLong:(jlong)intervalInMilliseconds
                      withId:(id)value {
  RxSchedulersTimeInterval_initWithLong_withId_(self, intervalInMilliseconds, value);
  return self;
}

- (jlong)getIntervalInMilliseconds {
  return intervalInMilliseconds_;
}

- (id)getValue {
  return value_;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + (jint) (intervalInMilliseconds_ ^ (JreURShift64(intervalInMilliseconds_, 32)));
  result = prime * result + ((value_ == nil) ? 0 : ((jint) [nil_chk(value_) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  RxSchedulersTimeInterval *other = (RxSchedulersTimeInterval *) cast_chk(obj, [RxSchedulersTimeInterval class]);
  if (intervalInMilliseconds_ != other->intervalInMilliseconds_) {
    return false;
  }
  if (value_ == nil) {
    if (other->value_ != nil) {
      return false;
    }
  }
  else if (![value_ isEqual:other->value_]) {
    return false;
  }
  return true;
}

- (NSString *)description {
  return JreStrcat("$J$@C", @"TimeInterval [intervalInMilliseconds=", intervalInMilliseconds_, @", value=", value_, ']');
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withId:);
  methods[1].selector = @selector(getIntervalInMilliseconds);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "intervalInMilliseconds_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "JLNSObject;", "(JTT;)V", "()TT;", "hashCode", "equals", "LNSObject;", "toString", "TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RxSchedulersTimeInterval = { "TimeInterval", "rx.schedulers", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, 8, -1 };
  return &_RxSchedulersTimeInterval;
}

@end

void RxSchedulersTimeInterval_initWithLong_withId_(RxSchedulersTimeInterval *self, jlong intervalInMilliseconds, id value) {
  NSObject_init(self);
  JreStrongAssign(&self->value_, value);
  self->intervalInMilliseconds_ = intervalInMilliseconds;
}

RxSchedulersTimeInterval *new_RxSchedulersTimeInterval_initWithLong_withId_(jlong intervalInMilliseconds, id value) {
  J2OBJC_NEW_IMPL(RxSchedulersTimeInterval, initWithLong_withId_, intervalInMilliseconds, value)
}

RxSchedulersTimeInterval *create_RxSchedulersTimeInterval_initWithLong_withId_(jlong intervalInMilliseconds, id value) {
  J2OBJC_CREATE_IMPL(RxSchedulersTimeInterval, initWithLong_withId_, intervalInMilliseconds, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTimeInterval)
