//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/core/src/main/java/co/touchlab/squeaky/misc/SqlExceptionUtil.java
//

#include "CoTouchlabSqueakyMiscSqlExceptionUtil.h"
#include "J2ObjC_source.h"
#include "java/sql/SQLException.h"

@interface CoTouchlabSqueakyMiscSqlExceptionUtil ()

- (instancetype)init;

@end

__attribute__((unused)) static void CoTouchlabSqueakyMiscSqlExceptionUtil_init(CoTouchlabSqueakyMiscSqlExceptionUtil *self);

__attribute__((unused)) static CoTouchlabSqueakyMiscSqlExceptionUtil *new_CoTouchlabSqueakyMiscSqlExceptionUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyMiscSqlExceptionUtil *create_CoTouchlabSqueakyMiscSqlExceptionUtil_init();

@implementation CoTouchlabSqueakyMiscSqlExceptionUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyMiscSqlExceptionUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaSqlSQLException *)createWithNSString:(NSString *)message
                            withNSException:(NSException *)cause {
  return CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(message, cause);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSqlSQLException;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithNSString:withNSException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LNSString;LNSException;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyMiscSqlExceptionUtil = { "SqlExceptionUtil", "co.touchlab.squeaky.misc", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyMiscSqlExceptionUtil;
}

@end

void CoTouchlabSqueakyMiscSqlExceptionUtil_init(CoTouchlabSqueakyMiscSqlExceptionUtil *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyMiscSqlExceptionUtil *new_CoTouchlabSqueakyMiscSqlExceptionUtil_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyMiscSqlExceptionUtil, init)
}

CoTouchlabSqueakyMiscSqlExceptionUtil *create_CoTouchlabSqueakyMiscSqlExceptionUtil_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyMiscSqlExceptionUtil, init)
}

JavaSqlSQLException *CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(NSString *message, NSException *cause) {
  CoTouchlabSqueakyMiscSqlExceptionUtil_initialize();
  JavaSqlSQLException *sqlException;
  if ([cause isKindOfClass:[JavaSqlSQLException class]]) {
    sqlException = create_JavaSqlSQLException_initWithNSString_withNSString_(message, [((JavaSqlSQLException *) nil_chk(((JavaSqlSQLException *) cast_chk(cause, [JavaSqlSQLException class])))) getSQLState]);
  }
  else {
    sqlException = create_JavaSqlSQLException_initWithNSString_(message);
  }
  [sqlException initCauseWithNSException:cause];
  return sqlException;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyMiscSqlExceptionUtil)
