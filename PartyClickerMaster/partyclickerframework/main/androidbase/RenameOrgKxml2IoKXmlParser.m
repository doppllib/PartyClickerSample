//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbase/src/main/java/rename/org/kxml2/io/KXmlParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RenameLibcoreInternalStringPool.h"
#include "RenameOrgKxml2IoKXmlParser.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface RenameOrgKxml2IoKXmlParser () {
 @public
  NSString *location_;
  NSString *version__;
  JavaLangBoolean *standalone_;
  NSString *rootElementName_;
  NSString *systemId_;
  NSString *publicId_;
  jboolean processDocDecl_;
  jboolean processNsp_;
  jboolean relaxed_;
  jboolean keepNamespaceAttributes_;
  JavaLangStringBuilder *bufferCapture_;
  id<JavaUtilMap> documentEntities_;
  id<JavaUtilMap> defaultAttributes_;
  jint depth_;
  IOSObjectArray *elementStack_;
  IOSObjectArray *nspStack_;
  IOSIntArray *nspCounts_;
  JavaIoReader *reader_;
  NSString *encoding_;
  RenameOrgKxml2IoKXmlParser_ContentSource *nextContentSource_;
  IOSCharArray *buffer_;
  jint position_;
  jint limit_;
  jint bufferStartLine_;
  jint bufferStartColumn_;
  jint type_;
  jboolean isWhitespace_;
  NSString *namespace__;
  NSString *prefix_;
  NSString *name_;
  NSString *text_;
  jboolean degenerated_;
  jint attributeCount_;
  IOSObjectArray *attributes_;
  NSString *error_;
  jboolean unresolved_;
}

- (jboolean)adjustNsp;

- (IOSObjectArray *)ensureCapacityWithNSStringArray:(IOSObjectArray *)arr
                                            withInt:(jint)required;

- (void)checkRelaxedWithNSString:(NSString *)errorMessage;

- (jint)nextWithBoolean:(jboolean)justOneToken;

- (NSString *)readUntilWithCharArray:(IOSCharArray *)delimiter
                         withBoolean:(jboolean)returnText;

- (void)readXmlDeclaration;

- (NSString *)readCommentWithBoolean:(jboolean)returnText;

- (void)readDoctypeWithBoolean:(jboolean)saveDtdText;

- (jboolean)readExternalIdWithBoolean:(jboolean)requireSystemName
                          withBoolean:(jboolean)assignFields;

- (NSString *)readQuotedIdWithBoolean:(jboolean)returnText;

- (void)readInternalSubset;

- (void)readElementDeclaration;

- (void)readContentSpec;

- (void)readAttributeListDeclaration;

- (void)defineAttributeDefaultWithNSString:(NSString *)elementName
                              withNSString:(NSString *)attributeName
                              withNSString:(NSString *)value;

- (void)readEntityDeclaration;

- (void)readNotationDeclaration;

- (void)readEndTag;

- (jint)peekTypeWithBoolean:(jboolean)inDeclaration;

- (void)parseStartTagWithBoolean:(jboolean)xmldecl
                     withBoolean:(jboolean)throwOnResolveFailure;

- (void)readEntityWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                withBoolean:(jboolean)isEntityToken
                                withBoolean:(jboolean)throwOnResolveFailure
withRenameOrgKxml2IoKXmlParser_ValueContext:(RenameOrgKxml2IoKXmlParser_ValueContext *)valueContext;

- (NSString *)readValueWithChar:(jchar)delimiter
                    withBoolean:(jboolean)resolveEntities
                    withBoolean:(jboolean)throwOnResolveFailure
withRenameOrgKxml2IoKXmlParser_ValueContext:(RenameOrgKxml2IoKXmlParser_ValueContext *)valueContext;

- (void)readWithChar:(jchar)expected;

- (void)readWithCharArray:(IOSCharArray *)chars;

- (jint)peekCharacter;

- (jboolean)fillBufferWithInt:(jint)minimum;

- (NSString *)readName;

- (void)skip;

- (void)pushContentSourceWithCharArray:(IOSCharArray *)newBuffer;

- (void)popContentSource;

@end

J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, location_, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, version__, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, standalone_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, rootElementName_, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, systemId_, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, publicId_, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, bufferCapture_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, documentEntities_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, defaultAttributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, elementStack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, nspStack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, nspCounts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, reader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, encoding_, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, nextContentSource_, RenameOrgKxml2IoKXmlParser_ContentSource *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, buffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, namespace__, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, prefix_, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, name_, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, text_, NSString *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, attributes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser, error_, NSString *)

inline NSString *RenameOrgKxml2IoKXmlParser_get_PROPERTY_XMLDECL_VERSION();
static NSString *RenameOrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION = @"http://xmlpull.org/v1/doc/properties.html#xmldecl-version";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, PROPERTY_XMLDECL_VERSION, NSString *)

inline NSString *RenameOrgKxml2IoKXmlParser_get_PROPERTY_XMLDECL_STANDALONE();
static NSString *RenameOrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE = @"http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, PROPERTY_XMLDECL_STANDALONE, NSString *)

inline NSString *RenameOrgKxml2IoKXmlParser_get_PROPERTY_LOCATION();
static NSString *RenameOrgKxml2IoKXmlParser_PROPERTY_LOCATION = @"http://xmlpull.org/v1/doc/properties.html#location";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, PROPERTY_LOCATION, NSString *)

inline NSString *RenameOrgKxml2IoKXmlParser_get_FEATURE_RELAXED();
static NSString *RenameOrgKxml2IoKXmlParser_FEATURE_RELAXED = @"http://xmlpull.org/v1/doc/features.html#relaxed";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, FEATURE_RELAXED, NSString *)

inline id<JavaUtilMap> RenameOrgKxml2IoKXmlParser_get_DEFAULT_ENTITIES();
static id<JavaUtilMap> RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, DEFAULT_ENTITIES, id<JavaUtilMap>)

inline jint RenameOrgKxml2IoKXmlParser_get_ELEMENTDECL();
#define RenameOrgKxml2IoKXmlParser_ELEMENTDECL 11
J2OBJC_STATIC_FIELD_CONSTANT(RenameOrgKxml2IoKXmlParser, ELEMENTDECL, jint)

inline jint RenameOrgKxml2IoKXmlParser_get_ENTITYDECL();
#define RenameOrgKxml2IoKXmlParser_ENTITYDECL 12
J2OBJC_STATIC_FIELD_CONSTANT(RenameOrgKxml2IoKXmlParser, ENTITYDECL, jint)

inline jint RenameOrgKxml2IoKXmlParser_get_ATTLISTDECL();
#define RenameOrgKxml2IoKXmlParser_ATTLISTDECL 13
J2OBJC_STATIC_FIELD_CONSTANT(RenameOrgKxml2IoKXmlParser, ATTLISTDECL, jint)

inline jint RenameOrgKxml2IoKXmlParser_get_NOTATIONDECL();
#define RenameOrgKxml2IoKXmlParser_NOTATIONDECL 14
J2OBJC_STATIC_FIELD_CONSTANT(RenameOrgKxml2IoKXmlParser, NOTATIONDECL, jint)

inline jint RenameOrgKxml2IoKXmlParser_get_PARAMETER_ENTITY_REF();
#define RenameOrgKxml2IoKXmlParser_PARAMETER_ENTITY_REF 15
J2OBJC_STATIC_FIELD_CONSTANT(RenameOrgKxml2IoKXmlParser, PARAMETER_ENTITY_REF, jint)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_START_COMMENT();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_START_COMMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, START_COMMENT, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_END_COMMENT();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_END_COMMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, END_COMMENT, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_COMMENT_DOUBLE_DASH();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, COMMENT_DOUBLE_DASH, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_START_CDATA();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_START_CDATA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, START_CDATA, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_END_CDATA();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_END_CDATA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, END_CDATA, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_START_PROCESSING_INSTRUCTION();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, START_PROCESSING_INSTRUCTION, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_END_PROCESSING_INSTRUCTION();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, END_PROCESSING_INSTRUCTION, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_START_DOCTYPE();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_START_DOCTYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, START_DOCTYPE, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_SYSTEM();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_SYSTEM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, SYSTEM, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_PUBLIC();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_PUBLIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, PUBLIC, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_START_ELEMENT();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_START_ELEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, START_ELEMENT, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_START_ATTLIST();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_START_ATTLIST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, START_ATTLIST, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_START_ENTITY();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_START_ENTITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, START_ENTITY, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_START_NOTATION();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_START_NOTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, START_NOTATION, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_EMPTY();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, EMPTY, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_ANY();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_ANY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, ANY, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_NDATA();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_NDATA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, NDATA, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_NOTATION();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_NOTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, NOTATION, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_REQUIRED();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_REQUIRED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, REQUIRED, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_IMPLIED();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_IMPLIED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, IMPLIED, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_FIXED();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_FIXED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, FIXED, IOSCharArray *)

inline NSString *RenameOrgKxml2IoKXmlParser_get_UNEXPECTED_EOF();
static NSString *RenameOrgKxml2IoKXmlParser_UNEXPECTED_EOF = @"Unexpected EOF";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, UNEXPECTED_EOF, NSString *)

inline NSString *RenameOrgKxml2IoKXmlParser_get_ILLEGAL_TYPE();
static NSString *RenameOrgKxml2IoKXmlParser_ILLEGAL_TYPE = @"Wrong event type";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, ILLEGAL_TYPE, NSString *)

inline jint RenameOrgKxml2IoKXmlParser_get_XML_DECLARATION();
#define RenameOrgKxml2IoKXmlParser_XML_DECLARATION 998
J2OBJC_STATIC_FIELD_CONSTANT(RenameOrgKxml2IoKXmlParser, XML_DECLARATION, jint)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_SINGLE_QUOTE();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_SINGLE_QUOTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, SINGLE_QUOTE, IOSCharArray *)

inline IOSCharArray *RenameOrgKxml2IoKXmlParser_get_DOUBLE_QUOTE();
static IOSCharArray *RenameOrgKxml2IoKXmlParser_DOUBLE_QUOTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RenameOrgKxml2IoKXmlParser, DOUBLE_QUOTE, IOSCharArray *)

__attribute__((unused)) static jboolean RenameOrgKxml2IoKXmlParser_adjustNsp(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static IOSObjectArray *RenameOrgKxml2IoKXmlParser_ensureCapacityWithNSStringArray_withInt_(RenameOrgKxml2IoKXmlParser *self, IOSObjectArray *arr, jint required);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(RenameOrgKxml2IoKXmlParser *self, NSString *errorMessage);

__attribute__((unused)) static jint RenameOrgKxml2IoKXmlParser_nextWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean justOneToken);

__attribute__((unused)) static NSString *RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(RenameOrgKxml2IoKXmlParser *self, IOSCharArray *delimiter, jboolean returnText);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readXmlDeclaration(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static NSString *RenameOrgKxml2IoKXmlParser_readCommentWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean returnText);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readDoctypeWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean saveDtdText);

__attribute__((unused)) static jboolean RenameOrgKxml2IoKXmlParser_readExternalIdWithBoolean_withBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean requireSystemName, jboolean assignFields);

__attribute__((unused)) static NSString *RenameOrgKxml2IoKXmlParser_readQuotedIdWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean returnText);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readInternalSubset(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readElementDeclaration(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readContentSpec(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readAttributeListDeclaration(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_defineAttributeDefaultWithNSString_withNSString_withNSString_(RenameOrgKxml2IoKXmlParser *self, NSString *elementName, NSString *attributeName, NSString *value);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readEntityDeclaration(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readNotationDeclaration(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readEndTag(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static jint RenameOrgKxml2IoKXmlParser_peekTypeWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean inDeclaration);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_parseStartTagWithBoolean_withBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean xmldecl, jboolean throwOnResolveFailure);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readEntityWithJavaLangStringBuilder_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(RenameOrgKxml2IoKXmlParser *self, JavaLangStringBuilder *outArg, jboolean isEntityToken, jboolean throwOnResolveFailure, RenameOrgKxml2IoKXmlParser_ValueContext *valueContext);

__attribute__((unused)) static NSString *RenameOrgKxml2IoKXmlParser_readValueWithChar_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(RenameOrgKxml2IoKXmlParser *self, jchar delimiter, jboolean resolveEntities, jboolean throwOnResolveFailure, RenameOrgKxml2IoKXmlParser_ValueContext *valueContext);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readWithChar_(RenameOrgKxml2IoKXmlParser *self, jchar expected);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_readWithCharArray_(RenameOrgKxml2IoKXmlParser *self, IOSCharArray *chars);

__attribute__((unused)) static jint RenameOrgKxml2IoKXmlParser_peekCharacter(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static jboolean RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(RenameOrgKxml2IoKXmlParser *self, jint minimum);

__attribute__((unused)) static NSString *RenameOrgKxml2IoKXmlParser_readName(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_skip(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_pushContentSourceWithCharArray_(RenameOrgKxml2IoKXmlParser *self, IOSCharArray *newBuffer);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_popContentSource(RenameOrgKxml2IoKXmlParser *self);

__attribute__((unused)) static void RenameOrgKxml2IoKXmlParser_ValueContext_initWithNSString_withInt_(RenameOrgKxml2IoKXmlParser_ValueContext *self, NSString *__name, jint __ordinal);

@interface RenameOrgKxml2IoKXmlParser_ContentSource () {
 @public
  RenameOrgKxml2IoKXmlParser_ContentSource *next_;
  IOSCharArray *buffer_;
  jint position_;
  jint limit_;
}

@end

J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser_ContentSource, next_, RenameOrgKxml2IoKXmlParser_ContentSource *)
J2OBJC_FIELD_SETTER(RenameOrgKxml2IoKXmlParser_ContentSource, buffer_, IOSCharArray *)

J2OBJC_INITIALIZED_DEFN(RenameOrgKxml2IoKXmlParser)

@implementation RenameOrgKxml2IoKXmlParser

- (void)keepNamespaceAttributes {
  self->keepNamespaceAttributes_ = true;
}

- (jboolean)adjustNsp {
  return RenameOrgKxml2IoKXmlParser_adjustNsp(self);
}

- (IOSObjectArray *)ensureCapacityWithNSStringArray:(IOSObjectArray *)arr
                                            withInt:(jint)required {
  return RenameOrgKxml2IoKXmlParser_ensureCapacityWithNSStringArray_withInt_(self, arr, required);
}

- (void)checkRelaxedWithNSString:(NSString *)errorMessage {
  RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, errorMessage);
}

- (jint)next {
  return RenameOrgKxml2IoKXmlParser_nextWithBoolean_(self, false);
}

- (jint)nextToken {
  return RenameOrgKxml2IoKXmlParser_nextWithBoolean_(self, true);
}

- (jint)nextWithBoolean:(jboolean)justOneToken {
  return RenameOrgKxml2IoKXmlParser_nextWithBoolean_(self, justOneToken);
}

- (NSString *)readUntilWithCharArray:(IOSCharArray *)delimiter
                         withBoolean:(jboolean)returnText {
  return RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(self, delimiter, returnText);
}

- (void)readXmlDeclaration {
  RenameOrgKxml2IoKXmlParser_readXmlDeclaration(self);
}

- (NSString *)readCommentWithBoolean:(jboolean)returnText {
  return RenameOrgKxml2IoKXmlParser_readCommentWithBoolean_(self, returnText);
}

- (void)readDoctypeWithBoolean:(jboolean)saveDtdText {
  RenameOrgKxml2IoKXmlParser_readDoctypeWithBoolean_(self, saveDtdText);
}

- (jboolean)readExternalIdWithBoolean:(jboolean)requireSystemName
                          withBoolean:(jboolean)assignFields {
  return RenameOrgKxml2IoKXmlParser_readExternalIdWithBoolean_withBoolean_(self, requireSystemName, assignFields);
}

- (NSString *)readQuotedIdWithBoolean:(jboolean)returnText {
  return RenameOrgKxml2IoKXmlParser_readQuotedIdWithBoolean_(self, returnText);
}

- (void)readInternalSubset {
  RenameOrgKxml2IoKXmlParser_readInternalSubset(self);
}

- (void)readElementDeclaration {
  RenameOrgKxml2IoKXmlParser_readElementDeclaration(self);
}

- (void)readContentSpec {
  RenameOrgKxml2IoKXmlParser_readContentSpec(self);
}

- (void)readAttributeListDeclaration {
  RenameOrgKxml2IoKXmlParser_readAttributeListDeclaration(self);
}

- (void)defineAttributeDefaultWithNSString:(NSString *)elementName
                              withNSString:(NSString *)attributeName
                              withNSString:(NSString *)value {
  RenameOrgKxml2IoKXmlParser_defineAttributeDefaultWithNSString_withNSString_withNSString_(self, elementName, attributeName, value);
}

- (void)readEntityDeclaration {
  RenameOrgKxml2IoKXmlParser_readEntityDeclaration(self);
}

- (void)readNotationDeclaration {
  RenameOrgKxml2IoKXmlParser_readNotationDeclaration(self);
}

- (void)readEndTag {
  RenameOrgKxml2IoKXmlParser_readEndTag(self);
}

- (jint)peekTypeWithBoolean:(jboolean)inDeclaration {
  return RenameOrgKxml2IoKXmlParser_peekTypeWithBoolean_(self, inDeclaration);
}

- (void)parseStartTagWithBoolean:(jboolean)xmldecl
                     withBoolean:(jboolean)throwOnResolveFailure {
  RenameOrgKxml2IoKXmlParser_parseStartTagWithBoolean_withBoolean_(self, xmldecl, throwOnResolveFailure);
}

- (void)readEntityWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                withBoolean:(jboolean)isEntityToken
                                withBoolean:(jboolean)throwOnResolveFailure
withRenameOrgKxml2IoKXmlParser_ValueContext:(RenameOrgKxml2IoKXmlParser_ValueContext *)valueContext {
  RenameOrgKxml2IoKXmlParser_readEntityWithJavaLangStringBuilder_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(self, outArg, isEntityToken, throwOnResolveFailure, valueContext);
}

- (NSString *)readValueWithChar:(jchar)delimiter
                    withBoolean:(jboolean)resolveEntities
                    withBoolean:(jboolean)throwOnResolveFailure
withRenameOrgKxml2IoKXmlParser_ValueContext:(RenameOrgKxml2IoKXmlParser_ValueContext *)valueContext {
  return RenameOrgKxml2IoKXmlParser_readValueWithChar_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(self, delimiter, resolveEntities, throwOnResolveFailure, valueContext);
}

- (void)readWithChar:(jchar)expected {
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, expected);
}

- (void)readWithCharArray:(IOSCharArray *)chars {
  RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, chars);
}

- (jint)peekCharacter {
  return RenameOrgKxml2IoKXmlParser_peekCharacter(self);
}

- (jboolean)fillBufferWithInt:(jint)minimum {
  return RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, minimum);
}

- (NSString *)readName {
  return RenameOrgKxml2IoKXmlParser_readName(self);
}

- (void)skip {
  RenameOrgKxml2IoKXmlParser_skip(self);
}

- (void)setInputWithJavaIoReader:(JavaIoReader *)reader {
  JreStrongAssign(&self->reader_, reader);
  type_ = OrgXmlpullV1XmlPullParser_START_DOCUMENT;
  JreStrongAssign(&name_, nil);
  JreStrongAssign(&namespace__, nil);
  degenerated_ = false;
  attributeCount_ = -1;
  JreStrongAssign(&encoding_, nil);
  JreStrongAssign(&version__, nil);
  JreStrongAssign(&standalone_, nil);
  if (reader == nil) {
    return;
  }
  position_ = 0;
  limit_ = 0;
  bufferStartLine_ = 0;
  bufferStartColumn_ = 0;
  depth_ = 0;
  JreStrongAssign(&documentEntities_, nil);
}

- (void)setInputWithJavaIoInputStream:(JavaIoInputStream *)is
                         withNSString:(NSString *)charset {
  position_ = 0;
  limit_ = 0;
  jboolean detectCharset = charset == nil;
  if (is == nil) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  @try {
    if (detectCharset) {
      jint firstFourBytes = 0;
      while (limit_ < 4) {
        jint i = [is read];
        if (i == -1) {
          break;
        }
        firstFourBytes = (JreLShift32(firstFourBytes, 8)) | i;
        *IOSCharArray_GetRef(nil_chk(buffer_), limit_++) = (jchar) i;
      }
      if (limit_ == 4) {
        switch (firstFourBytes) {
          case (jint) 0x00000FEFF:
          charset = @"UTF-32BE";
          limit_ = 0;
          break;
          case (jint) 0x0FFFE0000:
          charset = @"UTF-32LE";
          limit_ = 0;
          break;
          case (jint) 0x0000003c:
          charset = @"UTF-32BE";
          *IOSCharArray_GetRef(nil_chk(buffer_), 0) = '<';
          limit_ = 1;
          break;
          case (jint) 0x03c000000:
          charset = @"UTF-32LE";
          *IOSCharArray_GetRef(nil_chk(buffer_), 0) = '<';
          limit_ = 1;
          break;
          case (jint) 0x0003c003f:
          charset = @"UTF-16BE";
          *IOSCharArray_GetRef(nil_chk(buffer_), 0) = '<';
          *IOSCharArray_GetRef(buffer_, 1) = '?';
          limit_ = 2;
          break;
          case (jint) 0x03c003f00:
          charset = @"UTF-16LE";
          *IOSCharArray_GetRef(nil_chk(buffer_), 0) = '<';
          *IOSCharArray_GetRef(buffer_, 1) = '?';
          limit_ = 2;
          break;
          case (jint) 0x03c3f786d:
          while (true) {
            jint i = [is read];
            if (i == -1) {
              break;
            }
            *IOSCharArray_GetRef(nil_chk(buffer_), limit_++) = (jchar) i;
            if (i == '>') {
              NSString *s = [NSString stringWithCharacters:buffer_ offset:0 length:limit_];
              jint i0 = [s indexOfString:@"encoding"];
              if (i0 != -1) {
                while ([s charAtWithInt:i0] != '"' && [s charAtWithInt:i0] != '\'') {
                  i0++;
                }
                jchar deli = [s charAtWithInt:i0++];
                jint i1 = [s indexOf:deli fromIndex:i0];
                charset = [s substring:i0 endIndex:i1];
              }
              break;
            }
          }
          break;
          default:
          if ((firstFourBytes & (jint) 0x0ffff0000) == (jint) 0x0feff0000) {
            charset = @"UTF-16BE";
            *IOSCharArray_GetRef(nil_chk(buffer_), 0) = (jchar) ((JreLShift32(IOSCharArray_Get(buffer_, 2), 8)) | IOSCharArray_Get(buffer_, 3));
            limit_ = 1;
          }
          else if ((firstFourBytes & (jint) 0x0ffff0000) == (jint) 0x0fffe0000) {
            charset = @"UTF-16LE";
            *IOSCharArray_GetRef(nil_chk(buffer_), 0) = (jchar) ((JreLShift32(IOSCharArray_Get(buffer_, 3), 8)) | IOSCharArray_Get(buffer_, 2));
            limit_ = 1;
          }
          else if ((firstFourBytes & (jint) 0x0ffffff00) == (jint) 0x0efbbbf00) {
            charset = @"UTF-8";
            *IOSCharArray_GetRef(nil_chk(buffer_), 0) = IOSCharArray_Get(buffer_, 3);
            limit_ = 1;
          }
        }
      }
    }
    if (charset == nil) {
      charset = @"UTF-8";
    }
    jint savedLimit = limit_;
    [self setInputWithJavaIoReader:create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(is, charset)];
    JreStrongAssign(&encoding_, charset);
    limit_ = savedLimit;
    if (!detectCharset && RenameOrgKxml2IoKXmlParser_peekCharacter(self) == (jint) 0xfeff) {
      limit_--;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, 1, buffer_, 0, limit_);
    }
  }
  @catch (JavaLangException *e) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(JreStrcat("$@", @"Invalid stream or encoding: ", e), self, e);
  }
}

- (void)close {
  if (reader_ != nil) {
    [reader_ close];
  }
}

- (jboolean)getFeatureWithNSString:(NSString *)feature {
  if ([((NSString *) nil_chk(OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_NAMESPACES)) isEqual:feature]) {
    return processNsp_;
  }
  else if ([((NSString *) nil_chk(RenameOrgKxml2IoKXmlParser_FEATURE_RELAXED)) isEqual:feature]) {
    return relaxed_;
  }
  else if ([((NSString *) nil_chk(OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_DOCDECL)) isEqual:feature]) {
    return processDocDecl_;
  }
  else {
    return false;
  }
}

- (NSString *)getInputEncoding {
  return encoding_;
}

- (void)defineEntityReplacementTextWithNSString:(NSString *)entity
                                   withNSString:(NSString *)value {
  if (processDocDecl_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Entity replacement text may not be defined with DOCTYPE processing enabled.");
  }
  if (reader_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Entity replacement text must be defined after setInput()");
  }
  if (documentEntities_ == nil) {
    JreStrongAssignAndConsume(&documentEntities_, new_JavaUtilHashMap_init());
  }
  [documentEntities_ putWithId:entity withId:[((NSString *) nil_chk(value)) toCharArray]];
}

- (id)getPropertyWithNSString:(NSString *)property {
  if ([((NSString *) nil_chk(property)) isEqual:RenameOrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION]) {
    return version__;
  }
  else if ([property isEqual:RenameOrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE]) {
    return standalone_;
  }
  else if ([property isEqual:RenameOrgKxml2IoKXmlParser_PROPERTY_LOCATION]) {
    return location_ != nil ? location_ : [((JavaIoReader *) nil_chk(reader_)) description];
  }
  else {
    return nil;
  }
}

- (NSString *)getRootElementName {
  return rootElementName_;
}

- (NSString *)getSystemId {
  return systemId_;
}

- (NSString *)getPublicId {
  return publicId_;
}

- (jint)getNamespaceCountWithInt:(jint)depth {
  if (depth > self->depth_) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSIntArray_Get(nil_chk(nspCounts_), depth);
}

- (NSString *)getNamespacePrefixWithInt:(jint)pos {
  return IOSObjectArray_Get(nil_chk(nspStack_), pos * 2);
}

- (NSString *)getNamespaceUriWithInt:(jint)pos {
  return IOSObjectArray_Get(nil_chk(nspStack_), (pos * 2) + 1);
}

- (NSString *)getNamespaceWithNSString:(NSString *)prefix {
  if ([@"xml" isEqual:prefix]) {
    return @"http://www.w3.org/XML/1998/namespace";
  }
  if ([@"xmlns" isEqual:prefix]) {
    return @"http://www.w3.org/2000/xmlns/";
  }
  for (jint i = (JreLShift32([self getNamespaceCountWithInt:depth_], 1)) - 2; i >= 0; i -= 2) {
    if (prefix == nil) {
      if (IOSObjectArray_Get(nil_chk(nspStack_), i) == nil) {
        return IOSObjectArray_Get(nspStack_, i + 1);
      }
    }
    else if ([prefix isEqual:IOSObjectArray_Get(nil_chk(nspStack_), i)]) {
      return IOSObjectArray_Get(nil_chk(nspStack_), i + 1);
    }
  }
  return nil;
}

- (jint)getDepth {
  return depth_;
}

- (NSString *)getPositionDescription {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithNSString_(type_ < ((IOSObjectArray *) nil_chk(JreLoadStatic(OrgXmlpullV1XmlPullParser, TYPES)))->size_ ? IOSObjectArray_Get(JreLoadStatic(OrgXmlpullV1XmlPullParser, TYPES), type_) : @"unknown");
  [buf appendWithChar:' '];
  if (type_ == OrgXmlpullV1XmlPullParser_START_TAG || type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
    if (degenerated_) {
      [buf appendWithNSString:@"(empty) "];
    }
    [buf appendWithChar:'<'];
    if (type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
      [buf appendWithChar:'/'];
    }
    if (prefix_ != nil) {
      [buf appendWithNSString:JreStrcat("C$C$C", '{', namespace__, '}', prefix_, ':')];
    }
    [buf appendWithNSString:name_];
    jint cnt = attributeCount_ * 4;
    for (jint i = 0; i < cnt; i += 4) {
      [buf appendWithChar:' '];
      if (IOSObjectArray_Get(nil_chk(attributes_), i + 1) != nil) {
        [buf appendWithNSString:JreStrcat("C$C$C", '{', IOSObjectArray_Get(attributes_, i), '}', IOSObjectArray_Get(attributes_, i + 1), ':')];
      }
      [buf appendWithNSString:JreStrcat("$$$C", IOSObjectArray_Get(nil_chk(attributes_), i + 2), @"='", IOSObjectArray_Get(attributes_, i + 3), '\'')];
    }
    [buf appendWithChar:'>'];
  }
  else if (type_ == OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE) {
    ;
  }
  else if (type_ != OrgXmlpullV1XmlPullParser_TEXT) {
    [buf appendWithNSString:[self getText]];
  }
  else if (isWhitespace_) {
    [buf appendWithNSString:@"(whitespace)"];
  }
  else {
    NSString *text = [self getText];
    if (((jint) [((NSString *) nil_chk(text)) length]) > 16) {
      text = JreStrcat("$$", [text substring:0 endIndex:16], @"...");
    }
    [buf appendWithNSString:text];
  }
  [buf appendWithNSString:JreStrcat("CICI", '@', [self getLineNumber], ':', [self getColumnNumber])];
  if (location_ != nil) {
    [buf appendWithNSString:@" in "];
    [buf appendWithNSString:location_];
  }
  else if (reader_ != nil) {
    [buf appendWithNSString:@" in "];
    [buf appendWithNSString:[((JavaIoReader *) nil_chk(reader_)) description]];
  }
  return [buf description];
}

- (jint)getLineNumber {
  jint result = bufferStartLine_;
  for (jint i = 0; i < position_; i++) {
    if (IOSCharArray_Get(nil_chk(buffer_), i) == 0x000a) {
      result++;
    }
  }
  return result + 1;
}

- (jint)getColumnNumber {
  jint result = bufferStartColumn_;
  for (jint i = 0; i < position_; i++) {
    if (IOSCharArray_Get(nil_chk(buffer_), i) == 0x000a) {
      result = 0;
    }
    else {
      result++;
    }
  }
  return result + 1;
}

- (jboolean)isWhitespace {
  if (type_ != OrgXmlpullV1XmlPullParser_TEXT && type_ != OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE && type_ != OrgXmlpullV1XmlPullParser_CDSECT) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(RenameOrgKxml2IoKXmlParser_ILLEGAL_TYPE, self, nil);
  }
  return isWhitespace_;
}

- (NSString *)getText {
  if (type_ < OrgXmlpullV1XmlPullParser_TEXT || (type_ == OrgXmlpullV1XmlPullParser_ENTITY_REF && unresolved_)) {
    return nil;
  }
  else if (text_ == nil) {
    return @"";
  }
  else {
    return text_;
  }
}

- (IOSCharArray *)getTextCharactersWithIntArray:(IOSIntArray *)poslen {
  NSString *text = [self getText];
  if (text == nil) {
    *IOSIntArray_GetRef(nil_chk(poslen), 0) = -1;
    *IOSIntArray_GetRef(poslen, 1) = -1;
    return nil;
  }
  IOSCharArray *result = [text toCharArray];
  *IOSIntArray_GetRef(nil_chk(poslen), 0) = 0;
  *IOSIntArray_GetRef(poslen, 1) = ((IOSCharArray *) nil_chk(result))->size_;
  return result;
}

- (NSString *)getNamespace {
  return namespace__;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getPrefix {
  return prefix_;
}

- (jboolean)isEmptyElementTag {
  if (type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(RenameOrgKxml2IoKXmlParser_ILLEGAL_TYPE, self, nil);
  }
  return degenerated_;
}

- (jint)getAttributeCount {
  return attributeCount_;
}

- (NSString *)getAttributeTypeWithInt:(jint)index {
  return @"CDATA";
}

- (jboolean)isAttributeDefaultWithInt:(jint)index {
  return false;
}

- (NSString *)getAttributeNamespaceWithInt:(jint)index {
  if (index >= attributeCount_) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSObjectArray_Get(nil_chk(attributes_), index * 4);
}

- (NSString *)getAttributeNameWithInt:(jint)index {
  if (index >= attributeCount_) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSObjectArray_Get(nil_chk(attributes_), (index * 4) + 2);
}

- (NSString *)getAttributePrefixWithInt:(jint)index {
  if (index >= attributeCount_) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSObjectArray_Get(nil_chk(attributes_), (index * 4) + 1);
}

- (NSString *)getAttributeValueWithInt:(jint)index {
  if (index >= attributeCount_) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSObjectArray_Get(nil_chk(attributes_), (index * 4) + 3);
}

- (NSString *)getAttributeValueWithNSString:(NSString *)namespace_
                               withNSString:(NSString *)name {
  for (jint i = (attributeCount_ * 4) - 4; i >= 0; i -= 4) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(attributes_), i + 2))) isEqual:name] && (namespace_ == nil || [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(attributes_), i))) isEqual:namespace_])) {
      return IOSObjectArray_Get(nil_chk(attributes_), i + 3);
    }
  }
  return nil;
}

- (jint)getEventType {
  return type_;
}

- (jint)nextTag {
  [self next];
  if (type_ == OrgXmlpullV1XmlPullParser_TEXT && isWhitespace_) {
    [self next];
  }
  if (type_ != OrgXmlpullV1XmlPullParser_END_TAG && type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"unexpected type", self, nil);
  }
  return type_;
}

- (void)requireWithInt:(jint)type
          withNSString:(NSString *)namespace_
          withNSString:(NSString *)name {
  if (type != self->type_ || (namespace_ != nil && ![namespace_ isEqual:[self getNamespace]]) || (name != nil && ![name isEqual:[self getName]])) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(JreStrcat("$$$$C$", @"expected: ", IOSObjectArray_Get(nil_chk(JreLoadStatic(OrgXmlpullV1XmlPullParser, TYPES)), type), @" {", namespace_, '}', name), self, nil);
  }
}

- (NSString *)nextText {
  if (type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"precondition: START_TAG", self, nil);
  }
  [self next];
  NSString *result;
  if (type_ == OrgXmlpullV1XmlPullParser_TEXT) {
    result = [self getText];
    [self next];
  }
  else {
    result = @"";
  }
  if (type_ != OrgXmlpullV1XmlPullParser_END_TAG) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"END_TAG expected", self, nil);
  }
  return result;
}

- (void)setFeatureWithNSString:(NSString *)feature
                   withBoolean:(jboolean)value {
  if ([((NSString *) nil_chk(OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_NAMESPACES)) isEqual:feature]) {
    processNsp_ = value;
  }
  else if ([((NSString *) nil_chk(OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_DOCDECL)) isEqual:feature]) {
    processDocDecl_ = value;
  }
  else if ([((NSString *) nil_chk(RenameOrgKxml2IoKXmlParser_FEATURE_RELAXED)) isEqual:feature]) {
    relaxed_ = value;
  }
  else {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(JreStrcat("$$", @"unsupported feature: ", feature), self, nil);
  }
}

- (void)setPropertyWithNSString:(NSString *)property
                         withId:(id)value {
  if ([((NSString *) nil_chk(property)) isEqual:RenameOrgKxml2IoKXmlParser_PROPERTY_LOCATION]) {
    JreStrongAssign(&location_, NSString_valueOf_(value));
  }
  else {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"unsupported property: ", property));
  }
}

- (void)pushContentSourceWithCharArray:(IOSCharArray *)newBuffer {
  RenameOrgKxml2IoKXmlParser_pushContentSourceWithCharArray_(self, newBuffer);
}

- (void)popContentSource {
  RenameOrgKxml2IoKXmlParser_popContentSource(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RenameOrgKxml2IoKXmlParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(location_);
  RELEASE_(version__);
  RELEASE_(standalone_);
  RELEASE_(rootElementName_);
  RELEASE_(systemId_);
  RELEASE_(publicId_);
  RELEASE_(bufferCapture_);
  RELEASE_(documentEntities_);
  RELEASE_(defaultAttributes_);
  RELEASE_(elementStack_);
  RELEASE_(nspStack_);
  RELEASE_(nspCounts_);
  RELEASE_(reader_);
  RELEASE_(encoding_);
  RELEASE_(nextContentSource_);
  RELEASE_(buffer_);
  RELEASE_(namespace__);
  RELEASE_(prefix_);
  RELEASE_(name_);
  RELEASE_(text_);
  RELEASE_(attributes_);
  RELEASE_(error_);
  RELEASE_(stringPool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 0, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 10, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 11, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 7, 8, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 14, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 15, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "I", 0x2, 18, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 14, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 22, 23, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 26, 8, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x2, 27, 28, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 31, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 32, -1, -1, -1 },
    { NULL, "Z", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, 0, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 37, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 38, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 39, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 40, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 43, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 44, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 45, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 46, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 47, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 48, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 48, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 52, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 54, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(keepNamespaceAttributes);
  methods[1].selector = @selector(adjustNsp);
  methods[2].selector = @selector(ensureCapacityWithNSStringArray:withInt:);
  methods[3].selector = @selector(checkRelaxedWithNSString:);
  methods[4].selector = @selector(next);
  methods[5].selector = @selector(nextToken);
  methods[6].selector = @selector(nextWithBoolean:);
  methods[7].selector = @selector(readUntilWithCharArray:withBoolean:);
  methods[8].selector = @selector(readXmlDeclaration);
  methods[9].selector = @selector(readCommentWithBoolean:);
  methods[10].selector = @selector(readDoctypeWithBoolean:);
  methods[11].selector = @selector(readExternalIdWithBoolean:withBoolean:);
  methods[12].selector = @selector(readQuotedIdWithBoolean:);
  methods[13].selector = @selector(readInternalSubset);
  methods[14].selector = @selector(readElementDeclaration);
  methods[15].selector = @selector(readContentSpec);
  methods[16].selector = @selector(readAttributeListDeclaration);
  methods[17].selector = @selector(defineAttributeDefaultWithNSString:withNSString:withNSString:);
  methods[18].selector = @selector(readEntityDeclaration);
  methods[19].selector = @selector(readNotationDeclaration);
  methods[20].selector = @selector(readEndTag);
  methods[21].selector = @selector(peekTypeWithBoolean:);
  methods[22].selector = @selector(parseStartTagWithBoolean:withBoolean:);
  methods[23].selector = @selector(readEntityWithJavaLangStringBuilder:withBoolean:withBoolean:withRenameOrgKxml2IoKXmlParser_ValueContext:);
  methods[24].selector = @selector(readValueWithChar:withBoolean:withBoolean:withRenameOrgKxml2IoKXmlParser_ValueContext:);
  methods[25].selector = @selector(readWithChar:);
  methods[26].selector = @selector(readWithCharArray:);
  methods[27].selector = @selector(peekCharacter);
  methods[28].selector = @selector(fillBufferWithInt:);
  methods[29].selector = @selector(readName);
  methods[30].selector = @selector(skip);
  methods[31].selector = @selector(setInputWithJavaIoReader:);
  methods[32].selector = @selector(setInputWithJavaIoInputStream:withNSString:);
  methods[33].selector = @selector(close);
  methods[34].selector = @selector(getFeatureWithNSString:);
  methods[35].selector = @selector(getInputEncoding);
  methods[36].selector = @selector(defineEntityReplacementTextWithNSString:withNSString:);
  methods[37].selector = @selector(getPropertyWithNSString:);
  methods[38].selector = @selector(getRootElementName);
  methods[39].selector = @selector(getSystemId);
  methods[40].selector = @selector(getPublicId);
  methods[41].selector = @selector(getNamespaceCountWithInt:);
  methods[42].selector = @selector(getNamespacePrefixWithInt:);
  methods[43].selector = @selector(getNamespaceUriWithInt:);
  methods[44].selector = @selector(getNamespaceWithNSString:);
  methods[45].selector = @selector(getDepth);
  methods[46].selector = @selector(getPositionDescription);
  methods[47].selector = @selector(getLineNumber);
  methods[48].selector = @selector(getColumnNumber);
  methods[49].selector = @selector(isWhitespace);
  methods[50].selector = @selector(getText);
  methods[51].selector = @selector(getTextCharactersWithIntArray:);
  methods[52].selector = @selector(getNamespace);
  methods[53].selector = @selector(getName);
  methods[54].selector = @selector(getPrefix);
  methods[55].selector = @selector(isEmptyElementTag);
  methods[56].selector = @selector(getAttributeCount);
  methods[57].selector = @selector(getAttributeTypeWithInt:);
  methods[58].selector = @selector(isAttributeDefaultWithInt:);
  methods[59].selector = @selector(getAttributeNamespaceWithInt:);
  methods[60].selector = @selector(getAttributeNameWithInt:);
  methods[61].selector = @selector(getAttributePrefixWithInt:);
  methods[62].selector = @selector(getAttributeValueWithInt:);
  methods[63].selector = @selector(getAttributeValueWithNSString:withNSString:);
  methods[64].selector = @selector(getEventType);
  methods[65].selector = @selector(nextTag);
  methods[66].selector = @selector(requireWithInt:withNSString:withNSString:);
  methods[67].selector = @selector(nextText);
  methods[68].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[69].selector = @selector(setPropertyWithNSString:withId:);
  methods[70].selector = @selector(pushContentSourceWithCharArray:);
  methods[71].selector = @selector(popContentSource);
  methods[72].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTY_XMLDECL_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "PROPERTY_XMLDECL_STANDALONE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "PROPERTY_LOCATION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "FEATURE_RELAXED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "DEFAULT_ENTITIES", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 60, 61, -1 },
    { "ELEMENTDECL", "I", .constantValue.asInt = RenameOrgKxml2IoKXmlParser_ELEMENTDECL, 0x1a, -1, -1, -1, -1 },
    { "ENTITYDECL", "I", .constantValue.asInt = RenameOrgKxml2IoKXmlParser_ENTITYDECL, 0x1a, -1, -1, -1, -1 },
    { "ATTLISTDECL", "I", .constantValue.asInt = RenameOrgKxml2IoKXmlParser_ATTLISTDECL, 0x1a, -1, -1, -1, -1 },
    { "NOTATIONDECL", "I", .constantValue.asInt = RenameOrgKxml2IoKXmlParser_NOTATIONDECL, 0x1a, -1, -1, -1, -1 },
    { "PARAMETER_ENTITY_REF", "I", .constantValue.asInt = RenameOrgKxml2IoKXmlParser_PARAMETER_ENTITY_REF, 0x1a, -1, -1, -1, -1 },
    { "START_COMMENT", "[C", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "END_COMMENT", "[C", .constantValue.asLong = 0, 0x1a, -1, 63, -1, -1 },
    { "COMMENT_DOUBLE_DASH", "[C", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "START_CDATA", "[C", .constantValue.asLong = 0, 0x1a, -1, 65, -1, -1 },
    { "END_CDATA", "[C", .constantValue.asLong = 0, 0x1a, -1, 66, -1, -1 },
    { "START_PROCESSING_INSTRUCTION", "[C", .constantValue.asLong = 0, 0x1a, -1, 67, -1, -1 },
    { "END_PROCESSING_INSTRUCTION", "[C", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
    { "START_DOCTYPE", "[C", .constantValue.asLong = 0, 0x1a, -1, 69, -1, -1 },
    { "SYSTEM", "[C", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
    { "PUBLIC", "[C", .constantValue.asLong = 0, 0x1a, -1, 71, -1, -1 },
    { "START_ELEMENT", "[C", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
    { "START_ATTLIST", "[C", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "START_ENTITY", "[C", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "START_NOTATION", "[C", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "EMPTY", "[C", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
    { "ANY", "[C", .constantValue.asLong = 0, 0x1a, -1, 77, -1, -1 },
    { "NDATA", "[C", .constantValue.asLong = 0, 0x1a, -1, 78, -1, -1 },
    { "NOTATION", "[C", .constantValue.asLong = 0, 0x1a, -1, 79, -1, -1 },
    { "REQUIRED", "[C", .constantValue.asLong = 0, 0x1a, -1, 80, -1, -1 },
    { "IMPLIED", "[C", .constantValue.asLong = 0, 0x1a, -1, 81, -1, -1 },
    { "FIXED", "[C", .constantValue.asLong = 0, 0x1a, -1, 82, -1, -1 },
    { "UNEXPECTED_EOF", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 83, -1, -1 },
    { "ILLEGAL_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 84, -1, -1 },
    { "XML_DECLARATION", "I", .constantValue.asInt = RenameOrgKxml2IoKXmlParser_XML_DECLARATION, 0x1a, -1, -1, -1, -1 },
    { "location_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "version__", "LNSString;", .constantValue.asLong = 0, 0x2, 85, -1, -1, -1 },
    { "standalone_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rootElementName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "systemId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "processDocDecl_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "processNsp_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "relaxed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keepNamespaceAttributes_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferCapture_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "documentEntities_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 86, -1 },
    { "defaultAttributes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 87, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elementStack_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nspStack_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nspCounts_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "reader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextContentSource_", "LRenameOrgKxml2IoKXmlParser_ContentSource;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferStartLine_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferStartColumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isWhitespace_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "namespace__", "LNSString;", .constantValue.asLong = 0, 0x2, 88, -1, -1, -1 },
    { "prefix_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "degenerated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributeCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributes_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "error_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unresolved_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stringPool_", "LRenameLibcoreInternalStringPool;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "SINGLE_QUOTE", "[C", .constantValue.asLong = 0, 0x1a, -1, 89, -1, -1 },
    { "DOUBLE_QUOTE", "[C", .constantValue.asLong = 0, 0x1a, -1, 90, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgXmlpullV1XmlPullParserException;", "ensureCapacity", "[LNSString;I", "checkRelaxed", "LNSString;", "LOrgXmlpullV1XmlPullParserException;LJavaIoIOException;", "next", "Z", "LJavaIoIOException;LOrgXmlpullV1XmlPullParserException;", "readUntil", "[CZ", "readComment", "readDoctype", "readExternalId", "ZZ", "readQuotedId", "defineAttributeDefault", "LNSString;LNSString;LNSString;", "peekType", "parseStartTag", "readEntity", "LJavaLangStringBuilder;ZZLRenameOrgKxml2IoKXmlParser_ValueContext;", "readValue", "CZZLRenameOrgKxml2IoKXmlParser_ValueContext;", "read", "C", "[C", "fillBuffer", "I", "setInput", "LJavaIoReader;", "LJavaIoInputStream;LNSString;", "LJavaIoIOException;", "getFeature", "defineEntityReplacementText", "LNSString;LNSString;", "getProperty", "getNamespaceCount", "getNamespacePrefix", "getNamespaceUri", "getNamespace", "getTextCharacters", "[I", "getAttributeType", "isAttributeDefault", "getAttributeNamespace", "getAttributeName", "getAttributePrefix", "getAttributeValue", "require", "ILNSString;LNSString;", "setFeature", "LNSString;Z", "setProperty", "LNSString;LNSObject;", "pushContentSource", &RenameOrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION, &RenameOrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE, &RenameOrgKxml2IoKXmlParser_PROPERTY_LOCATION, &RenameOrgKxml2IoKXmlParser_FEATURE_RELAXED, &RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &RenameOrgKxml2IoKXmlParser_START_COMMENT, &RenameOrgKxml2IoKXmlParser_END_COMMENT, &RenameOrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH, &RenameOrgKxml2IoKXmlParser_START_CDATA, &RenameOrgKxml2IoKXmlParser_END_CDATA, &RenameOrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION, &RenameOrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION, &RenameOrgKxml2IoKXmlParser_START_DOCTYPE, &RenameOrgKxml2IoKXmlParser_SYSTEM, &RenameOrgKxml2IoKXmlParser_PUBLIC, &RenameOrgKxml2IoKXmlParser_START_ELEMENT, &RenameOrgKxml2IoKXmlParser_START_ATTLIST, &RenameOrgKxml2IoKXmlParser_START_ENTITY, &RenameOrgKxml2IoKXmlParser_START_NOTATION, &RenameOrgKxml2IoKXmlParser_EMPTY, &RenameOrgKxml2IoKXmlParser_ANY, &RenameOrgKxml2IoKXmlParser_NDATA, &RenameOrgKxml2IoKXmlParser_NOTATION, &RenameOrgKxml2IoKXmlParser_REQUIRED, &RenameOrgKxml2IoKXmlParser_IMPLIED, &RenameOrgKxml2IoKXmlParser_FIXED, &RenameOrgKxml2IoKXmlParser_UNEXPECTED_EOF, &RenameOrgKxml2IoKXmlParser_ILLEGAL_TYPE, "version", "Ljava/util/Map<Ljava/lang/String;[LC;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;", "namespace", &RenameOrgKxml2IoKXmlParser_SINGLE_QUOTE, &RenameOrgKxml2IoKXmlParser_DOUBLE_QUOTE, "LRenameOrgKxml2IoKXmlParser_ValueContext;LRenameOrgKxml2IoKXmlParser_ContentSource;" };
  static const J2ObjcClassInfo _RenameOrgKxml2IoKXmlParser = { "KXmlParser", "rename.org.kxml2.io", ptrTable, methods, fields, 7, 0x1, 73, 73, -1, 91, -1, -1, -1 };
  return &_RenameOrgKxml2IoKXmlParser;
}

+ (void)initialize {
  if (self == [RenameOrgKxml2IoKXmlParser class]) {
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES, new_JavaUtilHashMap_init());
    {
      [RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES putWithId:@"lt" withId:@"<"];
      [RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES putWithId:@"gt" withId:@">"];
      [RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES putWithId:@"amp" withId:@"&"];
      [RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES putWithId:@"apos" withId:@"'"];
      [RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES putWithId:@"quot" withId:@"\""];
    }
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_START_COMMENT, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '!', '-', '-' } count:4]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_END_COMMENT, [IOSCharArray newArrayWithChars:(jchar[]){ '-', '-', '>' } count:3]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH, [IOSCharArray newArrayWithChars:(jchar[]){ '-', '-' } count:2]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_START_CDATA, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '!', '[', 'C', 'D', 'A', 'T', 'A', '[' } count:9]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_END_CDATA, [IOSCharArray newArrayWithChars:(jchar[]){ ']', ']', '>' } count:3]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '?' } count:2]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION, [IOSCharArray newArrayWithChars:(jchar[]){ '?', '>' } count:2]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_START_DOCTYPE, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '!', 'D', 'O', 'C', 'T', 'Y', 'P', 'E' } count:9]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_SYSTEM, [IOSCharArray newArrayWithChars:(jchar[]){ 'S', 'Y', 'S', 'T', 'E', 'M' } count:6]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_PUBLIC, [IOSCharArray newArrayWithChars:(jchar[]){ 'P', 'U', 'B', 'L', 'I', 'C' } count:6]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_START_ELEMENT, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '!', 'E', 'L', 'E', 'M', 'E', 'N', 'T' } count:9]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_START_ATTLIST, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '!', 'A', 'T', 'T', 'L', 'I', 'S', 'T' } count:9]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_START_ENTITY, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '!', 'E', 'N', 'T', 'I', 'T', 'Y' } count:8]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_START_NOTATION, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '!', 'N', 'O', 'T', 'A', 'T', 'I', 'O', 'N' } count:10]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_EMPTY, [IOSCharArray newArrayWithChars:(jchar[]){ 'E', 'M', 'P', 'T', 'Y' } count:5]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_ANY, [IOSCharArray newArrayWithChars:(jchar[]){ 'A', 'N', 'Y' } count:3]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_NDATA, [IOSCharArray newArrayWithChars:(jchar[]){ 'N', 'D', 'A', 'T', 'A' } count:5]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_NOTATION, [IOSCharArray newArrayWithChars:(jchar[]){ 'N', 'O', 'T', 'A', 'T', 'I', 'O', 'N' } count:8]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_REQUIRED, [IOSCharArray newArrayWithChars:(jchar[]){ 'R', 'E', 'Q', 'U', 'I', 'R', 'E', 'D' } count:8]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_IMPLIED, [IOSCharArray newArrayWithChars:(jchar[]){ 'I', 'M', 'P', 'L', 'I', 'E', 'D' } count:7]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_FIXED, [IOSCharArray newArrayWithChars:(jchar[]){ 'F', 'I', 'X', 'E', 'D' } count:5]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_SINGLE_QUOTE, [IOSCharArray newArrayWithChars:(jchar[]){ '\'' } count:1]);
    JreStrongAssignAndConsume(&RenameOrgKxml2IoKXmlParser_DOUBLE_QUOTE, [IOSCharArray newArrayWithChars:(jchar[]){ '"' } count:1]);
    J2OBJC_SET_INITIALIZED(RenameOrgKxml2IoKXmlParser)
  }
}

@end

jboolean RenameOrgKxml2IoKXmlParser_adjustNsp(RenameOrgKxml2IoKXmlParser *self) {
  jboolean any = false;
  for (jint i = 0; i < JreLShift32(self->attributeCount_, 2); i += 4) {
    NSString *attrName = IOSObjectArray_Get(nil_chk(self->attributes_), i + 2);
    jint cut = [((NSString *) nil_chk(attrName)) indexOf:':'];
    NSString *prefix;
    if (cut != -1) {
      prefix = [attrName substring:0 endIndex:cut];
      attrName = [attrName substring:cut + 1];
    }
    else if ([attrName isEqual:@"xmlns"]) {
      prefix = attrName;
      attrName = nil;
    }
    else {
      continue;
    }
    if (![((NSString *) nil_chk(prefix)) isEqual:@"xmlns"]) {
      any = true;
    }
    else {
      jint j = JreLShift32(((*IOSIntArray_GetRef(nil_chk(self->nspCounts_), self->depth_))++), 1);
      JreStrongAssign(&self->nspStack_, RenameOrgKxml2IoKXmlParser_ensureCapacityWithNSStringArray_withInt_(self, self->nspStack_, j + 2));
      IOSObjectArray_Set(nil_chk(self->nspStack_), j, attrName);
      IOSObjectArray_Set(self->nspStack_, j + 1, IOSObjectArray_Get(nil_chk(self->attributes_), i + 3));
      if (attrName != nil && [((NSString *) nil_chk(IOSObjectArray_Get(self->attributes_, i + 3))) isEmpty]) {
        RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, @"illegal empty namespace");
      }
      if (self->keepNamespaceAttributes_) {
        IOSObjectArray_Set(nil_chk(self->attributes_), i, @"http://www.w3.org/2000/xmlns/");
        any = true;
      }
      else {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->attributes_, i + 4, self->attributes_, i, (JreLShift32((--self->attributeCount_), 2)) - i);
        i -= 4;
      }
    }
  }
  if (any) {
    for (jint i = (JreLShift32(self->attributeCount_, 2)) - 4; i >= 0; i -= 4) {
      NSString *attrName = IOSObjectArray_Get(nil_chk(self->attributes_), i + 2);
      jint cut = [((NSString *) nil_chk(attrName)) indexOf:':'];
      if (cut == 0 && !self->relaxed_) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"illegal attribute name: ", attrName, @" at ", self));
      }
      else if (cut != -1) {
        NSString *attrPrefix = [attrName substring:0 endIndex:cut];
        attrName = [attrName substring:cut + 1];
        NSString *attrNs = [self getNamespaceWithNSString:attrPrefix];
        if (attrNs == nil && !self->relaxed_) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"Undefined Prefix: ", attrPrefix, @" in ", self));
        }
        IOSObjectArray_Set(nil_chk(self->attributes_), i, attrNs);
        IOSObjectArray_Set(self->attributes_, i + 1, attrPrefix);
        IOSObjectArray_Set(self->attributes_, i + 2, attrName);
      }
    }
  }
  jint cut = [((NSString *) nil_chk(self->name_)) indexOf:':'];
  if (cut == 0) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$$", @"illegal tag name: ", self->name_));
  }
  if (cut != -1) {
    JreStrongAssign(&self->prefix_, [((NSString *) nil_chk(self->name_)) substring:0 endIndex:cut]);
    JreStrongAssign(&self->name_, [((NSString *) nil_chk(self->name_)) substring:cut + 1]);
  }
  JreStrongAssign(&self->namespace__, [self getNamespaceWithNSString:self->prefix_]);
  if (self->namespace__ == nil) {
    if (self->prefix_ != nil) {
      RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$$", @"undefined prefix: ", self->prefix_));
    }
    JreStrongAssign(&self->namespace__, OrgXmlpullV1XmlPullParser_NO_NAMESPACE);
  }
  return any;
}

IOSObjectArray *RenameOrgKxml2IoKXmlParser_ensureCapacityWithNSStringArray_withInt_(RenameOrgKxml2IoKXmlParser *self, IOSObjectArray *arr, jint required) {
  if (((IOSObjectArray *) nil_chk(arr))->size_ >= required) {
    return arr;
  }
  IOSObjectArray *bigger = [IOSObjectArray arrayWithLength:required + 16 type:NSString_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, bigger, 0, arr->size_);
  return bigger;
}

void RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(RenameOrgKxml2IoKXmlParser *self, NSString *errorMessage) {
  if (!self->relaxed_) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(errorMessage, self, nil);
  }
  if (self->error_ == nil) {
    JreStrongAssign(&self->error_, JreStrcat("$$", @"Error: ", errorMessage));
  }
}

jint RenameOrgKxml2IoKXmlParser_nextWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean justOneToken) {
  if (self->reader_ == nil) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"setInput() must be called first.", self, nil);
  }
  if (self->type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
    self->depth_--;
  }
  if (self->degenerated_) {
    self->degenerated_ = false;
    self->type_ = OrgXmlpullV1XmlPullParser_END_TAG;
    return self->type_;
  }
  if (self->error_ != nil) {
    if (justOneToken) {
      JreStrongAssign(&self->text_, self->error_);
      self->type_ = OrgXmlpullV1XmlPullParser_COMMENT;
      JreStrongAssign(&self->error_, nil);
      return self->type_;
    }
    else {
      JreStrongAssign(&self->error_, nil);
    }
  }
  self->type_ = RenameOrgKxml2IoKXmlParser_peekTypeWithBoolean_(self, false);
  if (self->type_ == RenameOrgKxml2IoKXmlParser_XML_DECLARATION) {
    RenameOrgKxml2IoKXmlParser_readXmlDeclaration(self);
    self->type_ = RenameOrgKxml2IoKXmlParser_peekTypeWithBoolean_(self, false);
  }
  JreStrongAssign(&self->text_, nil);
  self->isWhitespace_ = true;
  JreStrongAssign(&self->prefix_, nil);
  JreStrongAssign(&self->name_, nil);
  JreStrongAssign(&self->namespace__, nil);
  self->attributeCount_ = -1;
  jboolean throwOnResolveFailure = !justOneToken;
  while (true) {
    {
      NSString *commentText;
      NSString *processingInstruction;
      switch (self->type_) {
        case OrgXmlpullV1XmlPullParser_START_TAG:
        RenameOrgKxml2IoKXmlParser_parseStartTagWithBoolean_withBoolean_(self, false, throwOnResolveFailure);
        return self->type_;
        case OrgXmlpullV1XmlPullParser_END_TAG:
        RenameOrgKxml2IoKXmlParser_readEndTag(self);
        return self->type_;
        case OrgXmlpullV1XmlPullParser_END_DOCUMENT:
        return self->type_;
        case OrgXmlpullV1XmlPullParser_ENTITY_REF:
        if (justOneToken) {
          JavaLangStringBuilder *entityTextBuilder = create_JavaLangStringBuilder_init();
          RenameOrgKxml2IoKXmlParser_readEntityWithJavaLangStringBuilder_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(self, entityTextBuilder, true, throwOnResolveFailure, JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, TEXT));
          JreStrongAssign(&self->text_, [entityTextBuilder description]);
          break;
        }
        case OrgXmlpullV1XmlPullParser_TEXT:
        JreStrongAssign(&self->text_, RenameOrgKxml2IoKXmlParser_readValueWithChar_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(self, '<', !justOneToken, throwOnResolveFailure, JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, TEXT)));
        if (self->depth_ == 0 && self->isWhitespace_) {
          self->type_ = OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE;
        }
        break;
        case OrgXmlpullV1XmlPullParser_CDSECT:
        RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_CDATA);
        JreStrongAssign(&self->text_, RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(self, RenameOrgKxml2IoKXmlParser_END_CDATA, true));
        break;
        case OrgXmlpullV1XmlPullParser_COMMENT:
        commentText = RenameOrgKxml2IoKXmlParser_readCommentWithBoolean_(self, justOneToken);
        if (justOneToken) {
          JreStrongAssign(&self->text_, commentText);
        }
        break;
        case OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION:
        RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION);
        processingInstruction = RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(self, RenameOrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION, justOneToken);
        if (justOneToken) {
          JreStrongAssign(&self->text_, processingInstruction);
        }
        break;
        case OrgXmlpullV1XmlPullParser_DOCDECL:
        RenameOrgKxml2IoKXmlParser_readDoctypeWithBoolean_(self, justOneToken);
        break;
        default:
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Unexpected token", self, nil);
      }
    }
    if (self->depth_ == 0 && (self->type_ == OrgXmlpullV1XmlPullParser_ENTITY_REF || self->type_ == OrgXmlpullV1XmlPullParser_TEXT || self->type_ == OrgXmlpullV1XmlPullParser_CDSECT)) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Unexpected token", self, nil);
    }
    if (justOneToken) {
      return self->type_;
    }
    if (self->type_ == OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE) {
      JreStrongAssign(&self->text_, nil);
    }
    jint peek = RenameOrgKxml2IoKXmlParser_peekTypeWithBoolean_(self, false);
    if (self->text_ != nil && ![self->text_ isEmpty] && peek < OrgXmlpullV1XmlPullParser_TEXT) {
      self->type_ = OrgXmlpullV1XmlPullParser_TEXT;
      return self->type_;
    }
    self->type_ = peek;
  }
}

NSString *RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(RenameOrgKxml2IoKXmlParser *self, IOSCharArray *delimiter, jboolean returnText) {
  jint start = self->position_;
  JavaLangStringBuilder *result = nil;
  if (returnText && self->text_ != nil) {
    result = create_JavaLangStringBuilder_init();
    [result appendWithNSString:self->text_];
  }
  while (true) {
    {
      if (self->position_ + ((IOSCharArray *) nil_chk(delimiter))->size_ >= self->limit_) {
        if (start < self->position_ && returnText) {
          if (result == nil) {
            result = create_JavaLangStringBuilder_init();
          }
          [result appendWithCharArray:self->buffer_ withInt:start withInt:self->position_ - start];
        }
        if (!RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, delimiter->size_)) {
          RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, RenameOrgKxml2IoKXmlParser_UNEXPECTED_EOF);
          self->type_ = OrgXmlpullV1XmlPullParser_COMMENT;
          return nil;
        }
        start = self->position_;
      }
      for (jint i = 0; i < delimiter->size_; i++) {
        if (IOSCharArray_Get(nil_chk(self->buffer_), self->position_ + i) != IOSCharArray_Get(delimiter, i)) {
          self->position_++;
          goto continue_search;
        }
      }
      break;
    }
    continue_search: ;
  }
  jint end = self->position_;
  self->position_ += ((IOSCharArray *) nil_chk(delimiter))->size_;
  if (!returnText) {
    return nil;
  }
  else if (result == nil) {
    return [((RenameLibcoreInternalStringPool *) nil_chk(self->stringPool_)) getWithCharArray:self->buffer_ withInt:start withInt:end - start];
  }
  else {
    [result appendWithCharArray:self->buffer_ withInt:start withInt:end - start];
    return [result description];
  }
}

void RenameOrgKxml2IoKXmlParser_readXmlDeclaration(RenameOrgKxml2IoKXmlParser *self) {
  if (self->bufferStartLine_ != 0 || self->bufferStartColumn_ != 0 || self->position_ != 0) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, @"processing instructions must not start with xml");
  }
  RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION);
  RenameOrgKxml2IoKXmlParser_parseStartTagWithBoolean_withBoolean_(self, true, true);
  if (self->attributeCount_ < 1 || ![@"version" isEqual:IOSObjectArray_Get(nil_chk(self->attributes_), 2)]) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, @"version expected");
  }
  JreStrongAssign(&self->version__, IOSObjectArray_Get(nil_chk(self->attributes_), 3));
  jint pos = 1;
  if (pos < self->attributeCount_ && [@"encoding" isEqual:IOSObjectArray_Get(self->attributes_, 2 + 4)]) {
    JreStrongAssign(&self->encoding_, IOSObjectArray_Get(nil_chk(self->attributes_), 3 + 4));
    pos++;
  }
  if (pos < self->attributeCount_ && [@"standalone" isEqual:IOSObjectArray_Get(nil_chk(self->attributes_), 4 * pos + 2)]) {
    NSString *st = IOSObjectArray_Get(nil_chk(self->attributes_), 3 + 4 * pos);
    if ([@"yes" isEqual:st]) {
      JreStrongAssign(&self->standalone_, JreLoadStatic(JavaLangBoolean, TRUE));
    }
    else if ([@"no" isEqual:st]) {
      JreStrongAssign(&self->standalone_, JreLoadStatic(JavaLangBoolean, FALSE));
    }
    else {
      RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$$", @"illegal standalone value: ", st));
    }
    pos++;
  }
  if (pos != self->attributeCount_) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, @"unexpected attributes in XML declaration");
  }
  self->isWhitespace_ = true;
  JreStrongAssign(&self->text_, nil);
}

NSString *RenameOrgKxml2IoKXmlParser_readCommentWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean returnText) {
  RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_COMMENT);
  if (self->relaxed_) {
    return RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(self, RenameOrgKxml2IoKXmlParser_END_COMMENT, returnText);
  }
  NSString *commentText = RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(self, RenameOrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH, returnText);
  if (RenameOrgKxml2IoKXmlParser_peekCharacter(self) != '>') {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Comments may not contain --", self, nil);
  }
  self->position_++;
  return commentText;
}

void RenameOrgKxml2IoKXmlParser_readDoctypeWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean saveDtdText) {
  RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_DOCTYPE);
  jint startPosition = -1;
  if (saveDtdText) {
    JreStrongAssignAndConsume(&self->bufferCapture_, new_JavaLangStringBuilder_init());
    startPosition = self->position_;
  }
  @try {
    RenameOrgKxml2IoKXmlParser_skip(self);
    JreStrongAssign(&self->rootElementName_, RenameOrgKxml2IoKXmlParser_readName(self));
    RenameOrgKxml2IoKXmlParser_readExternalIdWithBoolean_withBoolean_(self, true, true);
    RenameOrgKxml2IoKXmlParser_skip(self);
    if (RenameOrgKxml2IoKXmlParser_peekCharacter(self) == '[') {
      RenameOrgKxml2IoKXmlParser_readInternalSubset(self);
    }
    RenameOrgKxml2IoKXmlParser_skip(self);
  }
  @finally {
    if (saveDtdText) {
      [((JavaLangStringBuilder *) nil_chk(self->bufferCapture_)) appendWithCharArray:self->buffer_ withInt:0 withInt:self->position_];
      [((JavaLangStringBuilder *) nil_chk(self->bufferCapture_)) delete__WithInt:0 withInt:startPosition];
      JreStrongAssign(&self->text_, [((JavaLangStringBuilder *) nil_chk(self->bufferCapture_)) description]);
      JreStrongAssign(&self->bufferCapture_, nil);
    }
  }
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, '>');
}

jboolean RenameOrgKxml2IoKXmlParser_readExternalIdWithBoolean_withBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean requireSystemName, jboolean assignFields) {
  RenameOrgKxml2IoKXmlParser_skip(self);
  jint c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
  if (c == 'S') {
    RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_SYSTEM);
  }
  else if (c == 'P') {
    RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_PUBLIC);
    RenameOrgKxml2IoKXmlParser_skip(self);
    if (assignFields) {
      JreStrongAssign(&self->publicId_, RenameOrgKxml2IoKXmlParser_readQuotedIdWithBoolean_(self, true));
    }
    else {
      RenameOrgKxml2IoKXmlParser_readQuotedIdWithBoolean_(self, false);
    }
  }
  else {
    return false;
  }
  RenameOrgKxml2IoKXmlParser_skip(self);
  if (!requireSystemName) {
    jint delimiter = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
    if (delimiter != '"' && delimiter != '\'') {
      return true;
    }
  }
  if (assignFields) {
    JreStrongAssign(&self->systemId_, RenameOrgKxml2IoKXmlParser_readQuotedIdWithBoolean_(self, true));
  }
  else {
    RenameOrgKxml2IoKXmlParser_readQuotedIdWithBoolean_(self, false);
  }
  return true;
}

NSString *RenameOrgKxml2IoKXmlParser_readQuotedIdWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean returnText) {
  jint quote = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
  IOSCharArray *delimiter;
  if (quote == '"') {
    delimiter = RenameOrgKxml2IoKXmlParser_DOUBLE_QUOTE;
  }
  else if (quote == '\'') {
    delimiter = RenameOrgKxml2IoKXmlParser_SINGLE_QUOTE;
  }
  else {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Expected a quoted string", self, nil);
  }
  self->position_++;
  return RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(self, delimiter, returnText);
}

void RenameOrgKxml2IoKXmlParser_readInternalSubset(RenameOrgKxml2IoKXmlParser *self) {
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, '[');
  while (true) {
    RenameOrgKxml2IoKXmlParser_skip(self);
    if (RenameOrgKxml2IoKXmlParser_peekCharacter(self) == ']') {
      self->position_++;
      return;
    }
    jint declarationType = RenameOrgKxml2IoKXmlParser_peekTypeWithBoolean_(self, true);
    switch (declarationType) {
      case RenameOrgKxml2IoKXmlParser_ELEMENTDECL:
      RenameOrgKxml2IoKXmlParser_readElementDeclaration(self);
      break;
      case RenameOrgKxml2IoKXmlParser_ATTLISTDECL:
      RenameOrgKxml2IoKXmlParser_readAttributeListDeclaration(self);
      break;
      case RenameOrgKxml2IoKXmlParser_ENTITYDECL:
      RenameOrgKxml2IoKXmlParser_readEntityDeclaration(self);
      break;
      case RenameOrgKxml2IoKXmlParser_NOTATIONDECL:
      RenameOrgKxml2IoKXmlParser_readNotationDeclaration(self);
      break;
      case OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION:
      RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION);
      RenameOrgKxml2IoKXmlParser_readUntilWithCharArray_withBoolean_(self, RenameOrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION, false);
      break;
      case OrgXmlpullV1XmlPullParser_COMMENT:
      RenameOrgKxml2IoKXmlParser_readCommentWithBoolean_(self, false);
      break;
      case RenameOrgKxml2IoKXmlParser_PARAMETER_ENTITY_REF:
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Parameter entity references are not supported", self, nil);
      default:
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Unexpected token", self, nil);
    }
  }
}

void RenameOrgKxml2IoKXmlParser_readElementDeclaration(RenameOrgKxml2IoKXmlParser *self) {
  RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_ELEMENT);
  RenameOrgKxml2IoKXmlParser_skip(self);
  RenameOrgKxml2IoKXmlParser_readName(self);
  RenameOrgKxml2IoKXmlParser_readContentSpec(self);
  RenameOrgKxml2IoKXmlParser_skip(self);
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, '>');
}

void RenameOrgKxml2IoKXmlParser_readContentSpec(RenameOrgKxml2IoKXmlParser *self) {
  RenameOrgKxml2IoKXmlParser_skip(self);
  jint c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
  if (c == '(') {
    jint depth = 0;
    do {
      if (c == '(') {
        depth++;
      }
      else if (c == ')') {
        depth--;
      }
      self->position_++;
      c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
    }
    while (depth > 0);
    if (c == '*' || c == '?' || c == '+') {
      self->position_++;
    }
  }
  else if (c == IOSCharArray_Get(nil_chk(RenameOrgKxml2IoKXmlParser_EMPTY), 0)) {
    RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_EMPTY);
  }
  else if (c == IOSCharArray_Get(nil_chk(RenameOrgKxml2IoKXmlParser_ANY), 0)) {
    RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_ANY);
  }
  else {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Expected element content spec", self, nil);
  }
}

void RenameOrgKxml2IoKXmlParser_readAttributeListDeclaration(RenameOrgKxml2IoKXmlParser *self) {
  RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_ATTLIST);
  RenameOrgKxml2IoKXmlParser_skip(self);
  NSString *elementName = RenameOrgKxml2IoKXmlParser_readName(self);
  while (true) {
    RenameOrgKxml2IoKXmlParser_skip(self);
    jint c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
    if (c == '>') {
      self->position_++;
      return;
    }
    NSString *attributeName = RenameOrgKxml2IoKXmlParser_readName(self);
    RenameOrgKxml2IoKXmlParser_skip(self);
    if (self->position_ + 1 >= self->limit_ && !RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 2)) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Malformed attribute list", self, nil);
    }
    if (IOSCharArray_Get(nil_chk(self->buffer_), self->position_) == IOSCharArray_Get(nil_chk(RenameOrgKxml2IoKXmlParser_NOTATION), 0) && IOSCharArray_Get(self->buffer_, self->position_ + 1) == IOSCharArray_Get(RenameOrgKxml2IoKXmlParser_NOTATION, 1)) {
      RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_NOTATION);
      RenameOrgKxml2IoKXmlParser_skip(self);
    }
    c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
    if (c == '(') {
      self->position_++;
      while (true) {
        RenameOrgKxml2IoKXmlParser_skip(self);
        RenameOrgKxml2IoKXmlParser_readName(self);
        RenameOrgKxml2IoKXmlParser_skip(self);
        c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
        if (c == ')') {
          self->position_++;
          break;
        }
        else if (c == '|') {
          self->position_++;
        }
        else {
          @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Malformed attribute type", self, nil);
        }
      }
    }
    else {
      RenameOrgKxml2IoKXmlParser_readName(self);
    }
    RenameOrgKxml2IoKXmlParser_skip(self);
    c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
    if (c == '#') {
      self->position_++;
      c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
      if (c == 'R') {
        RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_REQUIRED);
      }
      else if (c == 'I') {
        RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_IMPLIED);
      }
      else if (c == 'F') {
        RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_FIXED);
      }
      else {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Malformed attribute type", self, nil);
      }
      RenameOrgKxml2IoKXmlParser_skip(self);
      c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
    }
    if (c == '"' || c == '\'') {
      self->position_++;
      NSString *value = RenameOrgKxml2IoKXmlParser_readValueWithChar_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(self, (jchar) c, true, true, JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ATTRIBUTE));
      self->position_++;
      RenameOrgKxml2IoKXmlParser_defineAttributeDefaultWithNSString_withNSString_withNSString_(self, elementName, attributeName, value);
    }
  }
}

void RenameOrgKxml2IoKXmlParser_defineAttributeDefaultWithNSString_withNSString_withNSString_(RenameOrgKxml2IoKXmlParser *self, NSString *elementName, NSString *attributeName, NSString *value) {
  if (self->defaultAttributes_ == nil) {
    JreStrongAssignAndConsume(&self->defaultAttributes_, new_JavaUtilHashMap_init());
  }
  id<JavaUtilMap> elementAttributes = [self->defaultAttributes_ getWithId:elementName];
  if (elementAttributes == nil) {
    elementAttributes = create_JavaUtilHashMap_init();
    [((id<JavaUtilMap>) nil_chk(self->defaultAttributes_)) putWithId:elementName withId:elementAttributes];
  }
  [elementAttributes putWithId:attributeName withId:value];
}

void RenameOrgKxml2IoKXmlParser_readEntityDeclaration(RenameOrgKxml2IoKXmlParser *self) {
  RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_ENTITY);
  jboolean generalEntity = true;
  RenameOrgKxml2IoKXmlParser_skip(self);
  if (RenameOrgKxml2IoKXmlParser_peekCharacter(self) == '%') {
    generalEntity = false;
    self->position_++;
    RenameOrgKxml2IoKXmlParser_skip(self);
  }
  NSString *name = RenameOrgKxml2IoKXmlParser_readName(self);
  RenameOrgKxml2IoKXmlParser_skip(self);
  jint quote = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
  NSString *entityValue;
  if (quote == '"' || quote == '\'') {
    self->position_++;
    entityValue = RenameOrgKxml2IoKXmlParser_readValueWithChar_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(self, (jchar) quote, true, false, JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ENTITY_DECLARATION));
    self->position_++;
  }
  else if (RenameOrgKxml2IoKXmlParser_readExternalIdWithBoolean_withBoolean_(self, true, false)) {
    entityValue = @"";
    RenameOrgKxml2IoKXmlParser_skip(self);
    if (RenameOrgKxml2IoKXmlParser_peekCharacter(self) == IOSCharArray_Get(nil_chk(RenameOrgKxml2IoKXmlParser_NDATA), 0)) {
      RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_NDATA);
      RenameOrgKxml2IoKXmlParser_skip(self);
      RenameOrgKxml2IoKXmlParser_readName(self);
    }
  }
  else {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Expected entity value or external ID", self, nil);
  }
  if (generalEntity && self->processDocDecl_) {
    if (self->documentEntities_ == nil) {
      JreStrongAssignAndConsume(&self->documentEntities_, new_JavaUtilHashMap_init());
    }
    [self->documentEntities_ putWithId:name withId:[((NSString *) nil_chk(entityValue)) toCharArray]];
  }
  RenameOrgKxml2IoKXmlParser_skip(self);
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, '>');
}

void RenameOrgKxml2IoKXmlParser_readNotationDeclaration(RenameOrgKxml2IoKXmlParser *self) {
  RenameOrgKxml2IoKXmlParser_readWithCharArray_(self, RenameOrgKxml2IoKXmlParser_START_NOTATION);
  RenameOrgKxml2IoKXmlParser_skip(self);
  RenameOrgKxml2IoKXmlParser_readName(self);
  if (!RenameOrgKxml2IoKXmlParser_readExternalIdWithBoolean_withBoolean_(self, false, false)) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Expected external ID or public ID for notation", self, nil);
  }
  RenameOrgKxml2IoKXmlParser_skip(self);
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, '>');
}

void RenameOrgKxml2IoKXmlParser_readEndTag(RenameOrgKxml2IoKXmlParser *self) {
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, '<');
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, '/');
  JreStrongAssign(&self->name_, RenameOrgKxml2IoKXmlParser_readName(self));
  RenameOrgKxml2IoKXmlParser_skip(self);
  RenameOrgKxml2IoKXmlParser_readWithChar_(self, '>');
  jint sp = (self->depth_ - 1) * 4;
  if (self->depth_ == 0) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$$$", @"read end tag ", self->name_, @" with no tags open"));
    self->type_ = OrgXmlpullV1XmlPullParser_COMMENT;
    return;
  }
  if ([((NSString *) nil_chk(self->name_)) isEqual:IOSObjectArray_Get(nil_chk(self->elementStack_), sp + 3)]) {
    JreStrongAssign(&self->namespace__, IOSObjectArray_Get(nil_chk(self->elementStack_), sp));
    JreStrongAssign(&self->prefix_, IOSObjectArray_Get(self->elementStack_, sp + 1));
    JreStrongAssign(&self->name_, IOSObjectArray_Get(self->elementStack_, sp + 2));
  }
  else if (!self->relaxed_) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(JreStrcat("$$$$", @"expected: /", IOSObjectArray_Get(nil_chk(self->elementStack_), sp + 3), @" read: ", self->name_), self, nil);
  }
}

jint RenameOrgKxml2IoKXmlParser_peekTypeWithBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean inDeclaration) {
  if (self->position_ >= self->limit_ && !RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
    return OrgXmlpullV1XmlPullParser_END_DOCUMENT;
  }
  switch (IOSCharArray_Get(nil_chk(self->buffer_), self->position_)) {
    case '&':
    return OrgXmlpullV1XmlPullParser_ENTITY_REF;
    case '<':
    if (self->position_ + 3 >= self->limit_ && !RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 4)) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Dangling <", self, nil);
    }
    switch (IOSCharArray_Get(nil_chk(self->buffer_), self->position_ + 1)) {
      case '/':
      return OrgXmlpullV1XmlPullParser_END_TAG;
      case '?':
      if ((self->position_ + 5 < self->limit_ || RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 6)) && (IOSCharArray_Get(nil_chk(self->buffer_), self->position_ + 2) == 'x' || IOSCharArray_Get(self->buffer_, self->position_ + 2) == 'X') && (IOSCharArray_Get(self->buffer_, self->position_ + 3) == 'm' || IOSCharArray_Get(self->buffer_, self->position_ + 3) == 'M') && (IOSCharArray_Get(self->buffer_, self->position_ + 4) == 'l' || IOSCharArray_Get(self->buffer_, self->position_ + 4) == 'L') && (IOSCharArray_Get(self->buffer_, self->position_ + 5) == ' ')) {
        return RenameOrgKxml2IoKXmlParser_XML_DECLARATION;
      }
      else {
        return OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION;
      }
      case '!':
      switch (IOSCharArray_Get(self->buffer_, self->position_ + 2)) {
        case 'D':
        return OrgXmlpullV1XmlPullParser_DOCDECL;
        case '[':
        return OrgXmlpullV1XmlPullParser_CDSECT;
        case '-':
        return OrgXmlpullV1XmlPullParser_COMMENT;
        case 'E':
        switch (IOSCharArray_Get(self->buffer_, self->position_ + 3)) {
          case 'L':
          return RenameOrgKxml2IoKXmlParser_ELEMENTDECL;
          case 'N':
          return RenameOrgKxml2IoKXmlParser_ENTITYDECL;
        }
        break;
        case 'A':
        return RenameOrgKxml2IoKXmlParser_ATTLISTDECL;
        case 'N':
        return RenameOrgKxml2IoKXmlParser_NOTATIONDECL;
      }
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Unexpected <!", self, nil);
      default:
      return OrgXmlpullV1XmlPullParser_START_TAG;
    }
    case '%':
    return inDeclaration ? RenameOrgKxml2IoKXmlParser_PARAMETER_ENTITY_REF : OrgXmlpullV1XmlPullParser_TEXT;
    default:
    return OrgXmlpullV1XmlPullParser_TEXT;
  }
}

void RenameOrgKxml2IoKXmlParser_parseStartTagWithBoolean_withBoolean_(RenameOrgKxml2IoKXmlParser *self, jboolean xmldecl, jboolean throwOnResolveFailure) {
  if (!xmldecl) {
    RenameOrgKxml2IoKXmlParser_readWithChar_(self, '<');
  }
  JreStrongAssign(&self->name_, RenameOrgKxml2IoKXmlParser_readName(self));
  self->attributeCount_ = 0;
  while (true) {
    RenameOrgKxml2IoKXmlParser_skip(self);
    if (self->position_ >= self->limit_ && !RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
      RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, RenameOrgKxml2IoKXmlParser_UNEXPECTED_EOF);
      return;
    }
    jint c = IOSCharArray_Get(nil_chk(self->buffer_), self->position_);
    if (xmldecl) {
      if (c == '?') {
        self->position_++;
        RenameOrgKxml2IoKXmlParser_readWithChar_(self, '>');
        return;
      }
    }
    else {
      if (c == '/') {
        self->degenerated_ = true;
        self->position_++;
        RenameOrgKxml2IoKXmlParser_skip(self);
        RenameOrgKxml2IoKXmlParser_readWithChar_(self, '>');
        break;
      }
      else if (c == '>') {
        self->position_++;
        break;
      }
    }
    NSString *attrName = RenameOrgKxml2IoKXmlParser_readName(self);
    jint i = (self->attributeCount_++) * 4;
    JreStrongAssign(&self->attributes_, RenameOrgKxml2IoKXmlParser_ensureCapacityWithNSStringArray_withInt_(self, self->attributes_, i + 4));
    IOSObjectArray_Set(nil_chk(self->attributes_), i, @"");
    IOSObjectArray_Set(self->attributes_, i + 1, nil);
    IOSObjectArray_Set(self->attributes_, i + 2, attrName);
    RenameOrgKxml2IoKXmlParser_skip(self);
    if (self->position_ >= self->limit_ && !RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
      RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, RenameOrgKxml2IoKXmlParser_UNEXPECTED_EOF);
      return;
    }
    if (IOSCharArray_Get(nil_chk(self->buffer_), self->position_) == '=') {
      self->position_++;
      RenameOrgKxml2IoKXmlParser_skip(self);
      if (self->position_ >= self->limit_ && !RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
        RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, RenameOrgKxml2IoKXmlParser_UNEXPECTED_EOF);
        return;
      }
      jchar delimiter = IOSCharArray_Get(nil_chk(self->buffer_), self->position_);
      if (delimiter == '\'' || delimiter == '"') {
        self->position_++;
      }
      else if (self->relaxed_) {
        delimiter = ' ';
      }
      else {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"attr value delimiter missing!", self, nil);
      }
      IOSObjectArray_Set(nil_chk(self->attributes_), i + 3, RenameOrgKxml2IoKXmlParser_readValueWithChar_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(self, delimiter, true, throwOnResolveFailure, JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ATTRIBUTE)));
      if (delimiter != ' ') {
        self->position_++;
      }
    }
    else if (self->relaxed_) {
      IOSObjectArray_Set(nil_chk(self->attributes_), i + 3, attrName);
    }
    else {
      RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$$", @"Attr.value missing f. ", attrName));
      IOSObjectArray_Set(nil_chk(self->attributes_), i + 3, attrName);
    }
  }
  jint sp = self->depth_++ * 4;
  JreStrongAssign(&self->elementStack_, RenameOrgKxml2IoKXmlParser_ensureCapacityWithNSStringArray_withInt_(self, self->elementStack_, sp + 4));
  IOSObjectArray_Set(nil_chk(self->elementStack_), sp + 3, self->name_);
  if (self->depth_ >= ((IOSIntArray *) nil_chk(self->nspCounts_))->size_) {
    IOSIntArray *bigger = [IOSIntArray arrayWithLength:self->depth_ + 4];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->nspCounts_, 0, bigger, 0, self->nspCounts_->size_);
    JreStrongAssign(&self->nspCounts_, bigger);
  }
  *IOSIntArray_GetRef(self->nspCounts_, self->depth_) = IOSIntArray_Get(self->nspCounts_, self->depth_ - 1);
  if (self->processNsp_) {
    RenameOrgKxml2IoKXmlParser_adjustNsp(self);
  }
  else {
    JreStrongAssign(&self->namespace__, @"");
  }
  if (self->defaultAttributes_ != nil) {
    id<JavaUtilMap> elementDefaultAttributes = [self->defaultAttributes_ getWithId:self->name_];
    if (elementDefaultAttributes != nil) {
      for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([elementDefaultAttributes entrySet])) {
        if ([self getAttributeValueWithNSString:nil withNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]] != nil) {
          continue;
        }
        jint i = (self->attributeCount_++) * 4;
        JreStrongAssign(&self->attributes_, RenameOrgKxml2IoKXmlParser_ensureCapacityWithNSStringArray_withInt_(self, self->attributes_, i + 4));
        IOSObjectArray_Set(nil_chk(self->attributes_), i, @"");
        IOSObjectArray_Set(self->attributes_, i + 1, nil);
        IOSObjectArray_Set(self->attributes_, i + 2, [entry_ getKey]);
        IOSObjectArray_Set(nil_chk(self->attributes_), i + 3, [entry_ getValue]);
      }
    }
  }
  IOSObjectArray_Set(nil_chk(self->elementStack_), sp, self->namespace__);
  IOSObjectArray_Set(self->elementStack_, sp + 1, self->prefix_);
  IOSObjectArray_Set(self->elementStack_, sp + 2, self->name_);
}

void RenameOrgKxml2IoKXmlParser_readEntityWithJavaLangStringBuilder_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(RenameOrgKxml2IoKXmlParser *self, JavaLangStringBuilder *outArg, jboolean isEntityToken, jboolean throwOnResolveFailure, RenameOrgKxml2IoKXmlParser_ValueContext *valueContext) {
  jint start = [((JavaLangStringBuilder *) nil_chk(outArg)) length];
  if (IOSCharArray_Get(nil_chk(self->buffer_), self->position_++) != '&') {
    @throw create_JavaLangAssertionError_init();
  }
  [outArg appendWithChar:'&'];
  while (true) {
    jint c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
    if (c == ';') {
      [outArg appendWithChar:';'];
      self->position_++;
      break;
    }
    else if (c >= 128 || (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == '-' || c == '#') {
      self->position_++;
      [outArg appendWithChar:(jchar) c];
    }
    else if (self->relaxed_) {
      return;
    }
    else {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"unterminated entity ref", self, nil);
    }
  }
  NSString *code = [outArg substringWithInt:start + 1 withInt:[outArg length] - 1];
  if (isEntityToken) {
    JreStrongAssign(&self->name_, code);
  }
  if ([((NSString *) nil_chk(code)) hasPrefix:@"#"]) {
    @try {
      jint c = [code hasPrefix:@"#x"] ? JavaLangInteger_parseIntWithNSString_withInt_([code substring:2], 16) : JavaLangInteger_parseIntWithNSString_([code substring:1]);
      [outArg delete__WithInt:start withInt:[outArg length]];
      [outArg appendCodePointWithInt:c];
      self->unresolved_ = false;
      return;
    }
    @catch (JavaLangNumberFormatException *notANumber) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Invalid character reference: &", code));
    }
    @catch (JavaLangIllegalArgumentException *invalidCodePoint) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Invalid character reference: &", code));
    }
  }
  if (valueContext == JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ENTITY_DECLARATION)) {
    return;
  }
  NSString *defaultEntity = [((id<JavaUtilMap>) nil_chk(RenameOrgKxml2IoKXmlParser_DEFAULT_ENTITIES)) getWithId:code];
  if (defaultEntity != nil) {
    [outArg delete__WithInt:start withInt:[outArg length]];
    self->unresolved_ = false;
    [outArg appendWithNSString:defaultEntity];
    return;
  }
  IOSCharArray *resolved;
  if (self->documentEntities_ != nil && (resolved = [self->documentEntities_ getWithId:code]) != nil) {
    [outArg delete__WithInt:start withInt:[outArg length]];
    self->unresolved_ = false;
    if (self->processDocDecl_) {
      RenameOrgKxml2IoKXmlParser_pushContentSourceWithCharArray_(self, resolved);
    }
    else {
      [outArg appendWithCharArray:resolved];
    }
    return;
  }
  if (self->systemId_ != nil) {
    [outArg delete__WithInt:start withInt:[outArg length]];
    return;
  }
  self->unresolved_ = true;
  if (throwOnResolveFailure) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$$C", @"unresolved: &", code, ';'));
  }
}

NSString *RenameOrgKxml2IoKXmlParser_readValueWithChar_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(RenameOrgKxml2IoKXmlParser *self, jchar delimiter, jboolean resolveEntities, jboolean throwOnResolveFailure, RenameOrgKxml2IoKXmlParser_ValueContext *valueContext) {
  jint start = self->position_;
  JavaLangStringBuilder *result = nil;
  if (valueContext == JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, TEXT) && self->text_ != nil) {
    result = create_JavaLangStringBuilder_init();
    [result appendWithNSString:self->text_];
  }
  while (true) {
    if (self->position_ >= self->limit_) {
      if (start < self->position_) {
        if (result == nil) {
          result = create_JavaLangStringBuilder_init();
        }
        [result appendWithCharArray:self->buffer_ withInt:start withInt:self->position_ - start];
      }
      if (!RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
        return result != nil ? [result description] : @"";
      }
      start = self->position_;
    }
    jchar c = IOSCharArray_Get(nil_chk(self->buffer_), self->position_);
    if (c == delimiter || (delimiter == ' ' && (c <= ' ' || c == '>')) || (c == '&' && !resolveEntities)) {
      break;
    }
    if (c != 0x000d && (c != 0x000a || valueContext != JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ATTRIBUTE)) && c != '&' && c != '<' && (c != ']' || valueContext != JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, TEXT)) && (c != '%' || valueContext != JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ENTITY_DECLARATION))) {
      self->isWhitespace_ &= (c <= ' ');
      self->position_++;
      continue;
    }
    if (result == nil) {
      result = create_JavaLangStringBuilder_init();
    }
    [result appendWithCharArray:self->buffer_ withInt:start withInt:self->position_ - start];
    if (c == 0x000d) {
      if ((self->position_ + 1 < self->limit_ || RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 2)) && IOSCharArray_Get(nil_chk(self->buffer_), self->position_ + 1) == 0x000a) {
        self->position_++;
      }
      c = (valueContext == JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ATTRIBUTE)) ? ' ' : 0x000a;
    }
    else if (c == 0x000a) {
      c = ' ';
    }
    else if (c == '&') {
      self->isWhitespace_ = false;
      RenameOrgKxml2IoKXmlParser_readEntityWithJavaLangStringBuilder_withBoolean_withBoolean_withRenameOrgKxml2IoKXmlParser_ValueContext_(self, result, false, throwOnResolveFailure, valueContext);
      start = self->position_;
      continue;
    }
    else if (c == '<') {
      if (valueContext == JreLoadEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ATTRIBUTE)) {
        RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, @"Illegal: \"<\" inside attribute value");
      }
      self->isWhitespace_ = false;
    }
    else if (c == ']') {
      if ((self->position_ + 2 < self->limit_ || RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 3)) && IOSCharArray_Get(nil_chk(self->buffer_), self->position_ + 1) == ']' && IOSCharArray_Get(self->buffer_, self->position_ + 2) == '>') {
        RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, @"Illegal: \"]]>\" outside CDATA section");
      }
      self->isWhitespace_ = false;
    }
    else if (c == '%') {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"This parser doesn't support parameter entities", self, nil);
    }
    else {
      @throw create_JavaLangAssertionError_init();
    }
    self->position_++;
    [result appendWithChar:c];
    start = self->position_;
  }
  if (result == nil) {
    return [((RenameLibcoreInternalStringPool *) nil_chk(self->stringPool_)) getWithCharArray:self->buffer_ withInt:start withInt:self->position_ - start];
  }
  else {
    [result appendWithCharArray:self->buffer_ withInt:start withInt:self->position_ - start];
    return [result description];
  }
}

void RenameOrgKxml2IoKXmlParser_readWithChar_(RenameOrgKxml2IoKXmlParser *self, jchar expected) {
  jint c = RenameOrgKxml2IoKXmlParser_peekCharacter(self);
  if (c != expected) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$C$CC", @"expected: '", expected, @"' actual: '", ((jchar) c), '\''));
  }
  self->position_++;
}

void RenameOrgKxml2IoKXmlParser_readWithCharArray_(RenameOrgKxml2IoKXmlParser *self, IOSCharArray *chars) {
  if (self->position_ + ((IOSCharArray *) nil_chk(chars))->size_ >= self->limit_ && !RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, chars->size_)) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$$$", @"expected: '", [NSString stringWithCharacters:chars], @"' but was EOF"));
    return;
  }
  for (jint i = 0; i < chars->size_; i++) {
    if (IOSCharArray_Get(nil_chk(self->buffer_), self->position_ + i) != IOSCharArray_Get(chars, i)) {
      RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, JreStrcat("$$$$$", @"expected: \"", [NSString stringWithCharacters:chars], @"\" but was \"", [NSString stringWithCharacters:self->buffer_ offset:self->position_ length:chars->size_], @"...\""));
    }
  }
  self->position_ += chars->size_;
}

jint RenameOrgKxml2IoKXmlParser_peekCharacter(RenameOrgKxml2IoKXmlParser *self) {
  if (self->position_ < self->limit_ || RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
    return IOSCharArray_Get(nil_chk(self->buffer_), self->position_);
  }
  return -1;
}

jboolean RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(RenameOrgKxml2IoKXmlParser *self, jint minimum) {
  while (self->nextContentSource_ != nil) {
    if (self->position_ < self->limit_) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(@"Unbalanced entity!", self, nil);
    }
    RenameOrgKxml2IoKXmlParser_popContentSource(self);
    if (self->limit_ - self->position_ >= minimum) {
      return true;
    }
  }
  for (jint i = 0; i < self->position_; i++) {
    if (IOSCharArray_Get(nil_chk(self->buffer_), i) == 0x000a) {
      self->bufferStartLine_++;
      self->bufferStartColumn_ = 0;
    }
    else {
      self->bufferStartColumn_++;
    }
  }
  if (self->bufferCapture_ != nil) {
    [self->bufferCapture_ appendWithCharArray:self->buffer_ withInt:0 withInt:self->position_];
  }
  if (self->limit_ != self->position_) {
    self->limit_ -= self->position_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, self->position_, self->buffer_, 0, self->limit_);
  }
  else {
    self->limit_ = 0;
  }
  self->position_ = 0;
  jint total;
  while ((total = [((JavaIoReader *) nil_chk(self->reader_)) readWithCharArray:self->buffer_ withInt:self->limit_ withInt:((IOSCharArray *) nil_chk(self->buffer_))->size_ - self->limit_]) != -1) {
    self->limit_ += total;
    if (self->limit_ >= minimum) {
      return true;
    }
  }
  return false;
}

NSString *RenameOrgKxml2IoKXmlParser_readName(RenameOrgKxml2IoKXmlParser *self) {
  if (self->position_ >= self->limit_ && !RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, @"name expected");
    return @"";
  }
  jint start = self->position_;
  JavaLangStringBuilder *result = nil;
  jchar c = IOSCharArray_Get(nil_chk(self->buffer_), self->position_);
  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == ':' || c >= 0x00c0 || self->relaxed_) {
    self->position_++;
  }
  else {
    RenameOrgKxml2IoKXmlParser_checkRelaxedWithNSString_(self, @"name expected");
    return @"";
  }
  while (true) {
    if (self->position_ >= self->limit_) {
      if (result == nil) {
        result = create_JavaLangStringBuilder_init();
      }
      [result appendWithCharArray:self->buffer_ withInt:start withInt:self->position_ - start];
      if (!RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
        return [result description];
      }
      start = self->position_;
    }
    c = IOSCharArray_Get(nil_chk(self->buffer_), self->position_);
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '_' || c == '-' || c == ':' || c == '.' || c >= 0x00b7) {
      self->position_++;
      continue;
    }
    if (result == nil) {
      return [((RenameLibcoreInternalStringPool *) nil_chk(self->stringPool_)) getWithCharArray:self->buffer_ withInt:start withInt:self->position_ - start];
    }
    else {
      [result appendWithCharArray:self->buffer_ withInt:start withInt:self->position_ - start];
      return [result description];
    }
  }
}

void RenameOrgKxml2IoKXmlParser_skip(RenameOrgKxml2IoKXmlParser *self) {
  while (self->position_ < self->limit_ || RenameOrgKxml2IoKXmlParser_fillBufferWithInt_(self, 1)) {
    jint c = IOSCharArray_Get(nil_chk(self->buffer_), self->position_);
    if (c > ' ') {
      break;
    }
    self->position_++;
  }
}

void RenameOrgKxml2IoKXmlParser_pushContentSourceWithCharArray_(RenameOrgKxml2IoKXmlParser *self, IOSCharArray *newBuffer) {
  JreStrongAssignAndConsume(&self->nextContentSource_, new_RenameOrgKxml2IoKXmlParser_ContentSource_initWithRenameOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_(self->nextContentSource_, self->buffer_, self->position_, self->limit_));
  JreStrongAssign(&self->buffer_, newBuffer);
  self->position_ = 0;
  self->limit_ = ((IOSCharArray *) nil_chk(newBuffer))->size_;
}

void RenameOrgKxml2IoKXmlParser_popContentSource(RenameOrgKxml2IoKXmlParser *self) {
  JreStrongAssign(&self->buffer_, ((RenameOrgKxml2IoKXmlParser_ContentSource *) nil_chk(self->nextContentSource_))->buffer_);
  self->position_ = self->nextContentSource_->position_;
  self->limit_ = self->nextContentSource_->limit_;
  JreStrongAssign(&self->nextContentSource_, self->nextContentSource_->next_);
}

void RenameOrgKxml2IoKXmlParser_init(RenameOrgKxml2IoKXmlParser *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->elementStack_, [IOSObjectArray newArrayWithLength:16 type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->nspStack_, [IOSObjectArray newArrayWithLength:8 type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->nspCounts_, [IOSIntArray newArrayWithLength:4]);
  JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:8192]);
  self->position_ = 0;
  self->limit_ = 0;
  JreStrongAssignAndConsume(&self->attributes_, [IOSObjectArray newArrayWithLength:16 type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->stringPool_, new_RenameLibcoreInternalStringPool_init());
}

RenameOrgKxml2IoKXmlParser *new_RenameOrgKxml2IoKXmlParser_init() {
  J2OBJC_NEW_IMPL(RenameOrgKxml2IoKXmlParser, init)
}

RenameOrgKxml2IoKXmlParser *create_RenameOrgKxml2IoKXmlParser_init() {
  J2OBJC_CREATE_IMPL(RenameOrgKxml2IoKXmlParser, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RenameOrgKxml2IoKXmlParser)

J2OBJC_INITIALIZED_DEFN(RenameOrgKxml2IoKXmlParser_ValueContext)

RenameOrgKxml2IoKXmlParser_ValueContext *RenameOrgKxml2IoKXmlParser_ValueContext_values_[3];

@implementation RenameOrgKxml2IoKXmlParser_ValueContext

+ (IOSObjectArray *)values {
  return RenameOrgKxml2IoKXmlParser_ValueContext_values();
}

+ (RenameOrgKxml2IoKXmlParser_ValueContext *)valueOfWithNSString:(NSString *)name {
  return RenameOrgKxml2IoKXmlParser_ValueContext_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LRenameOrgKxml2IoKXmlParser_ValueContext;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRenameOrgKxml2IoKXmlParser_ValueContext;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ATTRIBUTE", "LRenameOrgKxml2IoKXmlParser_ValueContext;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "TEXT", "LRenameOrgKxml2IoKXmlParser_ValueContext;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "ENTITY_DECLARATION", "LRenameOrgKxml2IoKXmlParser_ValueContext;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ATTRIBUTE), &JreEnum(RenameOrgKxml2IoKXmlParser_ValueContext, TEXT), &JreEnum(RenameOrgKxml2IoKXmlParser_ValueContext, ENTITY_DECLARATION), "LRenameOrgKxml2IoKXmlParser;", "Ljava/lang/Enum<Lrename/org/kxml2/io/KXmlParser$ValueContext;>;" };
  static const J2ObjcClassInfo _RenameOrgKxml2IoKXmlParser_ValueContext = { "ValueContext", "rename.org.kxml2.io", ptrTable, methods, fields, 7, 0x4018, 2, 3, 5, -1, -1, 6, -1 };
  return &_RenameOrgKxml2IoKXmlParser_ValueContext;
}

+ (void)initialize {
  if (self == [RenameOrgKxml2IoKXmlParser_ValueContext class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"ATTRIBUTE", @"TEXT", @"ENTITY_DECLARATION",
    };
    for (jint i = 0; i < 3; i++) {
      (RenameOrgKxml2IoKXmlParser_ValueContext_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RenameOrgKxml2IoKXmlParser_ValueContext_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RenameOrgKxml2IoKXmlParser_ValueContext)
  }
}

@end

void RenameOrgKxml2IoKXmlParser_ValueContext_initWithNSString_withInt_(RenameOrgKxml2IoKXmlParser_ValueContext *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RenameOrgKxml2IoKXmlParser_ValueContext_values() {
  RenameOrgKxml2IoKXmlParser_ValueContext_initialize();
  return [IOSObjectArray arrayWithObjects:RenameOrgKxml2IoKXmlParser_ValueContext_values_ count:3 type:RenameOrgKxml2IoKXmlParser_ValueContext_class_()];
}

RenameOrgKxml2IoKXmlParser_ValueContext *RenameOrgKxml2IoKXmlParser_ValueContext_valueOfWithNSString_(NSString *name) {
  RenameOrgKxml2IoKXmlParser_ValueContext_initialize();
  for (int i = 0; i < 3; i++) {
    RenameOrgKxml2IoKXmlParser_ValueContext *e = RenameOrgKxml2IoKXmlParser_ValueContext_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RenameOrgKxml2IoKXmlParser_ValueContext *RenameOrgKxml2IoKXmlParser_ValueContext_fromOrdinal(NSUInteger ordinal) {
  RenameOrgKxml2IoKXmlParser_ValueContext_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return RenameOrgKxml2IoKXmlParser_ValueContext_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RenameOrgKxml2IoKXmlParser_ValueContext)

@implementation RenameOrgKxml2IoKXmlParser_ContentSource

- (instancetype)initWithRenameOrgKxml2IoKXmlParser_ContentSource:(RenameOrgKxml2IoKXmlParser_ContentSource *)next
                                                   withCharArray:(IOSCharArray *)buffer
                                                         withInt:(jint)position
                                                         withInt:(jint)limit {
  RenameOrgKxml2IoKXmlParser_ContentSource_initWithRenameOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_(self, next, buffer, position, limit);
  return self;
}

- (void)dealloc {
  RELEASE_(next_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRenameOrgKxml2IoKXmlParser_ContentSource:withCharArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "next_", "LRenameOrgKxml2IoKXmlParser_ContentSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buffer_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRenameOrgKxml2IoKXmlParser_ContentSource;[CII", "LRenameOrgKxml2IoKXmlParser;" };
  static const J2ObjcClassInfo _RenameOrgKxml2IoKXmlParser_ContentSource = { "ContentSource", "rename.org.kxml2.io", ptrTable, methods, fields, 7, 0x8, 1, 4, 1, -1, -1, -1, -1 };
  return &_RenameOrgKxml2IoKXmlParser_ContentSource;
}

@end

void RenameOrgKxml2IoKXmlParser_ContentSource_initWithRenameOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_(RenameOrgKxml2IoKXmlParser_ContentSource *self, RenameOrgKxml2IoKXmlParser_ContentSource *next, IOSCharArray *buffer, jint position, jint limit) {
  NSObject_init(self);
  JreStrongAssign(&self->next_, next);
  JreStrongAssign(&self->buffer_, buffer);
  self->position_ = position;
  self->limit_ = limit;
}

RenameOrgKxml2IoKXmlParser_ContentSource *new_RenameOrgKxml2IoKXmlParser_ContentSource_initWithRenameOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_(RenameOrgKxml2IoKXmlParser_ContentSource *next, IOSCharArray *buffer, jint position, jint limit) {
  J2OBJC_NEW_IMPL(RenameOrgKxml2IoKXmlParser_ContentSource, initWithRenameOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_, next, buffer, position, limit)
}

RenameOrgKxml2IoKXmlParser_ContentSource *create_RenameOrgKxml2IoKXmlParser_ContentSource_initWithRenameOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_(RenameOrgKxml2IoKXmlParser_ContentSource *next, IOSCharArray *buffer, jint position, jint limit) {
  J2OBJC_CREATE_IMPL(RenameOrgKxml2IoKXmlParser_ContentSource, initWithRenameOrgKxml2IoKXmlParser_ContentSource_withCharArray_withInt_withInt_, next, buffer, position, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RenameOrgKxml2IoKXmlParser_ContentSource)
