//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalSchedulersNewThreadScheduler.h"
#include "RxInternalSchedulersNewThreadWorker.h"
#include "RxScheduler.h"
#include "java/util/concurrent/ThreadFactory.h"

@interface RxInternalSchedulersNewThreadScheduler () {
 @public
  id<JavaUtilConcurrentThreadFactory> threadFactory_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalSchedulersNewThreadScheduler, threadFactory_, id<JavaUtilConcurrentThreadFactory>)

@implementation RxInternalSchedulersNewThreadScheduler

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
  return self;
}

- (RxScheduler_Worker *)createWorker {
  return create_RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(threadFactory_);
}

- (void)dealloc {
  RELEASE_(threadFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentThreadFactory:);
  methods[1].selector = @selector(createWorker);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadFactory_", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentThreadFactory;" };
  static const J2ObjcClassInfo _RxInternalSchedulersNewThreadScheduler = { "NewThreadScheduler", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalSchedulersNewThreadScheduler;
}

@end

void RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(RxInternalSchedulersNewThreadScheduler *self, id<JavaUtilConcurrentThreadFactory> threadFactory) {
  RxScheduler_init(self);
  JreStrongAssign(&self->threadFactory_, threadFactory);
}

RxInternalSchedulersNewThreadScheduler *new_RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersNewThreadScheduler, initWithJavaUtilConcurrentThreadFactory_, threadFactory)
}

RxInternalSchedulersNewThreadScheduler *create_RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersNewThreadScheduler, initWithJavaUtilConcurrentThreadFactory_, threadFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersNewThreadScheduler)
