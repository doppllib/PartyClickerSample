//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler")
#ifdef RESTRICT_RxInternalSchedulersNewThreadScheduler
#define INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler 0
#else
#define INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler 1
#endif
#undef RESTRICT_RxInternalSchedulersNewThreadScheduler

#if !defined (RxInternalSchedulersNewThreadScheduler_) && (INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler || defined(INCLUDE_RxInternalSchedulersNewThreadScheduler))
#define RxInternalSchedulersNewThreadScheduler_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler 1
#include "RxScheduler.h"

@class RxScheduler_Worker;
@protocol JavaUtilConcurrentThreadFactory;

@interface RxInternalSchedulersNewThreadScheduler : RxScheduler

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (RxScheduler_Worker *)createWorker;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersNewThreadScheduler)

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(RxInternalSchedulersNewThreadScheduler *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT RxInternalSchedulersNewThreadScheduler *new_RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersNewThreadScheduler *create_RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersNewThreadScheduler)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler")
