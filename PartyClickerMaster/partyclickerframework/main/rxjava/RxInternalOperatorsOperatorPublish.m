//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsNotificationLite.h"
#include "RxInternalOperatorsOnSubscribePublishMulticast.h"
#include "RxInternalOperatorsOperatorPublish.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxInternalUtilSynchronizedQueue.h"
#include "RxInternalUtilUnsafeSpscArrayQueue.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "RxObservable.h"
#include "RxObservablesConnectableObservable.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface RxInternalOperatorsOperatorPublish ()

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
                                withRxObservable:(RxObservable *)source
     withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current;

@end

__attribute__((unused)) static void RxInternalOperatorsOperatorPublish_initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorPublish *self, id<RxObservable_OnSubscribe> onSubscribe, RxObservable *source, JavaUtilConcurrentAtomicAtomicReference *current);

__attribute__((unused)) static RxInternalOperatorsOperatorPublish *new_RxInternalOperatorsOperatorPublish_initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_(id<RxObservable_OnSubscribe> onSubscribe, RxObservable *source, JavaUtilConcurrentAtomicAtomicReference *current) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublish *create_RxInternalOperatorsOperatorPublish_initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_(id<RxObservable_OnSubscribe> onSubscribe, RxObservable *source, JavaUtilConcurrentAtomicAtomicReference *current);

@interface RxInternalOperatorsOperatorPublish_1 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$curr_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

- (void)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublish_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorPublish_1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublish_1 *new_RxInternalOperatorsOperatorPublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublish_1 *create_RxInternalOperatorsOperatorPublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxInternalOperatorsOperatorPublish_2 : NSObject < RxObservable_OnSubscribe > {
 @public
  jboolean val$delayError_;
  id<RxFunctionsFunc1> val$selector_;
  RxObservable *val$source_;
}

- (instancetype)initWithBoolean:(jboolean)capture$0
           withRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$1
               withRxObservable:(RxObservable *)capture$2;

- (void)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublish_2)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublish_2_initWithBoolean_withRxFunctionsFunc1_withRxObservable_(RxInternalOperatorsOperatorPublish_2 *self, jboolean capture$0, id<RxFunctionsFunc1> capture$1, RxObservable *capture$2);

__attribute__((unused)) static RxInternalOperatorsOperatorPublish_2 *new_RxInternalOperatorsOperatorPublish_2_initWithBoolean_withRxFunctionsFunc1_withRxObservable_(jboolean capture$0, id<RxFunctionsFunc1> capture$1, RxObservable *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublish_2 *create_RxInternalOperatorsOperatorPublish_2_initWithBoolean_withRxFunctionsFunc1_withRxObservable_(jboolean capture$0, id<RxFunctionsFunc1> capture$1, RxObservable *capture$2);

@interface RxInternalOperatorsOperatorPublish_2_1 : RxSubscriber {
 @public
  RxSubscriber *val$child_;
  RxInternalOperatorsOnSubscribePublishMulticast *val$op_;
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
withRxInternalOperatorsOnSubscribePublishMulticast:(RxInternalOperatorsOnSubscribePublishMulticast *)capture$1;

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublish_2_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublish_2_1_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOperatorPublish_2_1 *self, RxSubscriber *capture$0, RxInternalOperatorsOnSubscribePublishMulticast *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorPublish_2_1 *new_RxInternalOperatorsOperatorPublish_2_1_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *capture$0, RxInternalOperatorsOnSubscribePublishMulticast *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublish_2_1 *create_RxInternalOperatorsOperatorPublish_2_1_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *capture$0, RxInternalOperatorsOnSubscribePublishMulticast *capture$1);

@interface RxInternalOperatorsOperatorPublish_PublishSubscriber_1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorPublish_PublishSubscriber *this$0_;
}

- (instancetype)initWithRxInternalOperatorsOperatorPublish_PublishSubscriber:(RxInternalOperatorsOperatorPublish_PublishSubscriber *)outer$;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublish_PublishSubscriber_1)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublish_PublishSubscriber_1_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_(RxInternalOperatorsOperatorPublish_PublishSubscriber_1 *self, RxInternalOperatorsOperatorPublish_PublishSubscriber *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorPublish_PublishSubscriber_1 *new_RxInternalOperatorsOperatorPublish_PublishSubscriber_1_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_(RxInternalOperatorsOperatorPublish_PublishSubscriber *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublish_PublishSubscriber_1 *create_RxInternalOperatorsOperatorPublish_PublishSubscriber_1_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_(RxInternalOperatorsOperatorPublish_PublishSubscriber *outer$);

inline jlong RxInternalOperatorsOperatorPublish_InnerProducer_get_serialVersionUID();
#define RxInternalOperatorsOperatorPublish_InnerProducer_serialVersionUID -4453897557930727610LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsOperatorPublish_InnerProducer, serialVersionUID, jlong)

@implementation RxInternalOperatorsOperatorPublish

+ (RxObservablesConnectableObservable *)createWithRxObservable:(RxObservable *)source {
  return RxInternalOperatorsOperatorPublish_createWithRxObservable_(source);
}

+ (RxObservable *)createWithRxObservable:(RxObservable *)source
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)selector {
  return RxInternalOperatorsOperatorPublish_createWithRxObservable_withRxFunctionsFunc1_(source, selector);
}

+ (RxObservable *)createWithRxObservable:(RxObservable *)source
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)selector
                             withBoolean:(jboolean)delayError {
  return RxInternalOperatorsOperatorPublish_createWithRxObservable_withRxFunctionsFunc1_withBoolean_(source, selector, delayError);
}

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
                                withRxObservable:(RxObservable *)source
     withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current {
  RxInternalOperatorsOperatorPublish_initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_(self, onSubscribe, source, current);
  return self;
}

- (void)connectWithRxFunctionsAction1:(id<RxFunctionsAction1>)connection {
  jboolean doConnect;
  RxInternalOperatorsOperatorPublish_PublishSubscriber *ps;
  for (; ; ) {
    ps = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) get];
    if (ps == nil || [ps isUnsubscribed]) {
      RxInternalOperatorsOperatorPublish_PublishSubscriber *u = create_RxInternalOperatorsOperatorPublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_(current_);
      [u init__];
      if (![current_ compareAndSetWithId:ps withId:u]) {
        continue;
      }
      ps = u;
    }
    doConnect = (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(ps->shouldConnect_)) get] && [ps->shouldConnect_ compareAndSetWithBoolean:false withBoolean:true]);
    break;
  }
  [((id<RxFunctionsAction1>) nil_chk(connection)) callWithId:ps];
  if (doConnect) {
    [((RxObservable *) nil_chk(source_)) unsafeSubscribeWithRxSubscriber:ps];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesConnectableObservable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LRxObservable;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "LRxObservable;", 0x9, 0, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x2, -1, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithRxObservable:);
  methods[1].selector = @selector(createWithRxObservable:withRxFunctionsFunc1:);
  methods[2].selector = @selector(createWithRxObservable:withRxFunctionsFunc1:withBoolean:);
  methods[3].selector = @selector(initWithRxObservable_OnSubscribe:withRxObservable:withJavaUtilConcurrentAtomicAtomicReference:);
  methods[4].selector = @selector(connectWithRxFunctionsAction1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxObservable;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "create", "LRxObservable;", "<T:Ljava/lang/Object;>(Lrx/Observable<+TT;>;)Lrx/observables/ConnectableObservable<TT;>;", "LRxObservable;LRxFunctionsFunc1;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lrx/Observable<+TT;>;Lrx/functions/Func1<-Lrx/Observable<TT;>;+Lrx/Observable<TR;>;>;)Lrx/Observable<TR;>;", "LRxObservable;LRxFunctionsFunc1;Z", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lrx/Observable<+TT;>;Lrx/functions/Func1<-Lrx/Observable<TT;>;+Lrx/Observable<TR;>;>;Z)Lrx/Observable<TR;>;", "LRxObservable_OnSubscribe;LRxObservable;LJavaUtilConcurrentAtomicAtomicReference;", "(Lrx/Observable$OnSubscribe<TT;>;Lrx/Observable<+TT;>;Ljava/util/concurrent/atomic/AtomicReference<Lrx/internal/operators/OperatorPublish$PublishSubscriber<TT;>;>;)V", "connect", "LRxFunctionsAction1;", "(Lrx/functions/Action1<-Lrx/Subscription;>;)V", "Lrx/Observable<+TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/internal/operators/OperatorPublish$PublishSubscriber<TT;>;>;", "LRxInternalOperatorsOperatorPublish_PublishSubscriber;LRxInternalOperatorsOperatorPublish_InnerProducer;", "<T:Ljava/lang/Object;>Lrx/observables/ConnectableObservable<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublish = { "OperatorPublish", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, 14, -1, 15, -1 };
  return &_RxInternalOperatorsOperatorPublish;
}

@end

RxObservablesConnectableObservable *RxInternalOperatorsOperatorPublish_createWithRxObservable_(RxObservable *source) {
  RxInternalOperatorsOperatorPublish_initialize();
  JavaUtilConcurrentAtomicAtomicReference *curr = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxObservable_OnSubscribe> onSubscribe = create_RxInternalOperatorsOperatorPublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_(curr);
  return create_RxInternalOperatorsOperatorPublish_initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_(onSubscribe, source, curr);
}

RxObservable *RxInternalOperatorsOperatorPublish_createWithRxObservable_withRxFunctionsFunc1_(RxObservable *source, id<RxFunctionsFunc1> selector) {
  RxInternalOperatorsOperatorPublish_initialize();
  return RxInternalOperatorsOperatorPublish_createWithRxObservable_withRxFunctionsFunc1_withBoolean_(source, selector, false);
}

RxObservable *RxInternalOperatorsOperatorPublish_createWithRxObservable_withRxFunctionsFunc1_withBoolean_(RxObservable *source, id<RxFunctionsFunc1> selector, jboolean delayError) {
  RxInternalOperatorsOperatorPublish_initialize();
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorPublish_2_initWithBoolean_withRxFunctionsFunc1_withRxObservable_(delayError, selector, source));
}

void RxInternalOperatorsOperatorPublish_initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorPublish *self, id<RxObservable_OnSubscribe> onSubscribe, RxObservable *source, JavaUtilConcurrentAtomicAtomicReference *current) {
  RxObservablesConnectableObservable_initWithRxObservable_OnSubscribe_(self, onSubscribe);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->current_, current);
}

RxInternalOperatorsOperatorPublish *new_RxInternalOperatorsOperatorPublish_initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_(id<RxObservable_OnSubscribe> onSubscribe, RxObservable *source, JavaUtilConcurrentAtomicAtomicReference *current) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublish, initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_, onSubscribe, source, current)
}

RxInternalOperatorsOperatorPublish *create_RxInternalOperatorsOperatorPublish_initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_(id<RxObservable_OnSubscribe> onSubscribe, RxObservable *source, JavaUtilConcurrentAtomicAtomicReference *current) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublish, initWithRxObservable_OnSubscribe_withRxObservable_withJavaUtilConcurrentAtomicAtomicReference_, onSubscribe, source, current)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorPublish)

@implementation RxInternalOperatorsOperatorPublish_1

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxInternalOperatorsOperatorPublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)callWithId:(RxSubscriber *)child {
  for (; ; ) {
    RxInternalOperatorsOperatorPublish_PublishSubscriber *r = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$curr_)) get];
    if (r == nil || [r isUnsubscribed]) {
      RxInternalOperatorsOperatorPublish_PublishSubscriber *u = create_RxInternalOperatorsOperatorPublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_(val$curr_);
      [u init__];
      if (![val$curr_ compareAndSetWithId:r withId:u]) {
        continue;
      }
      r = u;
    }
    RxInternalOperatorsOperatorPublish_InnerProducer *inner = create_RxInternalOperatorsOperatorPublish_InnerProducer_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_withRxSubscriber_(r, child);
    if ([r addWithRxInternalOperatorsOperatorPublish_InnerProducer:inner]) {
      [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:inner];
      [child setProducerWithRxProducer:inner];
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(val$curr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$curr_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/internal/operators/OperatorPublish$PublishSubscriber<TT;>;>;", "LRxInternalOperatorsOperatorPublish;", "createWithRxObservable:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublish_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorPublish_1;
}

@end

void RxInternalOperatorsOperatorPublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorPublish_1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$curr_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublish_1 *new_RxInternalOperatorsOperatorPublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublish_1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxInternalOperatorsOperatorPublish_1 *create_RxInternalOperatorsOperatorPublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublish_1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublish_2

- (instancetype)initWithBoolean:(jboolean)capture$0
           withRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$1
               withRxObservable:(RxObservable *)capture$2 {
  RxInternalOperatorsOperatorPublish_2_initWithBoolean_withRxFunctionsFunc1_withRxObservable_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)callWithId:(RxSubscriber *)child {
  RxInternalOperatorsOnSubscribePublishMulticast *op = create_RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE), val$delayError_);
  RxSubscriber *subscriber = create_RxInternalOperatorsOperatorPublish_2_1_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(child, op);
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:op];
  [child addWithRxSubscription:subscriber];
  [((RxObservable *) nil_chk([((id<RxFunctionsFunc1>) nil_chk(val$selector_)) callWithId:RxObservable_createWithRxObservable_OnSubscribe_(op)])) unsafeSubscribeWithRxSubscriber:subscriber];
  [((RxObservable *) nil_chk(val$source_)) unsafeSubscribeWithRxSubscriber:[op subscriber]];
}

- (void)dealloc {
  RELEASE_(val$selector_);
  RELEASE_(val$source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withRxFunctionsFunc1:withRxObservable:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$delayError_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$selector_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$source_", "LRxObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-TR;>;)V", "Lrx/functions/Func1<-Lrx/Observable<TT;>;+Lrx/Observable<TR;>;>;", "Lrx/Observable<+TT;>;", "LRxInternalOperatorsOperatorPublish;", "createWithRxObservable:withRxFunctionsFunc1:withBoolean:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublish_2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 3, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorPublish_2;
}

@end

void RxInternalOperatorsOperatorPublish_2_initWithBoolean_withRxFunctionsFunc1_withRxObservable_(RxInternalOperatorsOperatorPublish_2 *self, jboolean capture$0, id<RxFunctionsFunc1> capture$1, RxObservable *capture$2) {
  self->val$delayError_ = capture$0;
  JreStrongAssign(&self->val$selector_, capture$1);
  JreStrongAssign(&self->val$source_, capture$2);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublish_2 *new_RxInternalOperatorsOperatorPublish_2_initWithBoolean_withRxFunctionsFunc1_withRxObservable_(jboolean capture$0, id<RxFunctionsFunc1> capture$1, RxObservable *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublish_2, initWithBoolean_withRxFunctionsFunc1_withRxObservable_, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOperatorPublish_2 *create_RxInternalOperatorsOperatorPublish_2_initWithBoolean_withRxFunctionsFunc1_withRxObservable_(jboolean capture$0, id<RxFunctionsFunc1> capture$1, RxObservable *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublish_2, initWithBoolean_withRxFunctionsFunc1_withRxObservable_, capture$0, capture$1, capture$2)
}

@implementation RxInternalOperatorsOperatorPublish_2_1

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
withRxInternalOperatorsOnSubscribePublishMulticast:(RxInternalOperatorsOnSubscribePublishMulticast *)capture$1 {
  RxInternalOperatorsOperatorPublish_2_1_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(self, capture$0, capture$1);
  return self;
}

- (void)onNextWithId:(id)t {
  [((RxSubscriber *) nil_chk(val$child_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxInternalOperatorsOnSubscribePublishMulticast *) nil_chk(val$op_)) unsubscribe];
  [((RxSubscriber *) nil_chk(val$child_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((RxInternalOperatorsOnSubscribePublishMulticast *) nil_chk(val$op_)) unsubscribe];
  [((RxSubscriber *) nil_chk(val$child_)) onCompleted];
}

- (void)setProducerWithRxProducer:(id<RxProducer>)p {
  [((RxSubscriber *) nil_chk(val$child_)) setProducerWithRxProducer:p];
}

- (void)dealloc {
  RELEASE_(val$child_);
  RELEASE_(val$op_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:withRxInternalOperatorsOnSubscribePublishMulticast:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(setProducerWithRxProducer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$op_", "LRxInternalOperatorsOnSubscribePublishMulticast;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSObject;", "(TR;)V", "onError", "LNSException;", "setProducer", "LRxProducer;", "Lrx/Subscriber<-TR;>;", "Lrx/internal/operators/OnSubscribePublishMulticast<TT;>;", "LRxInternalOperatorsOperatorPublish_2;", "callWithId:", "Lrx/Subscriber<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublish_2_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 5, 2, 9, -1, 10, 11, -1 };
  return &_RxInternalOperatorsOperatorPublish_2_1;
}

@end

void RxInternalOperatorsOperatorPublish_2_1_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOperatorPublish_2_1 *self, RxSubscriber *capture$0, RxInternalOperatorsOnSubscribePublishMulticast *capture$1) {
  JreStrongAssign(&self->val$child_, capture$0);
  JreStrongAssign(&self->val$op_, capture$1);
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorPublish_2_1 *new_RxInternalOperatorsOperatorPublish_2_1_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *capture$0, RxInternalOperatorsOnSubscribePublishMulticast *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublish_2_1, initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_, capture$0, capture$1)
}

RxInternalOperatorsOperatorPublish_2_1 *create_RxInternalOperatorsOperatorPublish_2_1_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *capture$0, RxInternalOperatorsOnSubscribePublishMulticast *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublish_2_1, initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_, capture$0, capture$1)
}

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorPublish_PublishSubscriber)

IOSObjectArray *RxInternalOperatorsOperatorPublish_PublishSubscriber_EMPTY;
IOSObjectArray *RxInternalOperatorsOperatorPublish_PublishSubscriber_TERMINATED;

@implementation RxInternalOperatorsOperatorPublish_PublishSubscriber

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current {
  RxInternalOperatorsOperatorPublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_(self, current);
  return self;
}

- (void)init__ {
  [self addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOperatorPublish_PublishSubscriber_1_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_(self))];
}

- (void)onStart {
  [self requestWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
}

- (void)onNextWithId:(id)t {
  if (![((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:RxInternalOperatorsNotificationLite_nextWithId_(t)]) {
    [self onErrorWithNSException:create_RxExceptionsMissingBackpressureException_init()];
  }
  else {
    [self dispatch];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  if (JreLoadVolatileId(&terminalEvent_) == nil) {
    JreVolatileStrongAssign(&terminalEvent_, RxInternalOperatorsNotificationLite_errorWithNSException_(e));
    [self dispatch];
  }
}

- (void)onCompleted {
  if (JreLoadVolatileId(&terminalEvent_) == nil) {
    JreVolatileStrongAssign(&terminalEvent_, RxInternalOperatorsNotificationLite_completed());
    [self dispatch];
  }
}

- (jboolean)addWithRxInternalOperatorsOperatorPublish_InnerProducer:(RxInternalOperatorsOperatorPublish_InnerProducer *)producer {
  if (producer == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(producers_)) get];
    if (c == RxInternalOperatorsOperatorPublish_PublishSubscriber_TERMINATED) {
      return false;
    }
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    IOSObjectArray *u = [IOSObjectArray arrayWithLength:len + 1 type:RxInternalOperatorsOperatorPublish_InnerProducer_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, len);
    IOSObjectArray_Set(u, len, producer);
    if ([producers_ compareAndSetWithId:c withId:u]) {
      return true;
    }
  }
}

- (void)removeWithRxInternalOperatorsOperatorPublish_InnerProducer:(RxInternalOperatorsOperatorPublish_InnerProducer *)producer {
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(producers_)) get];
    if (c == RxInternalOperatorsOperatorPublish_PublishSubscriber_EMPTY || c == RxInternalOperatorsOperatorPublish_PublishSubscriber_TERMINATED) {
      return;
    }
    jint j = -1;
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    for (jint i = 0; i < len; i++) {
      if ([((RxInternalOperatorsOperatorPublish_InnerProducer *) nil_chk(IOSObjectArray_Get(c, i))) isEqual:producer]) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *u;
    if (len == 1) {
      u = RxInternalOperatorsOperatorPublish_PublishSubscriber_EMPTY;
    }
    else {
      u = [IOSObjectArray arrayWithLength:len - 1 type:RxInternalOperatorsOperatorPublish_InnerProducer_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, j + 1, u, j, len - j - 1);
    }
    if ([producers_ compareAndSetWithId:c withId:u]) {
      return;
    }
  }
}

- (jboolean)checkTerminatedWithId:(id)term
                      withBoolean:(jboolean)empty {
  if (term != nil) {
    if (RxInternalOperatorsNotificationLite_isCompletedWithId_(term)) {
      if (empty) {
        [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) compareAndSetWithId:self withId:nil];
        @try {
          {
            IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(producers_)) getAndSetWithId:RxInternalOperatorsOperatorPublish_PublishSubscriber_TERMINATED];
            RxInternalOperatorsOperatorPublish_InnerProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            RxInternalOperatorsOperatorPublish_InnerProducer * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              RxInternalOperatorsOperatorPublish_InnerProducer *ip = *b__++;
              [((RxSubscriber *) nil_chk(((RxInternalOperatorsOperatorPublish_InnerProducer *) nil_chk(ip))->child_)) onCompleted];
            }
          }
        }
        @finally {
          [self unsubscribe];
        }
        return true;
      }
    }
    else {
      NSException *t = RxInternalOperatorsNotificationLite_getErrorWithId_(term);
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) compareAndSetWithId:self withId:nil];
      @try {
        {
          IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(producers_)) getAndSetWithId:RxInternalOperatorsOperatorPublish_PublishSubscriber_TERMINATED];
          RxInternalOperatorsOperatorPublish_InnerProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          RxInternalOperatorsOperatorPublish_InnerProducer * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            RxInternalOperatorsOperatorPublish_InnerProducer *ip = *b__++;
            [((RxSubscriber *) nil_chk(((RxInternalOperatorsOperatorPublish_InnerProducer *) nil_chk(ip))->child_)) onErrorWithNSException:t];
          }
        }
      }
      @finally {
        [self unsubscribe];
      }
      return true;
    }
  }
  return false;
}

- (void)dispatch {
  @synchronized(self) {
    if (emitting_) {
      missed_ = true;
      return;
    }
    emitting_ = true;
    missed_ = false;
  }
  jboolean skipFinal = false;
  @try {
    for (; ; ) {
      id term = JreLoadVolatileId(&terminalEvent_);
      jboolean empty = [((id<JavaUtilQueue>) nil_chk(queue_)) isEmpty];
      if ([self checkTerminatedWithId:term withBoolean:empty]) {
        skipFinal = true;
        return;
      }
      if (!empty) {
        IOSObjectArray *ps = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(producers_)) get];
        jint len = ((IOSObjectArray *) nil_chk(ps))->size_;
        jlong maxRequested = JavaLangLong_MAX_VALUE;
        jint unsubscribed = 0;
        {
          IOSObjectArray *a__ = ps;
          RxInternalOperatorsOperatorPublish_InnerProducer * const *b__ = a__->buffer_;
          RxInternalOperatorsOperatorPublish_InnerProducer * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            RxInternalOperatorsOperatorPublish_InnerProducer *ip = *b__++;
            jlong r = [((RxInternalOperatorsOperatorPublish_InnerProducer *) nil_chk(ip)) get];
            if (r >= 0LL) {
              maxRequested = JavaLangMath_minWithLong_withLong_(maxRequested, r);
            }
            else if (r == RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED) {
              unsubscribed++;
            }
          }
        }
        if (len == unsubscribed) {
          term = JreLoadVolatileId(&terminalEvent_);
          id v = [queue_ poll];
          if ([self checkTerminatedWithId:term withBoolean:v == nil]) {
            skipFinal = true;
            return;
          }
          [self requestWithLong:1];
          continue;
        }
        jint d = 0;
        while (d < maxRequested) {
          term = JreLoadVolatileId(&terminalEvent_);
          id v = [queue_ poll];
          empty = (v == nil);
          if ([self checkTerminatedWithId:term withBoolean:empty]) {
            skipFinal = true;
            return;
          }
          if (empty) {
            break;
          }
          id value = RxInternalOperatorsNotificationLite_getValueWithId_(v);
          {
            IOSObjectArray *a__ = ps;
            RxInternalOperatorsOperatorPublish_InnerProducer * const *b__ = a__->buffer_;
            RxInternalOperatorsOperatorPublish_InnerProducer * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              RxInternalOperatorsOperatorPublish_InnerProducer *ip = *b__++;
              if ([((RxInternalOperatorsOperatorPublish_InnerProducer *) nil_chk(ip)) get] > 0LL) {
                @try {
                  [((RxSubscriber *) nil_chk(ip->child_)) onNextWithId:value];
                }
                @catch (NSException *t) {
                  [ip unsubscribe];
                  RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_withId_(t, ip->child_, value);
                  continue;
                }
                [ip producedWithLong:1];
              }
            }
          }
          d++;
        }
        if (d > 0) {
          [self requestWithLong:d];
        }
        if (maxRequested != 0LL && !empty) {
          continue;
        }
      }
      @synchronized(self) {
        if (!missed_) {
          emitting_ = false;
          skipFinal = true;
          return;
        }
        missed_ = false;
      }
    }
  }
  @finally {
    if (!skipFinal) {
      @synchronized(self) {
        emitting_ = false;
      }
    }
  }
}

- (void)__javaClone:(RxInternalOperatorsOperatorPublish_PublishSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&terminalEvent_, &original->terminalEvent_);
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(current_);
  JreReleaseVolatile(&terminalEvent_);
  RELEASE_(producers_);
  RELEASE_(shouldConnect_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x0, 11, 9, -1, 12, -1, -1 },
    { NULL, "Z", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(onStart);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(onErrorWithNSException:);
  methods[5].selector = @selector(onCompleted);
  methods[6].selector = @selector(addWithRxInternalOperatorsOperatorPublish_InnerProducer:);
  methods[7].selector = @selector(removeWithRxInternalOperatorsOperatorPublish_InnerProducer:);
  methods[8].selector = @selector(checkTerminatedWithId:withBoolean:);
  methods[9].selector = @selector(dispatch);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "terminalEvent_", "LNSObject;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "EMPTY", "[LRxInternalOperatorsOperatorPublish_InnerProducer;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "TERMINATED", "[LRxInternalOperatorsOperatorPublish_InnerProducer;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "producers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "shouldConnect_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "missed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/internal/operators/OperatorPublish$PublishSubscriber<TT;>;>;)V", "init", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "add", "LRxInternalOperatorsOperatorPublish_InnerProducer;", "(Lrx/internal/operators/OperatorPublish$InnerProducer<TT;>;)Z", "remove", "(Lrx/internal/operators/OperatorPublish$InnerProducer<TT;>;)V", "checkTerminated", "LNSObject;Z", "Ljava/util/Queue<Ljava/lang/Object;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/internal/operators/OperatorPublish$PublishSubscriber<TT;>;>;", &RxInternalOperatorsOperatorPublish_PublishSubscriber_EMPTY, &RxInternalOperatorsOperatorPublish_PublishSubscriber_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<[Lrx/internal/operators/OperatorPublish$InnerProducer;>;", "LRxInternalOperatorsOperatorPublish;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublish_PublishSubscriber = { "PublishSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 10, 9, 20, -1, -1, 21, -1 };
  return &_RxInternalOperatorsOperatorPublish_PublishSubscriber;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorPublish_PublishSubscriber class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorPublish_PublishSubscriber_EMPTY, [IOSObjectArray newArrayWithLength:0 type:RxInternalOperatorsOperatorPublish_InnerProducer_class_()]);
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorPublish_PublishSubscriber_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:RxInternalOperatorsOperatorPublish_InnerProducer_class_()]);
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorPublish_PublishSubscriber)
  }
}

@end

void RxInternalOperatorsOperatorPublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorPublish_PublishSubscriber *self, JavaUtilConcurrentAtomicAtomicReference *current) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->queue_, RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable() ? create_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)) : (id) create_RxInternalUtilSynchronizedQueue_initWithInt_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)));
  JreStrongAssignAndConsume(&self->producers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(RxInternalOperatorsOperatorPublish_PublishSubscriber_EMPTY));
  JreStrongAssign(&self->current_, current);
  JreStrongAssignAndConsume(&self->shouldConnect_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

RxInternalOperatorsOperatorPublish_PublishSubscriber *new_RxInternalOperatorsOperatorPublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *current) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublish_PublishSubscriber, initWithJavaUtilConcurrentAtomicAtomicReference_, current)
}

RxInternalOperatorsOperatorPublish_PublishSubscriber *create_RxInternalOperatorsOperatorPublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *current) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublish_PublishSubscriber, initWithJavaUtilConcurrentAtomicAtomicReference_, current)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorPublish_PublishSubscriber)

@implementation RxInternalOperatorsOperatorPublish_PublishSubscriber_1

- (instancetype)initWithRxInternalOperatorsOperatorPublish_PublishSubscriber:(RxInternalOperatorsOperatorPublish_PublishSubscriber *)outer$ {
  RxInternalOperatorsOperatorPublish_PublishSubscriber_1_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_(self, outer$);
  return self;
}

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(this$0_->producers_)) getAndSetWithId:JreLoadStatic(RxInternalOperatorsOperatorPublish_PublishSubscriber, TERMINATED)];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(this$0_->current_)) compareAndSetWithId:this$0_ withId:nil];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorPublish_PublishSubscriber:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorPublish_PublishSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Lrx/internal/operators/OperatorPublish$PublishSubscriber<TT;>;", "LRxInternalOperatorsOperatorPublish_PublishSubscriber;", "init__" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublish_PublishSubscriber_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorPublish_PublishSubscriber_1;
}

@end

void RxInternalOperatorsOperatorPublish_PublishSubscriber_1_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_(RxInternalOperatorsOperatorPublish_PublishSubscriber_1 *self, RxInternalOperatorsOperatorPublish_PublishSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublish_PublishSubscriber_1 *new_RxInternalOperatorsOperatorPublish_PublishSubscriber_1_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_(RxInternalOperatorsOperatorPublish_PublishSubscriber *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublish_PublishSubscriber_1, initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_, outer$)
}

RxInternalOperatorsOperatorPublish_PublishSubscriber_1 *create_RxInternalOperatorsOperatorPublish_PublishSubscriber_1_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_(RxInternalOperatorsOperatorPublish_PublishSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublish_PublishSubscriber_1, initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_, outer$)
}

@implementation RxInternalOperatorsOperatorPublish_InnerProducer

- (instancetype)initWithRxInternalOperatorsOperatorPublish_PublishSubscriber:(RxInternalOperatorsOperatorPublish_PublishSubscriber *)parent
                                                            withRxSubscriber:(RxSubscriber *)child {
  RxInternalOperatorsOperatorPublish_InnerProducer_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_withRxSubscriber_(self, parent, child);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (n < 0) {
    return;
  }
  for (; ; ) {
    jlong r = [self get];
    if (r == RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED) {
      return;
    }
    if (r >= 0LL && n == 0) {
      return;
    }
    jlong u;
    if (r == RxInternalOperatorsOperatorPublish_InnerProducer_NOT_REQUESTED) {
      u = n;
    }
    else {
      u = r + n;
      if (u < 0) {
        u = JavaLangLong_MAX_VALUE;
      }
    }
    if ([self compareAndSetWithLong:r withLong:u]) {
      [((RxInternalOperatorsOperatorPublish_PublishSubscriber *) nil_chk(parent_)) dispatch];
      return;
    }
  }
}

- (jlong)producedWithLong:(jlong)n {
  if (n <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cant produce zero or less");
  }
  for (; ; ) {
    jlong r = [self get];
    if (r == RxInternalOperatorsOperatorPublish_InnerProducer_NOT_REQUESTED) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Produced without request");
    }
    if (r == RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED) {
      return RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED;
    }
    jlong u = r - n;
    if (u < 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$J$JC", @"More produced (", n, @") than requested (", r, ')'));
    }
    if ([self compareAndSetWithLong:r withLong:u]) {
      return u;
    }
  }
}

- (jboolean)isUnsubscribed {
  return [self get] == RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED;
}

- (void)unsubscribe {
  jlong r = [self get];
  if (r != RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED) {
    r = [self getAndSetWithLong:RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED];
    if (r != RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED) {
      [((RxInternalOperatorsOperatorPublish_PublishSubscriber *) nil_chk(parent_)) removeWithRxInternalOperatorsOperatorPublish_InnerProducer:self];
      [parent_ dispatch];
    }
  }
}

- (void)__javaClone:(RxInternalOperatorsOperatorPublish_InnerProducer *)original {
  [super __javaClone:original];
  [child_ release];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorPublish_PublishSubscriber:withRxSubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(producedWithLong:);
  methods[3].selector = @selector(isUnsubscribed);
  methods[4].selector = @selector(unsubscribe);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalOperatorsOperatorPublish_InnerProducer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LRxInternalOperatorsOperatorPublish_PublishSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "UNSUBSCRIBED", "J", .constantValue.asLong = RxInternalOperatorsOperatorPublish_InnerProducer_UNSUBSCRIBED, 0x18, -1, -1, -1, -1 },
    { "NOT_REQUESTED", "J", .constantValue.asLong = RxInternalOperatorsOperatorPublish_InnerProducer_NOT_REQUESTED, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorPublish_PublishSubscriber;LRxSubscriber;", "(Lrx/internal/operators/OperatorPublish$PublishSubscriber<TT;>;Lrx/Subscriber<-TT;>;)V", "request", "J", "produced", "Lrx/internal/operators/OperatorPublish$PublishSubscriber<TT;>;", "Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOperatorPublish;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicLong;Lrx/Producer;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublish_InnerProducer = { "InnerProducer", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 5, 5, 7, -1, -1, 8, -1 };
  return &_RxInternalOperatorsOperatorPublish_InnerProducer;
}

@end

void RxInternalOperatorsOperatorPublish_InnerProducer_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorPublish_InnerProducer *self, RxInternalOperatorsOperatorPublish_PublishSubscriber *parent, RxSubscriber *child) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->child_ = child;
  [self lazySetWithLong:RxInternalOperatorsOperatorPublish_InnerProducer_NOT_REQUESTED];
}

RxInternalOperatorsOperatorPublish_InnerProducer *new_RxInternalOperatorsOperatorPublish_InnerProducer_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorPublish_PublishSubscriber *parent, RxSubscriber *child) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublish_InnerProducer, initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_withRxSubscriber_, parent, child)
}

RxInternalOperatorsOperatorPublish_InnerProducer *create_RxInternalOperatorsOperatorPublish_InnerProducer_initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorPublish_PublishSubscriber *parent, RxSubscriber *child) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublish_InnerProducer, initWithRxInternalOperatorsOperatorPublish_PublishSubscriber_withRxSubscriber_, parent, child)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorPublish_InnerProducer)
