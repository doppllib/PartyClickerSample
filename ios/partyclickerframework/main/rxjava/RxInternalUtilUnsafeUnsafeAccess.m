//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InternalError.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/reflect/Field.h"
#include "sun/misc/Unsafe.h"

@interface RxInternalUtilUnsafeUnsafeAccess ()

- (instancetype)init;

@end

inline jboolean RxInternalUtilUnsafeUnsafeAccess_get_DISABLED_BY_USER();
#define RxInternalUtilUnsafeUnsafeAccess_DISABLED_BY_USER true
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalUtilUnsafeUnsafeAccess, DISABLED_BY_USER, jboolean)

__attribute__((unused)) static void RxInternalUtilUnsafeUnsafeAccess_init(RxInternalUtilUnsafeUnsafeAccess *self);

__attribute__((unused)) static RxInternalUtilUnsafeUnsafeAccess *new_RxInternalUtilUnsafeUnsafeAccess_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilUnsafeUnsafeAccess *create_RxInternalUtilUnsafeUnsafeAccess_init();

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUnsafeUnsafeAccess)

SunMiscUnsafe *RxInternalUtilUnsafeUnsafeAccess_UNSAFE;

@implementation RxInternalUtilUnsafeUnsafeAccess

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUnsafeUnsafeAccess_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isUnsafeAvailable {
  return RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable();
}

+ (jint)getAndIncrementIntWithId:(id)obj
                        withLong:(jlong)offset {
  return RxInternalUtilUnsafeUnsafeAccess_getAndIncrementIntWithId_withLong_(obj, offset);
}

+ (jint)getAndAddIntWithId:(id)obj
                  withLong:(jlong)offset
                   withInt:(jint)n {
  return RxInternalUtilUnsafeUnsafeAccess_getAndAddIntWithId_withLong_withInt_(obj, offset, n);
}

+ (jint)getAndSetIntWithId:(id)obj
                  withLong:(jlong)offset
                   withInt:(jint)newValue {
  return RxInternalUtilUnsafeUnsafeAccess_getAndSetIntWithId_withLong_withInt_(obj, offset, newValue);
}

+ (jboolean)compareAndSwapIntWithId:(id)obj
                           withLong:(jlong)offset
                            withInt:(jint)expected
                            withInt:(jint)newValue {
  return RxInternalUtilUnsafeUnsafeAccess_compareAndSwapIntWithId_withLong_withInt_withInt_(obj, offset, expected, newValue);
}

+ (jlong)addressOfWithIOSClass:(IOSClass *)clazz
                  withNSString:(NSString *)fieldName {
  return RxInternalUtilUnsafeUnsafeAccess_addressOfWithIOSClass_withNSString_(clazz, fieldName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isUnsafeAvailable);
  methods[2].selector = @selector(getAndIncrementIntWithId:withLong:);
  methods[3].selector = @selector(getAndAddIntWithId:withLong:withInt:);
  methods[4].selector = @selector(getAndSetIntWithId:withLong:withInt:);
  methods[5].selector = @selector(compareAndSwapIntWithId:withLong:withInt:withInt:);
  methods[6].selector = @selector(addressOfWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNSAFE", "LSunMiscUnsafe;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "DISABLED_BY_USER", "Z", .constantValue.asBOOL = RxInternalUtilUnsafeUnsafeAccess_DISABLED_BY_USER, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getAndIncrementInt", "LNSObject;J", "getAndAddInt", "LNSObject;JI", "getAndSetInt", "compareAndSwapInt", "LNSObject;JII", "addressOf", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)J", &RxInternalUtilUnsafeUnsafeAccess_UNSAFE };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeUnsafeAccess = { "UnsafeAccess", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x11, 7, 2, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilUnsafeUnsafeAccess;
}

+ (void)initialize {
  if (self == [RxInternalUtilUnsafeUnsafeAccess class]) {
    {
      SunMiscUnsafe *u = nil;
      @try {
        JavaLangReflectField *field = [SunMiscUnsafe_class_() getDeclaredField:@"theUnsafe"];
        [((JavaLangReflectField *) nil_chk(field)) setAccessibleWithBoolean:true];
        u = (SunMiscUnsafe *) cast_chk([field getWithId:nil], [SunMiscUnsafe class]);
      }
      @catch (NSException *e) {
      }
      JreStrongAssign(&RxInternalUtilUnsafeUnsafeAccess_UNSAFE, u);
    }
    J2OBJC_SET_INITIALIZED(RxInternalUtilUnsafeUnsafeAccess)
  }
}

@end

void RxInternalUtilUnsafeUnsafeAccess_init(RxInternalUtilUnsafeUnsafeAccess *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxInternalUtilUnsafeUnsafeAccess *new_RxInternalUtilUnsafeUnsafeAccess_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilUnsafeUnsafeAccess, init)
}

RxInternalUtilUnsafeUnsafeAccess *create_RxInternalUtilUnsafeUnsafeAccess_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilUnsafeUnsafeAccess, init)
}

jboolean RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable() {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  return false;
}

jint RxInternalUtilUnsafeUnsafeAccess_getAndIncrementIntWithId_withLong_(id obj, jlong offset) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  for (; ; ) {
    jint current = [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) getIntVolatileWithId:obj withLong:offset];
    jint next = current + 1;
    if ([RxInternalUtilUnsafeUnsafeAccess_UNSAFE compareAndSwapIntWithId:obj withLong:offset withInt:current withInt:next]) {
      return current;
    }
  }
}

jint RxInternalUtilUnsafeUnsafeAccess_getAndAddIntWithId_withLong_withInt_(id obj, jlong offset, jint n) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  for (; ; ) {
    jint current = [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) getIntVolatileWithId:obj withLong:offset];
    jint next = current + n;
    if ([RxInternalUtilUnsafeUnsafeAccess_UNSAFE compareAndSwapIntWithId:obj withLong:offset withInt:current withInt:next]) {
      return current;
    }
  }
}

jint RxInternalUtilUnsafeUnsafeAccess_getAndSetIntWithId_withLong_withInt_(id obj, jlong offset, jint newValue) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  for (; ; ) {
    jint current = [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) getIntVolatileWithId:obj withLong:offset];
    if ([RxInternalUtilUnsafeUnsafeAccess_UNSAFE compareAndSwapIntWithId:obj withLong:offset withInt:current withInt:newValue]) {
      return current;
    }
  }
}

jboolean RxInternalUtilUnsafeUnsafeAccess_compareAndSwapIntWithId_withLong_withInt_withInt_(id obj, jlong offset, jint expected, jint newValue) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  return [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) compareAndSwapIntWithId:obj withLong:offset withInt:expected withInt:newValue];
}

jlong RxInternalUtilUnsafeUnsafeAccess_addressOfWithIOSClass_withNSString_(IOSClass *clazz, NSString *fieldName) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  @try {
    JavaLangReflectField *f = [((IOSClass *) nil_chk(clazz)) getDeclaredField:fieldName];
    return [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) objectFieldOffsetWithJavaLangReflectField:f];
  }
  @catch (JavaLangNoSuchFieldException *ex) {
    JavaLangInternalError *ie = create_JavaLangInternalError_init();
    [ie initCauseWithNSException:ex];
    @throw ie;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeUnsafeAccess)
