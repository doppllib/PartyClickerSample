//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorObserveOn")
#ifdef RESTRICT_RxInternalOperatorsOperatorObserveOn
#define INCLUDE_ALL_RxInternalOperatorsOperatorObserveOn 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorObserveOn 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorObserveOn

#if !defined (RxInternalOperatorsOperatorObserveOn_) && (INCLUDE_ALL_RxInternalOperatorsOperatorObserveOn || defined(INCLUDE_RxInternalOperatorsOperatorObserveOn))
#define RxInternalOperatorsOperatorObserveOn_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "RxObservable.h"

@class RxScheduler;
@class RxSubscriber;

@interface RxInternalOperatorsOperatorObserveOn : NSObject < RxObservable_Operator >

#pragma mark Public

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler
                        withBoolean:(jboolean)delayError;

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler
                        withBoolean:(jboolean)delayError
                            withInt:(jint)bufferSize;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

+ (id<RxObservable_Operator>)rebatchWithInt:(jint)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOn)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_(RxInternalOperatorsOperatorObserveOn *self, RxScheduler *scheduler, jboolean delayError);

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn *new_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_(RxScheduler *scheduler, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn *create_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_(RxScheduler *scheduler, jboolean delayError);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_withInt_(RxInternalOperatorsOperatorObserveOn *self, RxScheduler *scheduler, jboolean delayError, jint bufferSize);

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn *new_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_withInt_(RxScheduler *scheduler, jboolean delayError, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn *create_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_withInt_(RxScheduler *scheduler, jboolean delayError, jint bufferSize);

FOUNDATION_EXPORT id<RxObservable_Operator> RxInternalOperatorsOperatorObserveOn_rebatchWithInt_(jint n);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorObserveOn)

#endif

#if !defined (RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorObserveOn || defined(INCLUDE_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber))
#define RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "RxSubscriber.h"

#define RESTRICT_RxFunctionsAction0 1
#define INCLUDE_RxFunctionsAction0 1
#include "RxFunctionsAction0.h"

@class JavaUtilConcurrentAtomicAtomicLong;
@class RxScheduler;
@class RxScheduler_Worker;
@protocol JavaUtilQueue;

@interface RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber : RxSubscriber < RxFunctionsAction0 > {
 @public
  RxSubscriber *child_;
  RxScheduler_Worker *recursiveScheduler_;
  jboolean delayError_;
  id<JavaUtilQueue> queue_;
  jint limit_;
  volatile_jboolean finished_;
  JavaUtilConcurrentAtomicAtomicLong *requested_ObserveOnSubscriber_;
  JavaUtilConcurrentAtomicAtomicLong *counter_;
  NSException *error_;
  jlong emitted_;
}

#pragma mark Public

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler
                   withRxSubscriber:(RxSubscriber *)child
                        withBoolean:(jboolean)delayError
                            withInt:(jint)bufferSize;

- (void)call;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Protected

- (void)schedule;

#pragma mark Package-Private

- (jboolean)checkTerminatedWithBoolean:(jboolean)done
                           withBoolean:(jboolean)isEmpty
                      withRxSubscriber:(RxSubscriber *)a
                     withJavaUtilQueue:(id<JavaUtilQueue>)q;

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, recursiveScheduler_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, queue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, requested_ObserveOnSubscriber_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, counter_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, error_, NSException *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *self, RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize);

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *new_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *create_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorObserveOn")
