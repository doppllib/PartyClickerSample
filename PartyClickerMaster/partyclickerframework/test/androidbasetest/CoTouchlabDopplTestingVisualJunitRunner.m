//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "CoTouchlabDopplTestingVisualJunitRunner.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/List.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/JUnitCore.h"
#include "org/junit/runner/Result.h"
#include "org/junit/runner/notification/Failure.h"

@interface CoTouchlabDopplTestingVisualJunitRunner ()

- (void)runAllInBackground;

- (OrgJunitRunnerResult *)runTestsByMyselfWithOrgJunitRunnerJUnitCore:(OrgJunitRunnerJUnitCore *)junit;

@end

__attribute__((unused)) static void CoTouchlabDopplTestingVisualJunitRunner_runAllInBackground(CoTouchlabDopplTestingVisualJunitRunner *self);

__attribute__((unused)) static OrgJunitRunnerResult *CoTouchlabDopplTestingVisualJunitRunner_runTestsByMyselfWithOrgJunitRunnerJUnitCore_(CoTouchlabDopplTestingVisualJunitRunner *self, OrgJunitRunnerJUnitCore *junit);

@interface CoTouchlabDopplTestingVisualJunitRunner_1 : JavaLangThread {
 @public
  CoTouchlabDopplTestingVisualJunitRunner *this$0_;
}

- (instancetype)initWithCoTouchlabDopplTestingVisualJunitRunner:(CoTouchlabDopplTestingVisualJunitRunner *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabDopplTestingVisualJunitRunner_1)

__attribute__((unused)) static void CoTouchlabDopplTestingVisualJunitRunner_1_initWithCoTouchlabDopplTestingVisualJunitRunner_(CoTouchlabDopplTestingVisualJunitRunner_1 *self, CoTouchlabDopplTestingVisualJunitRunner *outer$);

__attribute__((unused)) static CoTouchlabDopplTestingVisualJunitRunner_1 *new_CoTouchlabDopplTestingVisualJunitRunner_1_initWithCoTouchlabDopplTestingVisualJunitRunner_(CoTouchlabDopplTestingVisualJunitRunner *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabDopplTestingVisualJunitRunner_1 *create_CoTouchlabDopplTestingVisualJunitRunner_1_initWithCoTouchlabDopplTestingVisualJunitRunner_(CoTouchlabDopplTestingVisualJunitRunner *outer$);

@implementation CoTouchlabDopplTestingVisualJunitRunner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabDopplTestingVisualJunitRunner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)runAllInBackground {
  CoTouchlabDopplTestingVisualJunitRunner_runAllInBackground(self);
}

- (OrgJunitRunnerResult *)runTestsByMyselfWithOrgJunitRunnerJUnitCore:(OrgJunitRunnerJUnitCore *)junit {
  return CoTouchlabDopplTestingVisualJunitRunner_runTestsByMyselfWithOrgJunitRunnerJUnitCore_(self, junit);
}

- (IOSObjectArray *)testClasses {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)goRun {
  [create_CoTouchlabDopplTestingVisualJunitRunner_1_initWithCoTouchlabDopplTestingVisualJunitRunner_(self) start];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerResult;", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LIOSClass;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runAllInBackground);
  methods[2].selector = @selector(runTestsByMyselfWithOrgJunitRunnerJUnitCore:);
  methods[3].selector = @selector(testClasses);
  methods[4].selector = @selector(goRun);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "runTestsByMyself", "LOrgJunitRunnerJUnitCore;" };
  static const J2ObjcClassInfo _CoTouchlabDopplTestingVisualJunitRunner = { "VisualJunitRunner", "co.touchlab.doppl.testing", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabDopplTestingVisualJunitRunner;
}

@end

void CoTouchlabDopplTestingVisualJunitRunner_init(CoTouchlabDopplTestingVisualJunitRunner *self) {
  NSObject_init(self);
}

void CoTouchlabDopplTestingVisualJunitRunner_runAllInBackground(CoTouchlabDopplTestingVisualJunitRunner *self) {
  OrgJunitRunnerJUnitCore *junit = create_OrgJunitRunnerJUnitCore_init();
  OrgJunitRunnerResult *result = CoTouchlabDopplTestingVisualJunitRunner_runTestsByMyselfWithOrgJunitRunnerJUnitCore_(self, junit);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Junit complete"];
  if ([((OrgJunitRunnerResult *) nil_chk(result)) wasSuccessful]) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Success"];
  }
  else {
    id<JavaUtilList> failures = [result getFailures];
    for (OrgJunitRunnerNotificationFailure * __strong failure in nil_chk(failures)) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[((OrgJunitRunnerNotificationFailure *) nil_chk(failure)) description]];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"message: ", [failure getMessage])];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"description: ", [((OrgJunitRunnerDescription *) nil_chk([failure getDescription])) description])];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"trace: ", [failure getTrace])];
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"Failures ", [result getFailureCount])];
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"Total ", [result getRunCount])];
}

OrgJunitRunnerResult *CoTouchlabDopplTestingVisualJunitRunner_runTestsByMyselfWithOrgJunitRunnerJUnitCore_(CoTouchlabDopplTestingVisualJunitRunner *self, OrgJunitRunnerJUnitCore *junit) {
  return [((OrgJunitRunnerJUnitCore *) nil_chk(junit)) runWithIOSClassArray:[self testClasses]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDopplTestingVisualJunitRunner)

@implementation CoTouchlabDopplTestingVisualJunitRunner_1

- (instancetype)initWithCoTouchlabDopplTestingVisualJunitRunner:(CoTouchlabDopplTestingVisualJunitRunner *)outer$ {
  CoTouchlabDopplTestingVisualJunitRunner_1_initWithCoTouchlabDopplTestingVisualJunitRunner_(self, outer$);
  return self;
}

- (void)run {
  CoTouchlabDopplTestingVisualJunitRunner_runAllInBackground(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCoTouchlabDopplTestingVisualJunitRunner:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCoTouchlabDopplTestingVisualJunitRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabDopplTestingVisualJunitRunner;", "goRun" };
  static const J2ObjcClassInfo _CoTouchlabDopplTestingVisualJunitRunner_1 = { "", "co.touchlab.doppl.testing", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_CoTouchlabDopplTestingVisualJunitRunner_1;
}

@end

void CoTouchlabDopplTestingVisualJunitRunner_1_initWithCoTouchlabDopplTestingVisualJunitRunner_(CoTouchlabDopplTestingVisualJunitRunner_1 *self, CoTouchlabDopplTestingVisualJunitRunner *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_init(self);
}

CoTouchlabDopplTestingVisualJunitRunner_1 *new_CoTouchlabDopplTestingVisualJunitRunner_1_initWithCoTouchlabDopplTestingVisualJunitRunner_(CoTouchlabDopplTestingVisualJunitRunner *outer$) {
  J2OBJC_NEW_IMPL(CoTouchlabDopplTestingVisualJunitRunner_1, initWithCoTouchlabDopplTestingVisualJunitRunner_, outer$)
}

CoTouchlabDopplTestingVisualJunitRunner_1 *create_CoTouchlabDopplTestingVisualJunitRunner_1_initWithCoTouchlabDopplTestingVisualJunitRunner_(CoTouchlabDopplTestingVisualJunitRunner *outer$) {
  J2OBJC_CREATE_IMPL(CoTouchlabDopplTestingVisualJunitRunner_1, initWithCoTouchlabDopplTestingVisualJunitRunner_, outer$)
}
