//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxObserversAsyncCompletableSubscriber.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface RxObserversAsyncCompletableSubscriber () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *upstream_;
}

@end

J2OBJC_FIELD_SETTER(RxObserversAsyncCompletableSubscriber, upstream_, JavaUtilConcurrentAtomicAtomicReference *)

J2OBJC_INITIALIZED_DEFN(RxObserversAsyncCompletableSubscriber)

RxObserversAsyncCompletableSubscriber_Unsubscribed *RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED;

@implementation RxObserversAsyncCompletableSubscriber

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversAsyncCompletableSubscriber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(upstream_)) compareAndSetWithId:nil withId:d]) {
    [((id<RxSubscription>) nil_chk(d)) unsubscribe];
    if ([upstream_ get] != RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED) {
      RxPluginsRxJavaHooks_onErrorWithNSException_(create_JavaLangIllegalStateException_initWithNSString_(@"Subscription already set!"));
    }
  }
  else {
    [self onStart];
  }
}

- (void)onStart {
}

- (jboolean)isUnsubscribed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(upstream_)) get] == RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED;
}

- (void)clear {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(upstream_)) setWithId:RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED];
}

- (void)unsubscribe {
  id<RxSubscription> current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(upstream_)) get];
  if (current != RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED) {
    current = [upstream_ getAndSetWithId:RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED];
    if (current != nil && current != RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED) {
      [current unsubscribe];
    }
  }
}

- (void)dealloc {
  RELEASE_(upstream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onSubscribeWithRxSubscription:);
  methods[2].selector = @selector(onStart);
  methods[3].selector = @selector(isUnsubscribed);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(unsubscribe);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNSUBSCRIBED", "LRxObserversAsyncCompletableSubscriber_Unsubscribed;", .constantValue.asLong = 0, 0x18, -1, 2, -1, -1 },
    { "upstream_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", &RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED, "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxObserversAsyncCompletableSubscriber_Unsubscribed;" };
  static const J2ObjcClassInfo _RxObserversAsyncCompletableSubscriber = { "AsyncCompletableSubscriber", "rx.observers", ptrTable, methods, fields, 7, 0x401, 6, 2, -1, 4, -1, -1, -1 };
  return &_RxObserversAsyncCompletableSubscriber;
}

+ (void)initialize {
  if (self == [RxObserversAsyncCompletableSubscriber class]) {
    JreStrongAssignAndConsume(&RxObserversAsyncCompletableSubscriber_UNSUBSCRIBED, new_RxObserversAsyncCompletableSubscriber_Unsubscribed_init());
    J2OBJC_SET_INITIALIZED(RxObserversAsyncCompletableSubscriber)
  }
}

@end

void RxObserversAsyncCompletableSubscriber_init(RxObserversAsyncCompletableSubscriber *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->upstream_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversAsyncCompletableSubscriber)

@implementation RxObserversAsyncCompletableSubscriber_Unsubscribed

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversAsyncCompletableSubscriber_Unsubscribed_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)unsubscribe {
}

- (jboolean)isUnsubscribed {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(unsubscribe);
  methods[2].selector = @selector(isUnsubscribed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObserversAsyncCompletableSubscriber;" };
  static const J2ObjcClassInfo _RxObserversAsyncCompletableSubscriber_Unsubscribed = { "Unsubscribed", "rx.observers", ptrTable, methods, NULL, 7, 0x18, 3, 0, 0, -1, -1, -1, -1 };
  return &_RxObserversAsyncCompletableSubscriber_Unsubscribed;
}

@end

void RxObserversAsyncCompletableSubscriber_Unsubscribed_init(RxObserversAsyncCompletableSubscriber_Unsubscribed *self) {
  NSObject_init(self);
}

RxObserversAsyncCompletableSubscriber_Unsubscribed *new_RxObserversAsyncCompletableSubscriber_Unsubscribed_init() {
  J2OBJC_NEW_IMPL(RxObserversAsyncCompletableSubscriber_Unsubscribed, init)
}

RxObserversAsyncCompletableSubscriber_Unsubscribed *create_RxObserversAsyncCompletableSubscriber_Unsubscribed_init() {
  J2OBJC_CREATE_IMPL(RxObserversAsyncCompletableSubscriber_Unsubscribed, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversAsyncCompletableSubscriber_Unsubscribed)
