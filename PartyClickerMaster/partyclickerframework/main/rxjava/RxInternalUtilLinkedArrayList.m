//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilLinkedArrayList.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation RxInternalUtilLinkedArrayList

- (instancetype)initWithInt:(jint)capacityHint {
  RxInternalUtilLinkedArrayList_initWithInt_(self, capacityHint);
  return self;
}

- (void)addWithId:(id)o {
  if (JreLoadVolatileInt(&size_) == 0) {
    JreStrongAssignAndConsume(&head_, [IOSObjectArray newArrayWithLength:capacityHint_ + 1 type:NSObject_class_()]);
    JreStrongAssign(&tail_, head_);
    IOSObjectArray_Set(head_, 0, o);
    indexInTail_ = 1;
    JreAssignVolatileInt(&size_, 1);
  }
  else if (indexInTail_ == capacityHint_) {
    IOSObjectArray *t = [IOSObjectArray arrayWithLength:capacityHint_ + 1 type:NSObject_class_()];
    IOSObjectArray_Set(t, 0, o);
    IOSObjectArray_Set(nil_chk(tail_), capacityHint_, t);
    JreStrongAssign(&tail_, t);
    indexInTail_ = 1;
    size_++;
  }
  else {
    IOSObjectArray_Set(nil_chk(tail_), indexInTail_, o);
    indexInTail_++;
    size_++;
  }
}

- (IOSObjectArray *)head {
  return head_;
}

- (IOSObjectArray *)tail {
  return tail_;
}

- (jint)size {
  return JreLoadVolatileInt(&size_);
}

- (jint)indexInTail {
  return indexInTail_;
}

- (jint)capacityHint {
  return capacityHint_;
}

- (id<JavaUtilList>)toList {
  jint cap = capacityHint_;
  jint s = JreLoadVolatileInt(&size_);
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(s + 1);
  IOSObjectArray *h = [self head];
  jint j = 0;
  jint k = 0;
  while (j < s) {
    [list addWithId:IOSObjectArray_Get(nil_chk(h), k)];
    j++;
    if (++k == cap) {
      k = 0;
      h = (IOSObjectArray *) cast_check(IOSObjectArray_Get(h, cap), IOSClass_arrayType(NSObject_class_(), 1));
    }
  }
  return list;
}

- (NSString *)description {
  return [((id<JavaUtilList>) nil_chk([self toList])) description];
}

- (void)java_finalize {
  IOSObjectArray *myArray = head_;
  while (myArray != nil) {
    jint lastIndex = myArray->size_ - 1;
    IOSObjectArray *lastRef = (IOSObjectArray *) cast_check(IOSObjectArray_Get(myArray, lastIndex), IOSClass_arrayType(NSObject_class_(), 1));
    IOSObjectArray_Set(myArray, lastIndex, nil);
    myArray = lastRef;
  }
  [super java_finalize];
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalUtilLinkedArrayList class]);
  RELEASE_(head_);
  RELEASE_(tail_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, -1, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(head);
  methods[3].selector = @selector(tail);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(indexInTail);
  methods[6].selector = @selector(capacityHint);
  methods[7].selector = @selector(toList);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(java_finalize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "capacityHint_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "head_", "[LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tail_", "[LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "indexInTail_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "add", "LNSObject;", "()Ljava/util/List<Ljava/lang/Object;>;", "toString", "finalize", "LNSException;" };
  static const J2ObjcClassInfo _RxInternalUtilLinkedArrayList = { "LinkedArrayList", "rx.internal.util", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilLinkedArrayList;
}

@end

void RxInternalUtilLinkedArrayList_initWithInt_(RxInternalUtilLinkedArrayList *self, jint capacityHint) {
  NSObject_init(self);
  self->capacityHint_ = capacityHint;
}

RxInternalUtilLinkedArrayList *new_RxInternalUtilLinkedArrayList_initWithInt_(jint capacityHint) {
  J2OBJC_NEW_IMPL(RxInternalUtilLinkedArrayList, initWithInt_, capacityHint)
}

RxInternalUtilLinkedArrayList *create_RxInternalUtilLinkedArrayList_initWithInt_(jint capacityHint) {
  J2OBJC_CREATE_IMPL(RxInternalUtilLinkedArrayList, initWithInt_, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilLinkedArrayList)
