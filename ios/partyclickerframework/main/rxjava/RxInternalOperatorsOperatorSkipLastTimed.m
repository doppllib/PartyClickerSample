//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RxInternalOperatorsOperatorSkipLastTimed.h"
#include "RxScheduler.h"
#include "RxSchedulersTimestamped.h"
#include "RxSubscriber.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Deque.h"
#include "java/util/concurrent/TimeUnit.h"

@interface RxInternalOperatorsOperatorSkipLastTimed_1 : RxSubscriber {
 @public
  RxInternalOperatorsOperatorSkipLastTimed *this$0_;
  RxSubscriber *val$subscriber_;
  id<JavaUtilDeque> buffer_;
}

- (instancetype)initWithRxInternalOperatorsOperatorSkipLastTimed:(RxInternalOperatorsOperatorSkipLastTimed *)outer$
                                                withRxSubscriber:(RxSubscriber *)capture$0
                                                withRxSubscriber:(RxSubscriber *)subscriber;

- (void)emitItemsOutOfWindowWithLong:(jlong)now;

- (void)onNextWithId:(id)value;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipLastTimed_1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipLastTimed_1, buffer_, id<JavaUtilDeque>)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipLastTimed_1_initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSkipLastTimed_1 *self, RxInternalOperatorsOperatorSkipLastTimed *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipLastTimed_1 *new_RxInternalOperatorsOperatorSkipLastTimed_1_initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSkipLastTimed *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipLastTimed_1 *create_RxInternalOperatorsOperatorSkipLastTimed_1_initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSkipLastTimed *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber);

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipLastTimed_1_emitItemsOutOfWindowWithLong_(RxInternalOperatorsOperatorSkipLastTimed_1 *self, jlong now);

@implementation RxInternalOperatorsOperatorSkipLastTimed

- (instancetype)initWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler {
  RxInternalOperatorsOperatorSkipLastTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(self, time, unit, scheduler);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)subscriber {
  return create_RxInternalOperatorsOperatorSkipLastTimed_1_initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_(self, subscriber, subscriber);
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxSubscriber;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withJavaUtilConcurrentTimeUnit:withRxScheduler:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeInMillis_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JLJavaUtilConcurrentTimeUnit;LRxScheduler;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipLastTimed = { "OperatorSkipLastTimed", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, 4, -1 };
  return &_RxInternalOperatorsOperatorSkipLastTimed;
}

@end

void RxInternalOperatorsOperatorSkipLastTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOperatorSkipLastTimed *self, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  NSObject_init(self);
  self->timeInMillis_ = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMillisWithLong:time];
  JreStrongAssign(&self->scheduler_, scheduler);
}

RxInternalOperatorsOperatorSkipLastTimed *new_RxInternalOperatorsOperatorSkipLastTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipLastTimed, initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_, time, unit, scheduler)
}

RxInternalOperatorsOperatorSkipLastTimed *create_RxInternalOperatorsOperatorSkipLastTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipLastTimed, initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_, time, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSkipLastTimed)

@implementation RxInternalOperatorsOperatorSkipLastTimed_1

- (instancetype)initWithRxInternalOperatorsOperatorSkipLastTimed:(RxInternalOperatorsOperatorSkipLastTimed *)outer$
                                                withRxSubscriber:(RxSubscriber *)capture$0
                                                withRxSubscriber:(RxSubscriber *)subscriber {
  RxInternalOperatorsOperatorSkipLastTimed_1_initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_(self, outer$, capture$0, subscriber);
  return self;
}

- (void)emitItemsOutOfWindowWithLong:(jlong)now {
  RxInternalOperatorsOperatorSkipLastTimed_1_emitItemsOutOfWindowWithLong_(self, now);
}

- (void)onNextWithId:(id)value {
  jlong now = [((RxScheduler *) nil_chk(this$0_->scheduler_)) now];
  RxInternalOperatorsOperatorSkipLastTimed_1_emitItemsOutOfWindowWithLong_(self, now);
  [((id<JavaUtilDeque>) nil_chk(buffer_)) offerLastWithId:create_RxSchedulersTimestamped_initWithLong_withId_(now, value)];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriber *) nil_chk(val$subscriber_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  RxInternalOperatorsOperatorSkipLastTimed_1_emitItemsOutOfWindowWithLong_(self, [((RxScheduler *) nil_chk(this$0_->scheduler_)) now]);
  [((RxSubscriber *) nil_chk(val$subscriber_)) onCompleted];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorSkipLastTimed:withRxSubscriber:withRxSubscriber:);
  methods[1].selector = @selector(emitItemsOutOfWindowWithLong:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSkipLastTimed;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 10, -1 },
    { "buffer_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<*>;)V", "emitItemsOutOfWindow", "J", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/internal/operators/OperatorSkipLastTimed<TT;>;", "Lrx/Subscriber<-TT;>;", "Ljava/util/Deque<Lrx/schedulers/Timestamped<TT;>;>;", "LRxInternalOperatorsOperatorSkipLastTimed;", "callWithId:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipLastTimed_1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8018, 5, 3, 12, -1, 13, 14, -1 };
  return &_RxInternalOperatorsOperatorSkipLastTimed_1;
}

@end

void RxInternalOperatorsOperatorSkipLastTimed_1_initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSkipLastTimed_1 *self, RxInternalOperatorsOperatorSkipLastTimed *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  RxSubscriber_initWithRxSubscriber_(self, subscriber);
  JreStrongAssignAndConsume(&self->buffer_, new_JavaUtilArrayDeque_init());
}

RxInternalOperatorsOperatorSkipLastTimed_1 *new_RxInternalOperatorsOperatorSkipLastTimed_1_initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSkipLastTimed *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipLastTimed_1, initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_, outer$, capture$0, subscriber)
}

RxInternalOperatorsOperatorSkipLastTimed_1 *create_RxInternalOperatorsOperatorSkipLastTimed_1_initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSkipLastTimed *outer$, RxSubscriber *capture$0, RxSubscriber *subscriber) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipLastTimed_1, initWithRxInternalOperatorsOperatorSkipLastTimed_withRxSubscriber_withRxSubscriber_, outer$, capture$0, subscriber)
}

void RxInternalOperatorsOperatorSkipLastTimed_1_emitItemsOutOfWindowWithLong_(RxInternalOperatorsOperatorSkipLastTimed_1 *self, jlong now) {
  jlong limit = now - self->this$0_->timeInMillis_;
  while (![((id<JavaUtilDeque>) nil_chk(self->buffer_)) isEmpty]) {
    RxSchedulersTimestamped *v = [((id<JavaUtilDeque>) nil_chk(self->buffer_)) getFirst];
    if ([((RxSchedulersTimestamped *) nil_chk(v)) getTimestampMillis] < limit) {
      [((id<JavaUtilDeque>) nil_chk(self->buffer_)) removeFirst];
      [((RxSubscriber *) nil_chk(self->val$subscriber_)) onNextWithId:[v getValue]];
    }
    else {
      break;
    }
  }
}
